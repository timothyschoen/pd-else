#N canvas 563 38 563 546 10;
#X obj 327 203 bng 15 250 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000;
#X obj 186 211 bng 20 250 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000;
#X obj 355 275 nbx 3 14 0 100 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X text 395 273 group size;
#X floatatom 162 248 5 0 0 0 - - - 0;
#X text 122 214 remainder;
#X msg 217 201 list g h i j k;
#X msg 244 223 a b c d e f;
#X msg 114 248 clear;
#X obj 306 4 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc 0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 305 3 pd;
#X obj 345 11 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc 0;
#X obj 23 40 cnv 4 4 4 empty empty Group 0 28 2 18 #e0e0e0 #000000 0;
#X obj 458 11 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 478 11 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 515 11 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 464 26 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 502 26 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 77 40 cnv 4 4 4 empty empty messages 0 28 2 18 #e0e0e0 #000000 0;
#X obj 3 3 cnv 15 301 42 empty empty group 20 20 2 37 #e0e0e0 #000000 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1 0 0;
#X restore 3 3 graph;
#X obj 4 349 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 432 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 489 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000 0;
#X obj 117 441 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 117 358 cnv 17 3 43 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 4 517 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020 0;
#X text 171 371 bang;
#X obj 117 408 cnv 17 3 17 empty empty 1 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 201 409 - calculate or output the last calculated value;
#X text 147 355 anything;
#X text 147 441 anything;
#X text 201 355 - input messages to be regrouped, f 38;
#X text 201 371 - outputs the remainder, f 38;
#X text 165 386 clear;
#X text 201 386 - clears the remainder, f 38;
#X text 165 409 float;
#X text 201 441 - the regrouped message;
#X text 167 498 1) float - group size (default 0);
#X obj 354 244 else/loop 13;
#X text 78 136 A bang message sends the remaining stored elements that haven't reached the group size yet. So you can send a bang afterwards to force an output. A group size of zero keeps regrouping indefinitely until a bang is given., f 67;
#X obj 327 224 t b b;
#X obj 152 40 cnv 4 4 4 empty empty into 0 28 2 18 #e0e0e0 #000000 0;
#X obj 187 40 cnv 4 4 4 empty empty a 0 28 2 18 #e0e0e0 #000000 0;
#X obj 203 40 cnv 4 4 4 empty empty list 0 28 2 18 #e0e0e0 #000000 0;
#X text 78 87 [group] groups messages according to a group size. When the input is smaller than the group size \, it needs to reach the group size before it's sent out. If the input list is bigger than the group size \, the remainder gets grouped in further lists., f 67;
#X obj 244 298 else/group 2, f 19;
#X obj 244 323 print group;
#X obj 355 321 bng 17 250 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000;
#X text 376 315 no remainder (group is empty), f 16;
#X obj 117 462 cnv 17 3 17 empty empty 1 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 171 462 bang;
#X text 201 462 - when there's no remainder (group is empty);
#X connect 0 0 41 0;
#X connect 1 0 46 0;
#X connect 2 0 46 1;
#X connect 4 0 46 0;
#X connect 6 0 46 0;
#X connect 7 0 46 0;
#X connect 8 0 46 0;
#X connect 39 0 46 0;
#X connect 41 0 46 0;
#X connect 41 1 39 0;
#X connect 46 0 47 0;
#X connect 46 1 48 0;
