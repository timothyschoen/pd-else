#N canvas 562 38 565 585 10;
#X obj 218 158 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X text 278 157 <= hz;
#N canvas 403 51 858 494 sync 0;
#X msg 29 134 0;
#X obj 37 249 vsl 15 100 -1 1 0 0 empty empty empty 0 -9 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 37 211 else/sig2float~;
#X msg 63 134 0.25;
#X msg 140 133 0.75;
#X msg 183 133 1;
#X msg 105 133 0.5;
#X obj 248 249 vsl 15 100 -1 1 0 0 empty empty empty 0 -9 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 248 217 else/sig2float~;
#X text 217 132 <= reset =>;
#X text 34 15 The second inlet resets the phase ands behaves in the same way for control data as objects like [osc~] and [phasor~] in Pd. A number input resets the oscillator and restarts the cycle with an initial phase that corresponds to the input number \, so the internal phase is synced to the given value. The phase values are from 0 to 1 and values beyond that are wrapped within this range.;
#X text 518 25 Syncing the phase with control messages is useful for LFOs and control with MIDI. A sync with audio is useful for the "hard sync" technique \, where an oscillator is synced according to the frequency of a master frequency., f 44;
#X obj 528 255 else/out~;
#X obj 583 149 nbx 5 14 110 200 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X text 684 175 Master oscillator;
#X text 670 210 Slave oscillator;
#X obj 583 175 else/imp~ 110;
#X text 509 349 NOTE:;
#X text 525 382 The "phase sync" inlet is quite different from the "phase offset" inlet. This means that the are completely independent., f 43;
#X text 36 370 Additionally \, you can reset the oscillator with an impulse signal. Inputs that are > 0 and <= 1 reset the phase Pdexpects an impulse signal for syncing. The impulse values need to be > 0 and <= 1 (otherwise ignored). Because phase is cyclical \, the value of 1 represents the "phase 0" of the cycle \, where the impulse occurs. Send it impulses above and check the result. Use a multiplier to reset to another phase value.;
#N canvas 207 34 366 264 (subpatch) 0;
#X obj 51 101 tgl 42 0 \$0-tgl-s \$0-tgl-r empty 1 8 1 9 #dcdcdc #7c7c7c #fcfcfc 0 1;
#X obj 215 68 route dsp;
#X obj 215 37 receive pd;
#N canvas 977 77 379 291 set_color 0;
#X obj 47 30 inlet;
#X obj 147 200 s \$0-cnv;
#X obj 47 83 select 0 1;
#X obj 47 220 s \$0-tgl-r;
#N canvas 0 22 712 637 off 0;
#X obj 490 220 * -1;
#X obj 424 300 +;
#X obj 409 325 +;
#X obj 347 219 * -65536;
#X obj 424 220 * -256;
#X obj 409 356 - 1;
#X obj 390 189 unpack f f f;
#X obj 225 295 +;
#X obj 210 320 +;
#X obj 148 214 * -65536;
#X obj 225 215 * -256;
#X obj 291 215 * -1;
#X obj 210 351 - 1;
#X obj 191 184 unpack f f f;
#X obj 379 423 pack;
#X msg 395 152 124 124 124;
#X msg 203 154 220 220 220;
#X obj 238 121 t b b;
#X obj 238 81 inlet;
#X obj 378 485 outlet;
#X connect 0 0 1 1;
#X connect 1 0 2 1;
#X connect 2 0 5 0;
#X connect 3 0 2 0;
#X connect 4 0 1 0;
#X connect 5 0 14 1;
#X connect 6 0 3 0;
#X connect 6 1 4 0;
#X connect 6 2 0 0;
#X connect 7 0 8 1;
#X connect 8 0 12 0;
#X connect 9 0 8 0;
#X connect 10 0 7 0;
#X connect 11 0 7 1;
#X connect 12 0 14 0;
#X connect 13 0 9 0;
#X connect 13 1 10 0;
#X connect 13 2 11 0;
#X connect 14 0 19 0;
#X connect 15 0 6 0;
#X connect 16 0 13 0;
#X connect 17 0 16 0;
#X connect 17 1 15 0;
#X connect 18 0 17 0;
#X restore 47 113 pd off;
#X msg 47 180 color \$1 \$2 0;
#X msg 147 131 -4.86997e+06 -1.34937e+07;
#X msg 147 171 color \$1 0 \$2;
#X connect 0 0 2 0;
#X connect 2 0 4 0;
#X connect 2 1 6 0;
#X connect 4 0 5 0;
#X connect 4 0 7 0;
#X connect 5 0 3 0;
#X connect 6 0 7 0;
#X connect 6 0 5 0;
#X connect 7 0 1 0;
#X restore 215 165 pd set_color;
#X obj 135 122 r \$0-tgl-s;
#N canvas 121 482 450 300 (subpatch) 0;
#X obj 101 101 cnv 25 40 25 empty \$0-cnv DSP 3 13 0 20 #dcdcdc #7c7c7c 0;
#X coords 0 -1 1 1 42 27 1 100 100;
#X restore 51 144 pd;
#X obj 226 139 s \$0-tgl-r;
#X msg 226 115 set \$1;
#X msg 135 177 \; pd dsp \$1;
#N canvas 256 32 278 194 load_check 0;
#X obj 136 53 sig~ 1;
#X obj 74 24 loadbang;
#X obj 136 86 snapshot~;
#X obj 91 52 del 5;
#X obj 136 151 outlet;
#X obj 74 103 tgl 15 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000 0 1;
#X obj 74 126 switch~;
#X connect 0 0 2 0;
#X connect 1 0 3 0;
#X connect 1 0 5 0;
#X connect 2 0 4 0;
#X connect 3 0 2 0;
#X connect 3 0 5 0;
#X connect 5 0 6 0;
#X restore 51 72 pd load_check;
#X connect 1 0 3 0;
#X connect 1 0 7 0;
#X connect 2 0 1 0;
#X connect 4 0 8 0;
#X connect 4 0 3 0;
#X connect 7 0 6 0;
#X connect 9 0 0 0;
#X coords 0 -1 1 1 44 72 2 50 100;
#X restore 132 267 pd;
#X obj 37 181 else/parabolic~ 0.25;
#X obj 248 193 else/parabolic~ 0.25;
#X obj 528 209 else/parabolic~ 200;
#X msg 412 134 0.25;
#X msg 338 133 0.75;
#X msg 306 133 1;
#X msg 378 133 0.5;
#X obj 306 165 else/float2imp~;
#X connect 0 0 21 1;
#X connect 2 0 1 0;
#X connect 3 0 21 1;
#X connect 4 0 21 1;
#X connect 5 0 21 1;
#X connect 6 0 21 1;
#X connect 8 0 7 0;
#X connect 13 0 16 0;
#X connect 16 0 23 1;
#X connect 21 0 2 0;
#X connect 22 0 8 0;
#X connect 23 0 12 0;
#X connect 24 0 28 0;
#X connect 25 0 28 0;
#X connect 26 0 28 0;
#X connect 27 0 28 0;
#X connect 28 0 22 1;
#X restore 494 192 pd sync;
#N canvas 430 175 786 354 phase 0;
#X obj 480 152 else/out~;
#X text 602 111 Phase Modulation:;
#X obj 591 83 osc~ 50.01;
#X text 21 22 The second argument sets an initial phase (or "phase offset"). This is also settable with the third inlet. This allows you to control two oscillators with the same frequency falling in and out of phase. Another feature is phase modulation., f 53;
#X obj 106 242 else/out~;
#X obj 106 206 +~;
#X text 367 105 1;
#X obj 235 105 hsl 128 15 0 1 0 0 empty empty empty -2 -8 0 10 #dcdcdc #000000 #000000 0 1;
#X floatatom 232 129 4 0 0 0 - - - 0;
#X text 215 105 0;
#X obj 232 153 else/float2sig~ 10;
#X text 397 28 The phase values are wrapped into the 0-1 range \, since the phase cycle is from 0 to 1 (where 1 is also the start of another cycle).;
#X text 433 241 Note: When used to modulate the phase \, a parabolic oscillator acts like a triangular wave modulating the frequency., f 50;
#X obj 62 140 else/parabolic~ 220 0.5;
#X obj 121 179 else/parabolic~ 220;
#X obj 480 110 else/parabolic~ 200;
#X connect 2 0 15 2;
#X connect 5 0 4 0;
#X connect 7 0 8 0;
#X connect 8 0 10 0;
#X connect 10 0 14 2;
#X connect 13 0 5 0;
#X connect 14 0 5 1;
#X connect 15 0 0 0;
#X restore 445 216 pd phase offset;
#X obj 218 221 else/out~;
#X obj 306 4 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc 0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 0 0;
#X restore 305 3 pd;
#X obj 345 11 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc 0;
#X obj 23 40 cnv 4 4 4 empty empty Parabolic 0 28 2 18 #e0e0e0 #000000 0;
#X obj 102 40 cnv 4 4 4 empty empty oscillator 0 28 2 18 #e0e0e0 #000000 0;
#X obj 458 11 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 478 11 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 515 11 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 464 26 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 502 26 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 3 3 cnv 15 301 42 empty empty parabolic~ 20 20 2 37 #e0e0e0 #000000 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1;
#X restore 2 3 graph;
#X obj 218 186 else/parabolic~ 440;
#X obj 3 288 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 3 407 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 3 506 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000 0;
#X obj 98 416 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 3 556 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020 0;
#X obj 98 363 cnv 17 3 17 empty empty 1 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 98 385 cnv 17 3 17 empty empty 2 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 154 515 1) float;
#X text 236 386 phase offset (modulation input), f 50;
#X text 236 364 phase sync (resets internal phase), f 50;
#X text 213 534 - initial phase offset (default 0);
#X text 154 534 2) float;
#X obj 98 297 cnv 17 3 58 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 146 312 midi <float> -;
#X text 236 312 non zero sets to frequency input in MIDI pitch, f 50;
#X obj 3 443 cnv 3 550 3 empty empty flags 8 12 0 13 #dcdcdc #000000 0;
#X text 213 515 - frequency in midi pitch or hertz (default 0);
#X text 146 342 soft <float> -;
#X text 236 342 non zero sets to soft sync mode, f 50;
#X text 133 482 -soft: sets to soft sync mode (default hard), f 58;
#X text 133 467 -midi: sets frequency input in MIDI pitch (default hertz), f 58;
#X text 128 364 float/signal(s) -;
#X text 128 386 float/signal(s) -;
#X text 164 417 signal(s) -;
#X text 134 297 list/signal(s) - frequency in hz or midi, f 67;
#X text 103 452 -mc <list>: sets multichannel output with a list of frequencies, f 63;
#X text 110 327 set <float \, float> -;
#X text 236 327 <channel \, freq> set a single frequency channel, f 50;
#X text 239 417 parabolic wave signal(s);
#N canvas 693 127 449 354 midi 0;
#X msg 150 150 midi \$1;
#X obj 150 121 tgl 19 0 empty empty empty 0 -8 0 10 #dfdfdf #000000 #000000 0 1;
#X floatatom 174 186 7 0 0 0 - - - 0;
#X obj 150 250 else/out~;
#X text 40 27 By default \, frequency input is in hertz \, but if you use the 'midi' message or '-midi' flag you can change it to MIDI pitch input \, where it is not really bound to the 0 to 127 range \, neither it has to be integers. This is just like using [mtof~]...;
#X obj 150 219 else/parabolic~ -midi 69;
#X connect 0 0 5 0;
#X connect 1 0 0 0;
#X connect 2 0 5 0;
#X connect 5 0 3 0;
#X restore 444 192 pd midi;
#N canvas 628 213 555 483 multichannel 0;
#X obj 39 354 else/out.mc~;
#X obj 126 273 else/sine~;
#X obj 126 244 *~ 0.75;
#X obj 113 177 *~ 2;
#X obj 236 368 else/out~;
#X floatatom 236 186 5 0 0 0 - - - 12;
#X msg 249 217 400 600;
#X msg 262 247 400 600 700;
#X text 33 14 If the oscillator has a multichannel left input \, it outputs the same number of channels. If the secondary inlets have a signal with a single channel for sync and phase modulation \, the single value is applied to all channels. If a secondary inlet is also a multichhanel signal \, then each channel gets its sync or phase deviation value. Note \, however \, that the number of multichannels in secondary inlets need to match the same number of channels from the left input., f 76;
#X obj 39 145 else/sigs~ 333 444;
#X obj 113 203 else/impulse~;
#X text 195 109 You can initialize the object with multichannel if you give it a list of frequencies with the -mc flag (you can't set phases though). A list input also works if no signal is connected to set it to multichannel with a list of frequency input., f 49;
#X msg 279 290 set 1 555;
#X text 349 283 the set message sets a single frequency channel, f 24;
#X obj 39 303 else/parabolic~;
#X obj 236 337 else/parabolic~ -mc 440 660;
#X connect 1 0 14 2;
#X connect 2 0 1 0;
#X connect 3 0 10 0;
#X connect 5 0 15 0;
#X connect 6 0 15 0;
#X connect 7 0 15 0;
#X connect 9 0 2 0;
#X connect 9 0 3 0;
#X connect 9 0 14 0;
#X connect 10 0 14 1;
#X connect 12 0 15 0;
#X connect 14 0 0 0;
#X connect 15 0 4 0;
#X restore 445 238 pd multichannel;
#X text 60 87 [parabolic~] is a parabolic oscillator that accepts negative frequencies \, has inlets for phase sync and and phase modulation. A parabolic waveform is similar to a sinusoid but it is not band limited (has aliasing). This oscillator has support for multichannels., f 73;
#X connect 0 0 17 0;
#X connect 17 0 4 0;
