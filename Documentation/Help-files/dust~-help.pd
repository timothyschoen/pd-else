#N canvas 481 51 563 569 10;
#X obj 218 163 hsl 128 15 1 5000 1 0 empty empty empty -2 -8 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 215 245 else/out~;
#X obj 3 4 cnv 15 301 42 empty empty dust~ 20 20 2 37 #e0e0e0 #000000 0;
#X obj 307 5 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1 0 0;
#X restore 3 4 graph;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 306 4 pd;
#X obj 346 12 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc 0;
#X obj 24 41 cnv 4 4 4 empty empty Random 0 28 2 18 #e0e0e0 #000000 0;
#X obj 459 12 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 479 12 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 465 27 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 93 41 cnv 4 4 4 empty empty impulses 0 28 2 18 #e0e0e0 #000000 0;
#X obj 4 538 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020 0;
#X obj 4 311 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 398 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 505 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000 0;
#X obj 99 407 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 98 320 cnv 17 3 71 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 169 407 signal;
#X text 177 514 1) float;
#X obj 215 192 nbx 8 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X text 299 193 density;
#X text 228 320 - density (rate) of random impulses;
#X text 238 513 - density (default 0);
#X obj 215 218 else/dust~ 1;
#X text 143 373 seed <float>;
#X text 40 237 see also:;
#X obj 37 259 else/dust2~;
#X obj 6 434 cnv 3 550 3 empty empty flags 8 12 0 13 #dcdcdc #000000 0;
#X text 95 444 -seed <float>: seed value (default: unique internal);
#X text 227 373 - a float sets seed \, no float sets a unique internal;
#N canvas 777 84 466 384 seed 0;
#X text 64 15 Pseudo random number generators aren't true random number generators. Instead \, an algorithm is used to provide a sequence of numbers that seems random. The same sequence can be reproduced if you set a "seed" value \, which can be any integer number., f 57;
#X text 64 129 You can set a seed with the '-seed' flag. If you don't supply it \, each object gets its own seed internal seed. If you send a 'seed' message without float \, the object also gets a unique seed value., f 57;
#X msg 377 276 seed;
#X msg 367 247 seed 123;
#X obj 47 294 else/trighold~;
#X obj 197 297 else/trighold~;
#X obj 47 338 else/numbox~ 6 12 100 #c0c0c4 #440008 10 0 0 0;
#X obj 197 338 else/numbox~ 6 12 100 #c0c0c4 #440008 10 0 0 0;
#X obj 367 309 s \$0-dust;
#X obj 47 230 r \$0-dust;
#X obj 197 230 r \$0-dust;
#X obj 47 260 else/dust~ -seed 123 1;
#X obj 197 260 else/dust~ -seed 123 1;
#X text 64 78 Seeds are kept locally \, which means that if two [dust~] objects are seeded the same they will have the same output. Conversely \, you can seed the same [dust~] object twice with the same seed to repeat the output., f 57;
#X connect 2 0 8 0;
#X connect 3 0 8 0;
#X connect 4 0 6 0;
#X connect 5 0 7 0;
#X connect 9 0 11 0;
#X connect 10 0 12 0;
#X connect 11 0 4 0;
#X connect 12 0 5 0;
#X restore 481 244 pd seed;
#X text 218 408 - random positive impulses;
#N canvas 531 148 607 338 multichannel 0;
#X obj 100 87 hsl 128 15 1 5000 1 0 empty empty empty -2 -8 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 97 116 nbx 8 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X text 181 117 density;
#X obj 97 241 else/out.mc~;
#X msg 161 161 ch 2;
#X msg 116 160 ch 1;
#X obj 315 228 else/out.mc~;
#X obj 315 145 else/sigs~ 1 11;
#X obj 97 207 else/dust~ -ch 2 50;
#X obj 315 190 else/dust~;
#X text 29 25 The -ch flag or message sets the number of output channels. This is only meaningful if you have a single channel input \, either as a float or a signal., f 42;
#X msg 454 134 1 11;
#X obj 455 190 else/dust~ -mc 5 50;
#X obj 455 228 else/out.mc~;
#X msg 471 162 50 1500;
#X text 316 28 If you have a multichannel connection or a list input in the inlet \, [dust~] generates a signal with the same number of channels and the 'ch' message or flag is meaningless. The multichannel input is the density for each output (you can also use the -mc flag to initialize)., f 44;
#X connect 0 0 1 0;
#X connect 1 0 8 0;
#X connect 4 0 8 0;
#X connect 5 0 8 0;
#X connect 7 0 9 0;
#X connect 8 0 3 0;
#X connect 9 0 6 0;
#X connect 11 0 12 0;
#X connect 12 0 13 0;
#X connect 14 0 12 0;
#X restore 433 270 pd multichannel;
#X text 107 460 -ch <float>: number of output channels (default 1);
#X text 156 338 ch <float>;
#X text 228 337 - set number of output channels;
#X obj 38 281 else/velvet~;
#X text 53 91 [dust~] is based on SuperCollider's "Dust" UGEN and outputs random impulse values (only positive values up to 1) at random times according to a density parameter. At high frequencies there's a good chance of consecutive non zero values. To the extreme \, it becomes white noise with a DC offset. It has support for multichannels., f 71;
#X text 113 475 -mc <list>: sets multichannel output with a list of densities, f 63;
#X text 132 321 list/signal(s);
#X text 114 354 set <float \, float> -;
#X text 240 354 <channel \, freq> set a single frequency channel, f 47;
#X connect 0 0 20 0;
#X connect 20 0 24 0;
#X connect 24 0 1 0;
