#N canvas 521 38 562 595 10;
#X obj 307 5 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc 0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 306 4 pd;
#X obj 346 12 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc 0;
#X obj 24 41 cnv 4 4 4 empty empty Loop 0 28 2 18 #e0e0e0 #000000 0;
#X obj 459 12 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 479 12 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 516 12 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 465 27 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 503 27 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 73 41 cnv 4 4 4 empty empty counter 0 28 2 18 #e0e0e0 #000000 0;
#X obj 4 4 cnv 15 301 42 empty empty loop 20 20 2 37 #e0e0e0 #000000 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1 0 0;
#X restore 3 4 graph;
#X obj 5 565 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020 0;
#X obj 7 249 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 6 417 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 7 499 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000 0;
#X obj 82 255 cnv 17 3 136 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 81 425 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 160 323 bang;
#X text 111 506 1) float;
#X obj 88 162 bng 17 250 50 0 empty empty empty 0 -6 0 8 #dcdcdc #000000 #000000;
#X text 111 532 2) float;
#X obj 115 224 print counter;
#X text 154 255 float;
#N canvas 858 150 405 417 pause/resume 0;
#X msg 47 257 pause;
#X obj 133 180 bng 20 250 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000;
#X text 30 23 [loop] iterates in a programming loop fashion. So \, once it starts \, it goes all the way to the end as fast as possible. In order to stop it \, you need to break the loop with some logic as below \, where we use [select] to pause [loop] when the counter reaches "105".;
#X text 31 102 Thus \, before breaking the loop \, it counts from 101 to 105 \, and you can then continue to output the remaining count (from 106 to 110) with the "resume" message.;
#X msg 152 218 continue;
#X obj 133 280 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X obj 133 312 print counter;
#X text 161 183 <= start from starting value;
#X text 214 217 <= continue from where it was paused, f 20;
#X text 119 360 This may be useful to stop the loop if a conditional was met., f 32;
#X obj 133 250 else/loop 100 111;
#X obj 47 227 select 105;
#X connect 0 0 10 0;
#X connect 1 0 10 0;
#X connect 4 0 10 0;
#X connect 5 0 6 0;
#X connect 10 0 11 0;
#X connect 10 0 5 0;
#X connect 11 0 0 0;
#X restore 455 200 pd pause/resume;
#X obj 255 158 bng 17 250 50 0 empty empty empty 0 -6 0 8 #dcdcdc #000000 #000000;
#X text 154 365 pause;
#X text 136 379 continue;
#X text 169 506 -;
#X text 191 323 - starts the loop, f 56;
#X text 191 365 - stops the loop, f 56;
#X text 191 379 - countinues the loop after being paused, f 56;
#X text 160 283 list;
#X msg 282 158 0 9;
#X obj 4 449 cnv 3 550 3 empty empty flags 8 12 0 13 #dcdcdc #000000 0;
#X text 133 454 -offset <float>;
#X msg 314 158 20 15;
#N canvas 766 265 489 314 array_sweep 0;
#X text 96 19 [loop] is very useful for sweeping through arrays.;
#X obj 54 53 bng 20 250 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000;
#X obj 231 99 cnv 15 198 138 empty empty empty 20 12 0 14 #e0e0e0 #404040 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X array array_\$0 100 float 1;
#A 0 -0.857145 -0.700001 -0.657143 -0.6 -0.585727 -0.585727 -0.585727 -0.580965 -0.576203 -0.571441 -0.547631 -0.523821 -0.500011 -0.457153 -0.300006 -0.171432 -0.0714296 5.96046e-07 0.0285727 0.0571448 0.0857168 0.104765 0.123813 0.142861 0.157147 0.171433 0.185719 0.200005 0.214291 0.228577 0.242863 0.250006 0.257149 0.263499 0.269848 0.276197 0.282547 0.288896 0.295245 0.301595 0.307944 0.314294 0.314294 0.314294 0.314294 0.314294 0.314294 0.291436 0.268578 0.245721 0.222863 0.200005 0.166671 0.133337 0.100003 0.0828596 0.0657164 0.0485731 0.0314299 0.0142866 0.0142866 0.0142866 0.0142866 0.0392872 0.0642878 0.0892884 0.114289 0.16429 0.214291 0.257149 0.300007 0.32858 0.357152 0.385724 0.402867 0.42001 0.437153 0.454297 0.47144 0.476202 0.480964 0.485726 0.489298 0.492869 0.496441 0.500012 0.500012 0.500012 0.500012 0.500012 0.500012 0.585715 0.642858 0.67143 0.685715 0.700001 0.728573 0.800002 0.971432 0.985717;
#X coords 0 1 99 -1 200 140 1 0 0;
#X restore 230 98 graph;
#X obj 54 136 else/loop;
#X text 434 225 0;
#X text 433 94 1;
#X obj 54 219 else/display;
#X obj 54 163 nbx 4 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X floatatom 54 110 5 0 0 0 - - - 0;
#X obj 54 252 print array_values;
#X obj 54 83 expr size("array_\$0");
#X obj 54 191 tabread array_\$0;
#X connect 1 0 11 0;
#X connect 4 0 8 0;
#X connect 7 0 10 0;
#X connect 8 0 12 0;
#X connect 9 0 4 0;
#X connect 11 0 9 0;
#X connect 12 0 7 0;
#X restore 461 221 pd array_sweep;
#X text 221 191 two values set start and end, f 14;
#X obj 115 165 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X text 169 532 - sets the end value (optional), f 62;
#X text 230 453 - sets offset value (default 0), f 37;
#X obj 115 194 else/loop 10;
#X obj 314 194 else/loop 1 10;
#X text 100 269 offset <float>;
#X text 191 336 - sets the increment value of the counter, f 56;
#X text 181 506 sets the number of iterations if only one argument is given \, or start value if there are more arguments (default 1);
#X text 169 547 - sets a counter step value (default 1), f 62;
#X text 112 337 step <float>;
#X text 111 547 3) float;
#X text 145 468 -step <float>;
#X text 230 467 - sets counter step value (default 1);
#X obj 184 165 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X obj 81 395 cnv 17 3 17 empty empty 1 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 154 396 float;
#X text 195 396 - sets number of iterations, f 32;
#X text 191 254 - sets number of iterations and starts the loop, f 58;
#X text 23 188 one value sets number of iterations, f 13;
#X text 163 482 -b <float>;
#X text 230 481 - sets to bang mode, f 37;
#X obj 314 223 print counter;
#X text 127 429 float/bang;
#X text 198 429 - counter output or bangs in bang mode;
#X text 77 87 [loop] is a loop counter \, but it can also loop bangs like [until] (using the -b flag). A float sets number of count iteration upwards. A list with two elements sets a start and end value (and allows counting upwards or downwards). A counter step value can be set with a third optional element in a list., f 68;
#X msg 359 158 -3.3 3.3 0.1;
#N canvas 419 128 865 461 args 0;
#X obj 49 178 bng 17 250 50 0 empty empty empty 0 -6 0 8 #dcdcdc #000000 #000000;
#X obj 79 290 print counter;
#X obj 79 261 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X obj 270 124 bng 17 250 50 0 empty empty empty 0 -6 0 8 #dcdcdc #000000 #000000;
#X obj 270 292 print counter;
#X msg 305 148 15 20;
#X msg 100 196 offset \$1;
#X obj 100 175 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X obj 79 153 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X msg 355 146 offset \$1;
#X obj 355 125 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X msg 299 123 -10 -5;
#X obj 270 261 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X text 23 65 You can also set the number of iterations with the 'set' message \, the right inlet and with the argument if you give it just one argument., f 65;
#X obj 270 231 else/loop 5 15 5;
#X obj 355 177 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X msg 355 198 step \$1;
#X obj 525 354 nbx 5 14 1 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X obj 438 351 bng 16 250 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000;
#X obj 438 415 print bang;
#X text 211 381 With the -b flag \, [loop] becomes a bang looper like [until], f 32;
#X obj 488 196 bng 17 250 50 0 empty empty empty 0 -6 0 8 #dcdcdc #000000 #000000;
#X obj 488 263 print counter;
#X msg 527 195 step \$1;
#X obj 527 172 nbx 3 14 0 10 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X text 23 25 When you give it a float \, the counter starts counting from 0 \, but you can set an offset value with the -offset flag or the "offset" message., f 65;
#X obj 694 190 bng 17 250 50 0 empty empty empty 0 -6 0 8 #dcdcdc #000000 #000000;
#X obj 694 251 print counter;
#X obj 694 222 else/loop 0.5 1.5 0.1;
#X text 452 32 If you give it two arguments \, you have a start and end value. The counter step is "1" by default but can be changed with the 3rd argument or the 'step' message., f 65;
#X obj 79 225 else/loop -offset -5 10;
#X obj 488 234 else/loop -step 3.3 11;
#X obj 438 383 else/loop -b 10;
#X msg 583 203 range 5 10;
#X text 453 74 Note the difference when we only have the number of iterations and no start/end values. Here we only define the number of iterations and the counter step. Note also that start \, end and step values can be floats \, not only integers - unlike the number of iterations \, which can only be an integer., f 65;
#X connect 0 0 30 0;
#X connect 2 0 1 0;
#X connect 3 0 14 0;
#X connect 5 0 14 0;
#X connect 6 0 30 0;
#X connect 7 0 6 0;
#X connect 8 0 30 0;
#X connect 9 0 14 0;
#X connect 10 0 9 0;
#X connect 11 0 14 0;
#X connect 12 0 4 0;
#X connect 14 0 12 0;
#X connect 15 0 16 0;
#X connect 16 0 14 0;
#X connect 17 0 32 1;
#X connect 18 0 32 0;
#X connect 21 0 31 0;
#X connect 23 0 31 0;
#X connect 24 0 23 0;
#X connect 26 0 28 0;
#X connect 28 0 27 0;
#X connect 30 0 2 0;
#X connect 31 0 22 0;
#X connect 32 0 19 0;
#X connect 33 0 31 0;
#X restore 502 180 pd args;
#X text 191 283 - sets range start/end and step (optionally) and run loop, f 58;
#X text 124 297 set <list>;
#X text 191 297 -;
#X text 203 297 a float sets number of iterations \, a list sets start/end and step (optionally), f 56;
#X text 191 268 - sets the starting value of the counter (for float), f 56;
#X text 112 351 range <list>;
#X text 191 350 - sets start/end values, f 56;
#X connect 20 0 42 0;
#X connect 25 0 43 0;
#X connect 33 0 43 0;
#X connect 36 0 43 0;
#X connect 39 0 42 0;
#X connect 42 0 22 0;
#X connect 43 0 60 0;
#X connect 52 0 42 1;
#X connect 64 0 43 0;
