#N canvas 508 87 560 429 10;
#X obj 1 282 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 1 326 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 1 361 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000 0;
#X obj 96 335 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 1 401 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020 0;
#N canvas 433 97 840 568 examples 1;
#X text 52 149 float example;
#X obj 55 171 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X msg 223 161 10.6;
#X msg 536 354 87 65 82;
#X obj 69 455 print;
#X msg 69 384 error;
#X text 259 160 (converted to int);
#X obj 247 444 else/display;
#X obj 536 440 else/display;
#X obj 223 199 else/format a-%d;
#X floatatom 247 380 5 0 0 0 - - - 0;
#X obj 209 380 bng 15 250 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000;
#X obj 69 416 else/format %d;
#X obj 538 184 else/display;
#X msg 549 118 B;
#X obj 538 151 else/format %s-%d.wav;
#X msg 538 91 A 1;
#X text 36 118 Examples with float input:;
#X text 30 288 A symbol may be received in any inlet that corresponds to a %s variable \, but if sent to another type \, a conversion error is given in Pd's window. A float will give an error only if no variables are given (which is probably an error since it makes the object useless).;
#X obj 661 97 nbx 4 14 0 100 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X msg 552 378 87 97 114;
#X msg 533 248 64 64;
#X text 63 502 In the example below we have a space escaped by a backslash \, so we format a symbol that contains a space.;
#X obj 247 413 else/format no\ variables;
#X obj 533 280 else/format %d\ =\ %c;
#X obj 536 409 else/format %c%c%c:;
#X obj 536 476 list append What is it good for?;
#X listbox 536 501 28 0 0 0 - - - 0;
#X text 28 33 The symbol argument in [format] is used to format a message. Inlets are created for any possible variables (like %d or %f) - note that symbol variables (%s) are initialized empty and numeric variables (all of the rest) are initialized as "0".;
#X obj 55 232 else/display -noflash;
#X obj 223 232 else/display -noflash;
#X obj 55 200 else/format %.2fdB;
#X listbox 533 307 20 0 0 0 - - - 0;
#X text 507 33 As usua in Pd \, a list input in the left inlet spreads the values to the following inlets., f 34;
#X connect 1 0 31 0;
#X connect 2 0 9 0;
#X connect 3 0 25 0;
#X connect 5 0 12 0;
#X connect 8 0 26 0;
#X connect 9 0 30 0;
#X connect 10 0 23 0;
#X connect 11 0 23 0;
#X connect 12 0 4 0;
#X connect 14 0 15 0;
#X connect 15 0 13 0;
#X connect 16 0 15 0;
#X connect 19 0 15 1;
#X connect 20 0 25 0;
#X connect 21 0 24 0;
#X connect 23 0 7 0;
#X connect 24 0 32 0;
#X connect 25 0 8 0;
#X connect 26 0 27 0;
#X connect 31 0 29 0;
#X restore 468 238 pd examples;
#X text 154 290 anything;
#X text 211 290 -;
#X text 214 370 -;
#X obj 96 289 cnv 17 3 28 empty empty 0-n 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 305 5 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc 0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 304 4 pd;
#X obj 344 12 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc 0;
#X obj 22 41 cnv 4 4 4 empty empty Format\ symbols 0 28 2 18 #e0e0e0 #000000 0;
#X obj 457 12 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 477 12 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 514 12 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 463 27 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 501 27 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 2 4 cnv 15 301 42 empty empty format 20 20 2 37 #e0e0e0 #000000 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1 0 0;
#X restore 2 4 graph;
#X obj 200 244 else/display;
#N canvas 328 190 521 598 variables 0;
#N canvas 643 80 374 280 %% 1;
#X obj 127 215 else/display;
#X obj 127 187 else/format %d%%;
#X msg 127 156 100;
#X text 54 45 %%: is converted to a literal "%". This prevents it from being interpreted as a pattern. In the example below \, we have '%d' which is an integer specifier as we'll see later. this specifier gets the value of the "100" float input. Next we have "%%" \, which becomes a literal "%" in the output., f 39;
#X connect 1 0 0 0;
#X connect 2 0 1 0;
#X restore 106 119 pd %%;
#X text 85 31 These are all the valid patterns available \, note they are in in the C-Style of the printf function \, but in a limited set. You can also use flags "+" and "#" \, plus a precision field. The modifiers "l" and "h" aren't supported. See examples below for more details., f 54;
#X text 154 119 - Literal "%" (symbol?);
#N canvas 687 194 436 478 %c 0;
#X obj 92 198 list fromsymbol;
#X floatatom 92 317 5 0 255 0 - - - 0;
#X symbolatom 92 151 5 0 0 0 - - - 0;
#X msg 109 232 64;
#X msg 119 282 123;
#X text 46 22 %c - character:;
#X text 158 151 type a character to convert to float, f 19;
#X text 133 151 <--;
#X text 155 281 <-- click (left curly);
#X text 145 231 <-- click - this is the '@' (at sign) character, f 23;
#X obj 92 354 else/format [%c];
#X text 44 56 This pattern allows you to convert from a float (actually integers from 0 to 255) to a character symbol. Note you can also perform the opposite conversion (from a character symbol to a float) by using the [list fromsymbol] object., f 49;
#X obj 92 396 else/display -noflash;
#X connect 0 0 1 0;
#X connect 1 0 10 0;
#X connect 2 0 0 0;
#X connect 3 0 1 0;
#X connect 4 0 1 0;
#X connect 10 0 12 0;
#X restore 106 149 pd %c;
#N canvas 787 150 493 569 %d/%i 0;
#X floatatom 244 398 9 0 0 0 - - - 0;
#X msg 244 183 127;
#X msg 258 215 -255;
#X msg 269 251 1;
#X msg 275 281 -1;
#X msg 194 219 12.9;
#X msg 294 352 -1e+07;
#X msg 286 318 2e+09;
#X text 54 64 Both '%d' and '%i' are the same. This pattern allows you to insert a signed (negative or positive) decimal integer into a symbol. Note that floats with a decimal point are truncated. Also note that numbers that are in scientific notation in Pd do not come out in scientific notation here. The integer range is from -2ˆ31 up to 2ˆ31., f 61;
#X text 56 35 %d or %i - 32 bits signed decimal integer:;
#X obj 94 446 else/format [%d];
#X obj 244 446 else/format [%i];
#X obj 94 494 else/display -noflash;
#X obj 244 494 else/display -noflash;
#X connect 0 0 10 0;
#X connect 0 0 11 0;
#X connect 1 0 0 0;
#X connect 2 0 0 0;
#X connect 3 0 0 0;
#X connect 4 0 0 0;
#X connect 5 0 0 0;
#X connect 6 0 0 0;
#X connect 7 0 0 0;
#X connect 10 0 12 0;
#X connect 11 0 13 0;
#X restore 88 177 pd %d/%i;
#N canvas 655 234 466 510 %e/%E 0;
#X floatatom 244 241 10 0 0 0 - - - 0;
#X msg 244 160 1.23456;
#X msg 216 132 2.345e-05;
#X msg 265 187 -18;
#X text 62 26 %e or %E - float numbers in scientific notation:;
#X text 80 394 Note that there's a default precision of 6 digits after the decimal point and before 'e'/'E'. You can change this precision as shown later. Also note that trailing zeros (zeros to the right of the decimal point) are always shown. This means you're always aware of the given precision., f 52;
#X text 61 53 This pattern allows you to format a float number with scientific notation into a symbol. The '%e' or '%E' pattern specify respectively whether the exponential character is lower (e) or upper (E) case., f 53;
#X msg 276 213 1;
#X obj 64 289 else/format [%e];
#X obj 244 289 else/format [%E];
#X obj 64 337 else/display -noflash;
#X obj 244 337 else/display -noflash;
#X connect 0 0 8 0;
#X connect 0 0 9 0;
#X connect 1 0 0 0;
#X connect 2 0 0 0;
#X connect 3 0 0 0;
#X connect 7 0 0 0;
#X connect 8 0 10 0;
#X connect 9 0 11 0;
#X restore 88 205 pd %e/%E;
#X text 153 148 - character;
#X text 153 176 - signed decimal integer;
#X text 154 232 - decimal floating point;
#N canvas 772 170 362 468 %f 0;
#X floatatom 118 318 8 0 0 0 - - - 0;
#X msg 118 189 1.234;
#X msg 132 221 -18;
#X msg 87 157 2.3e-05;
#X msg 143 256 0.997;
#X text 48 27 %f - decimal floating point:;
#X text 46 61 This pattern allows you to format a float into a symbol without scientific notation. Note that there's a default precision of 6 digits after the decimal point. You can change this precision as shown later. As in 'e'/'E' \, trailing zeros are always shown., f 43;
#X msg 151 285 1;
#X obj 118 400 else/display -noflash;
#X obj 118 355 else/format [%f];
#X connect 0 0 9 0;
#X connect 1 0 0 0;
#X connect 2 0 0 0;
#X connect 3 0 0 0;
#X connect 4 0 0 0;
#X connect 7 0 0 0;
#X connect 9 0 8 0;
#X restore 106 233 pd %f;
#N canvas 784 131 508 599 %g/%G 0;
#X floatatom 258 420 12 0 0 0 - - - 0;
#X msg 257 273 1.23456;
#X msg 278 305 2.345e-05;
#X msg 300 334 1.1e+08;
#X msg 170 245 -1800;
#X msg 132 245 179;
#X msg 303 373 0.999999;
#X text 38 24 %g or %G - floats with or without scientific notation:, f 68;
#X msg 221 245 0.000123456;
#X obj 258 516 else/display -noflash;
#X obj 108 516 else/display -noflash;
#X obj 108 468 else/format [%g];
#X obj 258 468 else/format [%G];
#X text 34 175 The '%g' or '%G' pattern specify respectively whether the exponential character is lower (e) or upper (E) case., f 69;
#X text 34 59 Unlike %f' and '%e'/'%E' \, this pattern doesn't show trailing zeros. Therefore \, values without significant digits after the decimal point come out looking like integers (as there's not dot at the end). The scientific notation is used in negative form if the exponent value is lower than '-4'. For the positive form \, it's used if the exponent is equal to or higher than the precision value (again this is '6' by default and can be changed as shown later). Note that this is the pattern used by Pd to display numbers in comments \, message boxes and also GUI boxes and iemgui's [nbx] \, with the same default precision of 6 significant digits., f 69;
#X connect 0 0 11 0;
#X connect 0 0 12 0;
#X connect 1 0 0 0;
#X connect 2 0 0 0;
#X connect 3 0 0 0;
#X connect 4 0 0 0;
#X connect 5 0 0 0;
#X connect 6 0 0 0;
#X connect 8 0 0 0;
#X connect 11 0 10 0;
#X connect 12 0 9 0;
#X restore 88 261 pd %g/%G;
#X text 154 204 - decimal floating point in scientific notation;
#N canvas 836 149 425 477 %o 0;
#X floatatom 120 307 9 0 0 0 - - - 0;
#X msg 131 160 1;
#X msg 142 190 -1;
#X msg 39 202 1.9;
#X msg 84 124 9;
#X msg 120 124 16;
#X msg 165 261 1e+12;
#X msg 155 225 1e+09;
#X text 52 27 %o - unsigned octal:;
#X obj 120 403 else/display -noflash;
#X obj 120 355 else/format [%o];
#X text 53 59 This pattern allows you to insert an unsigned octal integer into a symbol. Floats are truncated., f 37;
#X connect 0 0 10 0;
#X connect 1 0 0 0;
#X connect 2 0 0 0;
#X connect 3 0 0 0;
#X connect 4 0 0 0;
#X connect 5 0 0 0;
#X connect 6 0 0 0;
#X connect 7 0 0 0;
#X connect 10 0 9 0;
#X restore 106 289 pd %o;
#X text 152 288 - unsigned octal;
#N canvas 788 215 458 430 %s 0;
#X symbolatom 63 140 7 0 0 0 - - - 0;
#X floatatom 101 173 10 0 0 0 - - - 0;
#X msg 118 205 symbol dog;
#X msg 140 270 -1;
#X msg 183 270 1.9;
#X msg 183 300 1e-07;
#X text 62 28 %s - symbol string:;
#X text 182 172 <-- send it a float;
#X text 120 140 <-- send it a symbol;
#X text 59 62 This pattern allows you to insert a symbol \, but note it also works for float messages. You can set a precision as shown later \, but there's no default precision., f 49;
#X obj 101 383 else/display -noflash;
#X obj 101 335 else/format [%s];
#X msg 130 234 cat;
#X text 160 234 also works without a symbol selector;
#X connect 0 0 11 0;
#X connect 1 0 11 0;
#X connect 2 0 11 0;
#X connect 3 0 11 0;
#X connect 4 0 11 0;
#X connect 5 0 11 0;
#X connect 11 0 10 0;
#X connect 12 0 11 0;
#X restore 106 317 pd %s;
#X text 152 344 - signed decimal integer;
#N canvas 784 259 432 475 %u 0;
#X floatatom 161 324 9 0 0 0 - - - 0;
#X msg 161 139 127;
#X msg 175 171 -255;
#X msg 186 207 1;
#X msg 192 237 -1;
#X msg 111 175 12.9;
#X text 45 25 %u - unsigned decimal integer:;
#X msg 203 274 1e+12;
#X obj 161 402 else/display -noflash;
#X obj 161 363 else/format [%u];
#X text 43 60 This pattern is the same as "%d" or "%i" \, but it is unsigned (only positive) \, hence it allows you to insert a decimal integer into a symbol. Floats are truncated to integers., f 51;
#X connect 0 0 9 0;
#X connect 1 0 0 0;
#X connect 2 0 0 0;
#X connect 3 0 0 0;
#X connect 4 0 0 0;
#X connect 5 0 0 0;
#X connect 7 0 0 0;
#X connect 9 0 8 0;
#X restore 106 345 pd %u;
#X text 153 372 - unsigned hexadecimal;
#N canvas 781 226 480 488 %x/%X 0;
#X floatatom 233 308 9 0 0 0 - - - 0;
#X msg 233 123 127;
#X msg 258 191 1;
#X msg 264 221 -1;
#X msg 275 258 1e+09;
#X msg 247 155 255;
#X msg 183 159 9.9;
#X text 70 11 %x or %X - unsigned hexadecimal:;
#X obj 83 404 else/display -noflash;
#X obj 233 404 else/display -noflash;
#X obj 83 356 else/format [%x];
#X obj 233 356 else/format [%X];
#X text 61 46 This pattern allows you to insert a signed (only positive) hexadecimal integer into a symbol. Floats are truncated. The '%x' or '%X' pattern specify respectively whether the the characters are lower or upper case., f 58;
#X connect 0 0 10 0;
#X connect 0 0 11 0;
#X connect 1 0 0 0;
#X connect 2 0 0 0;
#X connect 3 0 0 0;
#X connect 4 0 0 0;
#X connect 5 0 0 0;
#X connect 6 0 0 0;
#X connect 10 0 8 0;
#X connect 11 0 9 0;
#X restore 88 373 pd %x/%X;
#X text 153 316 - string;
#X text 154 260 - floats with or without scientific notation;
#X text 161 475 flags:;
#N canvas 265 81 794 593 + 0;
#X floatatom 150 188 11 0 0 0 - - - 0;
#X msg 109 105 127;
#X msg 150 105 -255;
#X msg 168 137 1e+06;
#X msg 220 137 -1e+07;
#X floatatom 167 441 10 0 0 0 - - - 0;
#X msg 169 336 1.23456;
#X msg 94 336 2.345e-05;
#X msg 196 401 -18;
#X msg 183 368 1.999e+07;
#X floatatom 516 103 8 0 0 0 - - - 0;
#X msg 530 61 -18;
#X msg 450 30 2.3e-05;
#X msg 516 29 257;
#X floatatom 540 424 10 0 0 0 - - - 0;
#X msg 568 306 1.23456;
#X msg 585 377 0.99999;
#X msg 540 278 2.345e-05;
#X msg 582 338 1.1e+08;
#X msg 514 247 -1800;
#X msg 476 247 179;
#X text 65 38 The "+" flag prepends a plus sign for positive signed numeric types (%d/%i/%e/%E/%f/%g/%G):, f 47;
#X obj 150 225 else/format [%+d];
#X obj 150 263 else/display -noflash;
#X obj 167 476 else/format [%+e];
#X obj 167 524 else/display -noflash;
#X obj 540 511 else/display -noflash;
#X obj 516 191 else/display -noflash;
#X obj 516 143 else/format [%+f];
#X obj 540 463 else/format [%+G];
#X connect 0 0 22 0;
#X connect 1 0 0 0;
#X connect 2 0 0 0;
#X connect 3 0 0 0;
#X connect 4 0 0 0;
#X connect 5 0 24 0;
#X connect 6 0 5 0;
#X connect 7 0 5 0;
#X connect 8 0 5 0;
#X connect 9 0 5 0;
#X connect 10 0 28 0;
#X connect 11 0 10 0;
#X connect 12 0 10 0;
#X connect 13 0 10 0;
#X connect 14 0 29 0;
#X connect 15 0 14 0;
#X connect 16 0 14 0;
#X connect 17 0 14 0;
#X connect 18 0 14 0;
#X connect 19 0 14 0;
#X connect 20 0 14 0;
#X connect 22 0 23 0;
#X connect 24 0 25 0;
#X connect 28 0 27 0;
#X connect 29 0 26 0;
#X restore 214 476 pd +;
#N canvas 537 79 720 485 # 0;
#X floatatom 148 115 7 0 0 0 - - - 0;
#X msg 148 73 1;
#X msg 80 73 9;
#X msg 116 73 16;
#X msg 183 73 1e+09;
#X floatatom 196 326 9 0 0 0 - - - 0;
#X msg 196 284 1;
#X msg 128 284 9;
#X msg 164 284 16;
#X msg 231 284 1e+09;
#X text 25 22 The '#' flag presents an alternate form of some numeric types. For "%o" \, the number is preceded by a "0".;
#X floatatom 421 227 10 0 0 0 - - - 0;
#X msg 421 180 -1800;
#X msg 383 180 179;
#X msg 474 181 1e+08;
#X text 44 222 For "%x" and "%X" \, the number is preceded by "0x" (if %x) or "0X" (if %X)., f 43;
#X obj 148 146 else/format [%#o];
#X obj 421 353 else/display -noflash;
#X obj 551 313 else/display -noflash;
#X obj 196 399 else/display -noflash;
#X obj 44 399 else/display -noflash;
#X obj 148 178 else/display -noflash;
#X obj 44 361 else/format [%#x];
#X obj 196 361 else/format [%#X];
#X obj 551 285 else/format [%G];
#X obj 421 305 else/format [%+#g];
#X text 374 103 For %g and %G \, the decimal point and trailing zeroes are not removed. Note you can combine this flag with the "+" flag if you will., f 39;
#X connect 0 0 16 0;
#X connect 1 0 0 0;
#X connect 2 0 0 0;
#X connect 3 0 0 0;
#X connect 4 0 0 0;
#X connect 5 0 22 0;
#X connect 5 0 23 0;
#X connect 6 0 5 0;
#X connect 7 0 5 0;
#X connect 8 0 5 0;
#X connect 9 0 5 0;
#X connect 11 0 24 0;
#X connect 11 0 25 0;
#X connect 12 0 11 0;
#X connect 13 0 11 0;
#X connect 14 0 11 0;
#X connect 16 0 21 0;
#X connect 22 0 20 0;
#X connect 23 0 19 0;
#X connect 24 0 18 0;
#X connect 25 0 17 0;
#X restore 259 476 pd #;
#X text 161 505 width:;
#N canvas 499 154 928 523 width 0;
#X floatatom 102 171 9 0 0 0 - - - 0;
#X msg 102 114 1;
#X msg 138 114 -1000;
#X msg 64 114 10;
#X msg 111 352 1;
#X symbolatom 282 171 10 0 0 0 - - - 0;
#X msg 295 143 symbol abcde;
#X msg 261 92 symbol a;
#X msg 282 117 symbol abc;
#X msg 150 139 -1e+06;
#X msg 73 352 31;
#X msg 151 352 1e+06;
#X text 52 282 The width field takes an optional preceding '0' flag that fills the extra characters with zeroes instead of spaces.;
#X floatatom 539 176 11 0 0 0 - - - 0;
#X msg 539 119 1;
#X msg 501 119 10;
#X msg 587 144 -1e+06;
#X floatatom 707 175 10 0 0 0 - - - 0;
#X msg 707 118 1;
#X msg 743 118 -1000;
#X msg 669 118 10;
#X msg 755 143 -1e+06;
#X msg 556 315 1;
#X msg 604 340 -1e+06;
#X msg 724 314 1;
#X msg 772 339 -1e+06;
#X text 498 63 You can combine the width field with the preceding +/# flags where pertinent., f 40;
#X msg 592 315 100;
#X msg 760 314 100;
#X msg 686 314 31;
#X msg 518 315 31;
#X msg 575 119 -100;
#X floatatom 111 387 9 0 0 0 - - - 0;
#X floatatom 556 387 9 0 0 0 - - - 0;
#X floatatom 724 387 9 0 0 0 - - - 0;
#X obj 111 464 else/display -noflash;
#X obj 556 464 else/display -noflash;
#X obj 724 464 else/display -noflash;
#X obj 102 235 else/display -noflash;
#X obj 282 235 else/display -noflash;
#X obj 539 240 else/display -noflash;
#X obj 707 239 else/display -noflash;
#X obj 102 202 else/format [%5d];
#X obj 282 203 else/format [%5s];
#X obj 707 207 else/format [%+05d];
#X obj 724 426 else/format [%#08X];
#X text 24 18 The width field takes an integer that sets the number of minimum characters and adds spaces to the left to fill them. This works for all types but the floating point numbers '%f' and '%e'/'%E' ('%g'/'%G' works)., f 62;
#X obj 111 426 else/format [%05x];
#X symbolatom 287 417 10 0 0 0 - - - 0;
#X msg 300 389 symbol abcde;
#X msg 266 338 symbol a;
#X msg 287 363 symbol abc;
#X obj 287 481 else/display -noflash;
#X obj 287 449 else/format [%05s];
#X obj 539 208 else/format [%+5g];
#X obj 556 426 else/format [%#5x];
#X connect 0 0 42 0;
#X connect 1 0 0 0;
#X connect 2 0 0 0;
#X connect 3 0 0 0;
#X connect 4 0 32 0;
#X connect 5 0 43 0;
#X connect 6 0 5 0;
#X connect 7 0 5 0;
#X connect 8 0 5 0;
#X connect 9 0 0 0;
#X connect 10 0 32 0;
#X connect 11 0 32 0;
#X connect 13 0 54 0;
#X connect 14 0 13 0;
#X connect 15 0 13 0;
#X connect 16 0 13 0;
#X connect 17 0 44 0;
#X connect 18 0 17 0;
#X connect 19 0 17 0;
#X connect 20 0 17 0;
#X connect 21 0 17 0;
#X connect 22 0 33 0;
#X connect 23 0 33 0;
#X connect 24 0 34 0;
#X connect 25 0 34 0;
#X connect 27 0 33 0;
#X connect 28 0 34 0;
#X connect 29 0 34 0;
#X connect 30 0 33 0;
#X connect 31 0 13 0;
#X connect 32 0 47 0;
#X connect 33 0 55 0;
#X connect 34 0 45 0;
#X connect 42 0 38 0;
#X connect 43 0 39 0;
#X connect 44 0 41 0;
#X connect 45 0 37 0;
#X connect 47 0 35 0;
#X connect 48 0 53 0;
#X connect 49 0 48 0;
#X connect 50 0 48 0;
#X connect 51 0 48 0;
#X connect 53 0 52 0;
#X connect 54 0 40 0;
#X connect 55 0 36 0;
#X restore 214 506 pd width;
#X text 133 535 precision:;
#N canvas 524 351 448 268 precision 0;
#N canvas 842 141 470 564 strings 0;
#X symbolatom 219 418 10 0 0 0 - - - 0;
#X symbolatom 193 154 10 0 0 0 - - - 0;
#X msg 193 115 symbol abcde;
#X msg 89 115 symbol abcd;
#X text 61 260 In this case \, the width field can be preceded to set a minimum of characters filled with spaces., f 48;
#X msg 141 316 symbol ab;
#X msg 219 316 symbol abc;
#X msg 246 383 symbol abcde;
#X msg 234 350 symbol abcd;
#X text 40 28 For symbol srtrings (%s) \, the precision sets a maximum character limit. Below \, we have a maximum of 4 characters \, hence \, the symbol "abcde" gets truncated. There's no default precision by the way., f 58;
#X obj 193 223 else/display -noflash;
#X obj 219 496 else/display -noflash;
#X obj 193 189 else/format [%.4s];
#X obj 219 458 else/format [%03.4s];
#X connect 0 0 13 0;
#X connect 1 0 12 0;
#X connect 2 0 1 0;
#X connect 3 0 1 0;
#X connect 5 0 0 0;
#X connect 6 0 0 0;
#X connect 7 0 0 0;
#X connect 8 0 0 0;
#X connect 12 0 10 0;
#X connect 13 0 11 0;
#X restore 159 133 pd strings;
#N canvas 793 252 531 363 integers 0;
#X floatatom 260 190 5 0 0 0 - - - 0;
#X msg 260 157 -3;
#X msg 298 158 3;
#X text 51 25 For integer types ('%d'/'%i'/'%o'/'%u'/'%x'/'%X'/'%p') \, the precision field does not set a maximum number of characters. Instead \, it sets a fixed number of digits and adds zeroes to the left as a fill. This is slightly different than setting a width field with a '0' flag. The difference is only observed for numbers of different signs as below (and without the "+" flag). Note how the width field will suppress a zero to include a "-" character., f 61;
#X obj 99 278 else/display -noflash;
#X obj 260 278 else/display -noflash;
#X obj 99 234 else/format [%.4d];
#X obj 260 234 else/format [%04d];
#X connect 0 0 6 0;
#X connect 0 0 7 0;
#X connect 1 0 0 0;
#X connect 2 0 0 0;
#X connect 6 0 4 0;
#X connect 7 0 5 0;
#X restore 159 167 pd integers;
#N canvas 662 255 678 644 floats 0;
#X floatatom 274 256 13 0 0 0 - - - 0;
#X msg 276 152 1.23456;
#X msg 248 118 2.345e-05;
#X msg 303 219 -18;
#X msg 290 184 1.999e+07;
#X floatatom 93 256 14 0 0 0 - - - 0;
#X msg 93 152 1.234;
#X floatatom 454 256 13 0 0 0 - - - 0;
#X msg 454 152 1.234;
#X msg 468 184 -1800;
#X msg 479 219 0.000123456;
#X msg 118 219 0.000123456;
#X msg 107 184 -1800;
#X msg 62 118 2.345e-05;
#X msg 423 118 0.0001234;
#X obj 275 451 else/display -noflash;
#X obj 93 451 else/display -noflash;
#X obj 454 451 else/display -noflash;
#X obj 291 353 else/display -noflash;
#X obj 113 353 else/display -noflash;
#X obj 494 353 else/display -noflash;
#X obj 113 305 else/format [%.2f];
#X obj 93 403 else/format [%f];
#X obj 275 403 else/format [%e];
#X obj 454 403 else/format [%g];
#X obj 494 305 else/format [%.3g];
#X obj 291 305 else/format [%.2E];
#X text 61 16 In the case of '%f' \, the precision field sets the maximum number of digits to the right of the decimal point. Note that there's a default of 6 digits. Also note that this affects the resolution and can cause the number to be rounded., f 78;
#X text 112 508 For '%g'/'%G' \, the precision field sets the maximum number of significant digits \, not counting leading zeros. Note that there's a default of 6 digits. Also note that this affects the resolution and can cause the number to be rounded. This setting also specifies how it chooses to show the scientific notation when positive \, as the exponent value needs to be equal to or higher than the precision number (for negative values the scientific notation is always chosen if the exponent is less the '-4')., f 76;
#X connect 0 0 23 0;
#X connect 0 0 26 0;
#X connect 1 0 0 0;
#X connect 2 0 0 0;
#X connect 3 0 0 0;
#X connect 4 0 0 0;
#X connect 5 0 21 0;
#X connect 5 0 22 0;
#X connect 6 0 5 0;
#X connect 7 0 24 0;
#X connect 7 0 25 0;
#X connect 8 0 7 0;
#X connect 9 0 7 0;
#X connect 10 0 7 0;
#X connect 11 0 5 0;
#X connect 12 0 5 0;
#X connect 13 0 5 0;
#X connect 14 0 7 0;
#X connect 21 0 19 0;
#X connect 22 0 16 0;
#X connect 23 0 15 0;
#X connect 24 0 17 0;
#X connect 25 0 20 0;
#X connect 26 0 18 0;
#X restore 159 201 pd floats;
#X text 41 23 The precision field behaves differently according to the type (strings \, integers of floats). The syntax of this field is specified by a "." and is followed by the precision number. See subpatches below for the examples., f 51;
#X restore 214 536 pd precision;
#X text 61 424 The types can be preceded by optional fields \, which can be combined and included in the order below:;
#X restore 462 216 pd variables;
#X msg 212 187 file;
#X obj 323 189 nbx 4 14 0 100 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X text 30 192 see also:;
#X obj 29 241 else/unite;
#X text 223 290 float/symbol atoms to format variables \, or a bang to define an empty string, f 51;
#X text 226 370 atoms that may contain '%' variables (obrigatory \, no default), f 36;
#X msg 200 163 symbol song;
#X obj 200 214 else/format %s-%d.wav;
#X msg 131 163 list a 10;
#X obj 28 216 makefilename;
#X text 164 370 1) list;
#X text 96 94 [format] formats symbols similarly to [makefilename] \, but it accepts more than one '%' variable \, where each corresponds to an inlet., f 53;
#X text 167 335 symbol;
#X text 213 336 - the formatted symbol;
#X connect 23 0 30 0;
#X connect 24 0 30 1;
#X connect 29 0 30 0;
#X connect 30 0 21 0;
#X connect 31 0 30 0;
