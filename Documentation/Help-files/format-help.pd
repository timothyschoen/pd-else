#N canvas 475 79 560 429 10;
#X obj 1 282 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 1 326 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 1 361 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000 0;
#X obj 96 335 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 1 401 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020 0;
#N canvas 576 150 805 738 examples 0;
#X text 52 149 float example;
#X obj 55 171 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X msg 223 161 10.6;
#X msg 536 354 87 65 82;
#X obj 69 455 print;
#X msg 69 384 error;
#X text 259 160 (converted to int);
#X obj 247 444 else/display;
#X obj 536 440 else/display;
#X obj 223 199 else/format a-%d;
#X floatatom 247 374 5 0 0 0 - - - 16;
#X obj 209 374 bng 20 250 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000;
#X obj 69 416 else/format %d;
#X obj 538 184 else/display;
#X msg 549 118 B;
#X obj 538 151 else/format %s-%d.wav;
#X msg 538 91 A 1;
#X text 36 118 Examples with float input:;
#X text 30 288 A symbol may be received in any inlet that corresponds to a %s variable \, but if sent to another type \, a conversion error is given in Pd's window. A float will give an error only if no variables are given (which is probably an error since it makes the object useless).;
#X obj 661 97 nbx 4 14 0 100 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X msg 552 378 87 97 114;
#X msg 533 248 64 64;
#X text 63 502 In the example below we have a space escaped by a backslash \, so we format a symbol that contains a space.;
#X obj 247 413 else/format no\ variables;
#X obj 533 280 else/format %d\ =\ %c;
#X obj 536 409 else/format %c%c%c:;
#X obj 536 476 list append What is it good for?;
#X listbox 536 501 28 0 0 0 - - - 12;
#X text 28 33 The symbol argument in [format] is used to format a message. Inlets are created for any possible variables (like %d or %f) - note that symbol variables (%s) are initialized empty and numeric variables (all of the rest) are initialized as "0".;
#X obj 55 232 else/display -noflash;
#X obj 223 232 else/display -noflash;
#X obj 55 200 else/format %.2fdB;
#X text 507 33 As usua in Pd \, a list input in the left inlet spreads the values to the following inlets., f 34;
#X obj 193 570 bng 19 250 50 0 empty empty empty 0 -8 0 10 #dfdfdf #000000 #000000;
#X obj 193 600 expr pow(2 \, 32) - 2;
#X obj 193 629 else/format %u;
#X text 298 659 The correct exact result ('4294967294') is only possible in Pd compiled with double precision (aka Pd64), f 56;
#X msg 537 548 symbol a\ b;
#X obj 537 574 else/format %s\ c!;
#X symbolatom 193 663 12 0 0 0 - - - 12;
#X symbolatom 537 606 12 0 0 0 - - - 12;
#X symbolatom 533 307 12 0 0 0 - - - 12;
#X connect 1 0 31 0;
#X connect 2 0 9 0;
#X connect 3 0 25 0;
#X connect 5 0 12 0;
#X connect 8 0 26 0;
#X connect 9 0 30 0;
#X connect 10 0 23 0;
#X connect 11 0 23 0;
#X connect 12 0 4 0;
#X connect 14 0 15 0;
#X connect 15 0 13 0;
#X connect 16 0 15 0;
#X connect 19 0 15 1;
#X connect 20 0 25 0;
#X connect 21 0 24 0;
#X connect 23 0 7 0;
#X connect 24 0 41 0;
#X connect 25 0 8 0;
#X connect 26 0 27 0;
#X connect 31 0 29 0;
#X connect 33 0 34 0;
#X connect 34 0 35 0;
#X connect 35 0 39 0;
#X connect 37 0 38 0;
#X connect 38 0 40 0;
#X restore 468 238 pd examples;
#X text 154 290 anything;
#X text 211 290 -;
#X text 214 370 -;
#X obj 96 289 cnv 17 3 28 empty empty 0-n 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 305 5 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc 0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 304 4 pd;
#X obj 344 12 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc 0;
#X obj 22 41 cnv 4 4 4 empty empty Format\ symbols 0 28 2 18 #e0e0e0 #000000 0;
#X obj 457 12 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 477 12 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 514 12 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 463 27 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 501 27 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 2 4 cnv 15 301 42 empty empty format 20 20 2 37 #e0e0e0 #000000 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1 0 0;
#X restore 2 4 graph;
#X obj 200 244 else/display;
#N canvas 767 130 528 679 variables 0;
#N canvas 643 80 374 280 %% 0;
#X obj 127 215 else/display;
#X obj 127 187 else/format %d%%;
#X msg 127 156 100;
#X text 54 45 %%: is converted to a literal "%". This prevents it from being interpreted as a pattern. In the example below \, we have '%d' which is an integer specifier as we'll see later. this specifier gets the value of the "100" float input. Next we have "%%" \, which becomes a literal "%" in the output., f 39;
#X connect 1 0 0 0;
#X connect 2 0 1 0;
#X restore 111 112 pd %%;
#X text 159 112 - Literal "%" (symbol?);
#N canvas 732 231 414 489 %c 0;
#X obj 100 249 list fromsymbol;
#X floatatom 100 368 5 0 0 0 - - - 0;
#X symbolatom 100 202 5 0 0 0 - - - 0;
#X symbolatom 100 443 7 0 0 0 - - - 0;
#X msg 117 283 64;
#X msg 127 333 123;
#X text 35 19 %c - character:;
#X text 166 202 type a character to convert to float, f 19;
#X text 141 202 <--;
#X text 33 131 By the way \, you can also perform the opposite conversion (from a character symbol to a float) by using the [list fromsymbol] object., f 48;
#X text 153 282 <-- this is the '@' (at sign) character, f 20;
#X text 163 332 <-- (left curly);
#X text 33 53 This format specifier allows you to convert from a float (actually integers from 0 to 255) to a character symbol. A symbol input is converted to '0' (and this is also true for any other specifier besides '%s' and '%p')., f 48;
#X obj 100 405 else/format [%c];
#X connect 0 0 1 0;
#X connect 1 0 13 0;
#X connect 2 0 0 0;
#X connect 4 0 1 0;
#X connect 5 0 1 0;
#X connect 13 0 3 0;
#X restore 111 172 pd %c;
#N canvas 787 150 532 561 %d/%i 0;
#X floatatom 244 398 10 0 0 0 - - - 0;
#X symbolatom 94 494 15 0 0 0 - - - 0;
#X text 56 35 %d or %i - signed decimal integer:;
#X symbolatom 244 494 15 0 0 0 - - - 0;
#X msg 244 183 127;
#X msg 258 215 -255;
#X msg 269 251 1;
#X msg 275 281 -1;
#X msg 194 219 12.9;
#X msg 294 352 -1e+07;
#X msg 286 318 2e+09;
#X text 54 64 Both '%d' and '%i' are the same. This format specifier allows you to insert a signed (negative or positive) decimal integer into a symbol. Note that floats with a decimal point are truncated., f 61;
#X obj 94 446 else/format [%d];
#X obj 244 446 else/format [%i];
#X connect 0 0 12 0;
#X connect 0 0 13 0;
#X connect 4 0 0 0;
#X connect 5 0 0 0;
#X connect 6 0 0 0;
#X connect 7 0 0 0;
#X connect 8 0 0 0;
#X connect 9 0 0 0;
#X connect 10 0 0 0;
#X connect 12 0 1 0;
#X connect 13 0 3 0;
#X restore 93 200 pd %d/%i;
#N canvas 751 239 511 507 %e/%E 0;
#X floatatom 256 244 10 0 0 0 - - - 0;
#X symbolatom 106 340 18 0 0 0 - - - 0;
#X symbolatom 256 340 18 0 0 0 - - - 0;
#X msg 256 169 1.23456;
#X msg 228 141 2.345e-05;
#X msg 285 204 -18;
#X text 62 26 %e or %E - float numbers in scientific notation:;
#X text 65 386 Note that there's a default precision of 6 digits after the decimal point and before 'e'/'E'. You can change this precision as shown later. Also note that trailing zeros (zeros to the right of the decimal point) are always shown. This means you're always aware of the given precision., f 52;
#X msg 187 141 1;
#X obj 106 292 else/format [%e];
#X obj 256 292 else/format [%E];
#X text 61 48 This format specifier allows you to insert a float number with scientific notation into a symbol. The '%e' or '%E' pattern specify respectively whether the exponential character is lower (e) or upper (E) case. Also \, it prints 'NAN' and 'INF' in all CAPS for %A \, while '%a' uses lowercase., f 53;
#X connect 0 0 9 0;
#X connect 0 0 10 0;
#X connect 3 0 0 0;
#X connect 4 0 0 0;
#X connect 5 0 0 0;
#X connect 8 0 0 0;
#X connect 9 0 1 0;
#X connect 10 0 2 0;
#X restore 93 228 pd %e/%E;
#X text 158 171 - character;
#X text 158 199 - signed decimal integer;
#X text 159 255 - decimal floating point;
#N canvas 784 131 579 621 %g/%G 0;
#X floatatom 258 450 12 0 0 0 - - - 0;
#X symbolatom 258 546 18 0 0 0 - - - 0;
#X msg 257 303 1.23456;
#X msg 278 335 2.345e-05;
#X msg 300 364 1.1e+08;
#X msg 170 275 -1800;
#X msg 132 275 179;
#X msg 303 403 0.999999;
#X text 38 24 %g or %G - floats with or without scientific notation:, f 68;
#X symbolatom 108 546 18 0 0 0 - - - 0;
#X msg 221 275 0.000123456;
#X obj 108 498 else/format [%g];
#X obj 258 498 else/format [%G];
#X text 34 188 Note that this is the format pattern used by Pd to display numbers in comments \, message boxes and also GUI boxes and iemgui's [nbx] (with the same default precision of 6 significant digits). Also \, it prints 'NAN' and 'INF' in all CAPS for %A \, while '%a' uses lowercase., f 69;
#X text 34 59 Unlike %f' and '%e'/'%E' \, this format specifier doesn't show trailing zeros. Therefore \, values without significant digits after the decimal point come out looking like integers (as there's not dot at the end). The scientific notation is used in negative form if the exponent value is lower than '-4'. For the positive form \, it's used only if the exponent is equal to or higher than the precision value (again this is '6' by default and can be changed later). The '%g' or '%G' pattern specify respectively whether the exponential character is lower (e) or upper (E) case. Also \, it prints 'NAN' and 'INF' in all CAPS for %A \, while '%a' uses lowercase., f 69;
#X connect 0 0 11 0;
#X connect 0 0 12 0;
#X connect 2 0 0 0;
#X connect 3 0 0 0;
#X connect 4 0 0 0;
#X connect 5 0 0 0;
#X connect 6 0 0 0;
#X connect 7 0 0 0;
#X connect 10 0 0 0;
#X connect 11 0 9 0;
#X connect 12 0 1 0;
#X restore 93 284 pd %g/%G;
#X text 159 227 - decimal floating point in scientific notation;
#N canvas 836 149 414 466 %o 0;
#X floatatom 136 301 8 0 0 0 - - - 0;
#X symbolatom 136 397 14 0 0 0 - - - 0;
#X msg 147 174 1;
#X msg 55 216 1.9;
#X msg 100 138 9;
#X msg 136 138 16;
#X msg 174 252 1e+12;
#X msg 164 216 1e+09;
#X text 52 27 %o - unsigned octal:;
#X text 53 59 This format specifier allows you to insert an unsigned (only positive) octal integer into a symbol. Floats are truncated., f 42;
#X obj 136 349 else/format [%o];
#X connect 0 0 10 0;
#X connect 2 0 0 0;
#X connect 3 0 0 0;
#X connect 4 0 0 0;
#X connect 5 0 0 0;
#X connect 6 0 0 0;
#X connect 7 0 0 0;
#X connect 10 0 1 0;
#X restore 111 312 pd %o;
#X text 157 311 - unsigned octal;
#N canvas 788 215 458 430 %s 0;
#X symbolatom 110 146 7 0 0 0 - - - 0;
#X symbolatom 148 369 10 0 0 0 - - - 0;
#X floatatom 148 179 10 0 0 0 - - - 0;
#X msg 178 218 symbol dog;
#X msg 187 256 -1;
#X msg 230 256 1.9;
#X msg 230 286 1e-07;
#X text 62 28 %s - symbol string:;
#X text 229 178 <-- send it a float;
#X text 167 146 <-- send it a symbol;
#X text 59 62 This format specifier allows you to insert a symbol \, but note it also works for float messages. You can set a precision as shown later \, but there's no default precision., f 52;
#X obj 148 321 else/format [%s];
#X connect 0 0 11 0;
#X connect 2 0 11 0;
#X connect 3 0 11 0;
#X connect 4 0 11 0;
#X connect 5 0 11 0;
#X connect 6 0 11 0;
#X connect 11 0 1 0;
#X restore 111 340 pd %s;
#X text 157 367 - signed decimal integer;
#N canvas 784 259 405 451 %u 0;
#X floatatom 150 293 9 0 0 0 - - - 0;
#X symbolatom 150 371 14 0 0 0 - - - 0;
#X msg 150 138 127;
#X msg 164 170 -255;
#X msg 175 206 1;
#X msg 100 174 12.9;
#X text 45 25 %u - unsigned decimal integer:;
#X text 43 59 This format specifier is the same as "%d" or "%i" \, but it is unsigned (only positive). Floats are truncated to integers., f 44;
#X obj 150 332 else/format [%u];
#X msg 192 243 1e+12;
#X connect 0 0 8 0;
#X connect 2 0 0 0;
#X connect 3 0 0 0;
#X connect 4 0 0 0;
#X connect 5 0 0 0;
#X connect 8 0 1 0;
#X connect 9 0 0 0;
#X restore 111 368 pd %u;
#X text 158 395 - unsigned hexadecimal;
#N canvas 781 226 439 467 %x/%X 0;
#X floatatom 211 304 9 0 0 0 - - - 0;
#X symbolatom 61 400 12 0 0 0 - - - 0;
#X symbolatom 211 400 12 0 0 0 - - - 0;
#X msg 211 149 127;
#X msg 236 217 1;
#X msg 253 254 1e+09;
#X msg 225 181 255;
#X msg 161 185 9.9;
#X text 40 11 %x or %X - unsigned hexadecimal:;
#X text 31 46 This format specifier allows you to insert a signed (only positive) hexadecimal integer into a symbol. Floats are truncated. The '%x' or '%X' specify respectively whether the the characters are lower or upper case., f 51;
#X obj 61 352 else/format [%x];
#X obj 211 352 else/format [%X];
#X connect 0 0 10 0;
#X connect 0 0 11 0;
#X connect 3 0 0 0;
#X connect 4 0 0 0;
#X connect 5 0 0 0;
#X connect 6 0 0 0;
#X connect 7 0 0 0;
#X connect 10 0 1 0;
#X connect 11 0 2 0;
#X restore 93 396 pd %x/%X;
#N canvas 687 138 756 536 # 0;
#X floatatom 158 127 0 0 0 0 - - - 0;
#X symbolatom 158 190 14 0 0 0 - - - 0;
#X msg 158 85 1;
#X msg 90 85 9;
#X msg 126 85 16;
#X msg 193 85 1e+09;
#X floatatom 206 338 0 0 0 0 - - - 0;
#X symbolatom 206 411 14 0 0 0 - - - 0;
#X msg 206 296 1;
#X msg 138 296 9;
#X msg 174 296 16;
#X msg 241 296 1e+09;
#X symbolatom 65 411 14 0 0 0 - - - 0;
#X floatatom 567 151 10 0 0 0 - - - 0;
#X symbolatom 417 247 18 0 0 0 - - - 0;
#X symbolatom 567 247 18 0 0 0 - - - 0;
#X msg 567 104 -1800;
#X msg 529 104 179;
#X msg 620 105 1e+08;
#X text 54 234 For "%x" and "%X" \, the number is preceded by "0x" (if %x) or "0X" (if %X)., f 43;
#X text 421 17 For %g and %G \, the decimal point and trailing zeroes are not removed. Note that this flag can be combined with '+' or 'space' flags., f 36;
#X text 35 34 The '#' (hash) flag presents an alternate form of some numeric types. For "%o" \, the number is preceded by a "0".;
#X obj 158 158 else/format [%#o];
#X obj 65 373 else/format [%#x];
#X obj 206 373 else/format [%#X];
#X obj 417 199 else/format [%#+g];
#X obj 567 199 else/format [%G];
#X floatatom 571 399 8 0 0 0 - - - 0;
#X symbolatom 571 472 17 0 0 0 - - - 0;
#X msg 571 357 1;
#X msg 500 357 9;
#X msg 536 357 16;
#X symbolatom 430 472 16 0 0 0 - - - 0;
#X msg 605 357 1.5;
#X text 419 295 For "%a" and "%A" \, the number has a decimal point even if there is no fractional part., f 43;
#X obj 430 434 else/format [%a];
#X obj 571 434 else/format [%#a];
#X connect 0 0 22 0;
#X connect 2 0 0 0;
#X connect 3 0 0 0;
#X connect 4 0 0 0;
#X connect 5 0 0 0;
#X connect 6 0 23 0;
#X connect 6 0 24 0;
#X connect 8 0 6 0;
#X connect 9 0 6 0;
#X connect 10 0 6 0;
#X connect 11 0 6 0;
#X connect 13 0 25 0;
#X connect 13 0 26 0;
#X connect 16 0 13 0;
#X connect 17 0 13 0;
#X connect 18 0 13 0;
#X connect 22 0 1 0;
#X connect 23 0 12 0;
#X connect 24 0 7 0;
#X connect 25 0 14 0;
#X connect 26 0 15 0;
#X connect 27 0 35 0;
#X connect 27 0 36 0;
#X connect 29 0 27 0;
#X connect 30 0 27 0;
#X connect 31 0 27 0;
#X connect 33 0 27 0;
#X connect 35 0 32 0;
#X connect 36 0 28 0;
#X restore 343 533 pd #;
#X text 185 562 width:;
#N canvas 499 154 928 523 width 0;
#X floatatom 102 181 9 0 0 0 - - - 0;
#X symbolatom 102 245 12 0 0 0 - - - 0;
#X msg 102 124 1;
#X msg 138 124 -1000;
#X msg 64 124 10;
#X symbolatom 108 473 12 0 0 0 - - - 0;
#X msg 108 371 1;
#X symbolatom 282 245 12 0 0 0 - - - 0;
#X symbolatom 282 181 10 0 0 0 - - - 0;
#X msg 295 153 symbol abcde;
#X msg 261 102 symbol a;
#X msg 282 127 symbol abc;
#X msg 150 149 -1e+06;
#X msg 70 371 31;
#X msg 148 371 1e+06;
#X floatatom 530 151 0 0 0 0 - - - 0;
#X symbolatom 530 215 13 0 0 0 - - - 0;
#X msg 492 94 10;
#X floatatom 698 150 0 0 0 0 - - - 0;
#X symbolatom 698 214 13 0 0 0 - - - 0;
#X msg 698 93 1;
#X msg 734 93 -1000;
#X msg 660 93 10;
#X msg 746 118 -1e+06;
#X symbolatom 547 439 12 0 0 0 - - - 0;
#X msg 547 290 1;
#X msg 595 315 -1e+06;
#X symbolatom 715 439 14 0 0 0 - - - 0;
#X msg 715 289 1;
#X msg 763 314 -1e+06;
#X msg 583 290 100;
#X msg 751 289 100;
#X msg 677 289 31;
#X msg 509 290 31;
#X msg 566 94 -100;
#X floatatom 108 406 9 0 0 0 - - - 0;
#X floatatom 547 362 9 0 0 0 - - - 0;
#X floatatom 715 362 9 0 0 0 - - - 0;
#X text 45 289 The width field can alternatively take the optional preceding '0' flag \, which fills the extra characters with leading zeroes instead of spaces., f 52;
#X text 489 30 You can also combine the width field with the preceding +/space/# flags where pertinent., f 46;
#X symbolatom 318 477 12 0 0 0 - - - 0;
#X msg 231 364 1;
#X msg 271 364 1e+06;
#X msg 317 363 symbol a;
#X msg 338 388 symbol abc;
#X listbox 318 422 10 0 0 0 - - - 0;
#X msg 530 94 1.1;
#X msg 578 119 -1.234e+06;
#X text 36 13 The width field takes an integer that sets the number of minimum characters and adds spaces to fill them (justifying the format to the right). This works for all types but the floating point numbers '%f' and '%e'/'%E' ('%g'/'%G' works). An optional '-' flag justifies to the left., f 55;
#X obj 102 213 else/format [%5d];
#X obj 282 213 else/format [%-5s];
#X obj 108 445 else/format [%05x];
#X obj 318 449 else/format [%05s];
#X obj 547 401 else/format [%#5x];
#X obj 715 401 else/format [%#08X];
#X obj 698 182 else/format [%\ -5d];
#X obj 530 183 else/format [%+-5g];
#X connect 0 0 49 0;
#X connect 2 0 0 0;
#X connect 3 0 0 0;
#X connect 4 0 0 0;
#X connect 6 0 35 0;
#X connect 8 0 50 0;
#X connect 9 0 8 0;
#X connect 10 0 8 0;
#X connect 11 0 8 0;
#X connect 12 0 0 0;
#X connect 13 0 35 0;
#X connect 14 0 35 0;
#X connect 15 0 56 0;
#X connect 17 0 15 0;
#X connect 18 0 55 0;
#X connect 20 0 18 0;
#X connect 21 0 18 0;
#X connect 22 0 18 0;
#X connect 23 0 18 0;
#X connect 25 0 36 0;
#X connect 26 0 36 0;
#X connect 28 0 37 0;
#X connect 29 0 37 0;
#X connect 30 0 36 0;
#X connect 31 0 37 0;
#X connect 32 0 37 0;
#X connect 33 0 36 0;
#X connect 34 0 15 0;
#X connect 35 0 51 0;
#X connect 36 0 53 0;
#X connect 37 0 54 0;
#X connect 41 0 45 0;
#X connect 42 0 45 0;
#X connect 43 0 45 0;
#X connect 44 0 45 0;
#X connect 45 0 52 0;
#X connect 46 0 15 0;
#X connect 47 0 15 0;
#X connect 49 0 1 0;
#X connect 50 0 7 0;
#X connect 51 0 5 0;
#X connect 52 0 40 0;
#X connect 53 0 24 0;
#X connect 54 0 27 0;
#X connect 55 0 19 0;
#X connect 56 0 16 0;
#X restore 238 563 pd width;
#X text 157 592 precision:;
#N canvas 364 453 448 268 precision 0;
#N canvas 842 141 470 564 strings 0;
#X symbolatom 214 521 8 0 0 0 - - - 0;
#X symbolatom 214 443 10 0 0 0 - - - 0;
#X symbolatom 193 223 8 0 0 0 - - - 0;
#X symbolatom 193 154 10 0 0 0 - - - 0;
#X msg 193 115 symbol abcde;
#X msg 89 115 symbol abcd;
#X msg 136 341 symbol ab;
#X msg 214 341 symbol abc;
#X msg 241 408 symbol abcde;
#X msg 229 375 symbol abcd;
#X text 40 28 For symbol srtrings (%s) \, the precision sets a maximum character limit. Below \, we have a maximum of 4 characters \, hence \, the symbol "abcde" gets truncated. There's no default precision by the way., f 58;
#X text 61 260 In this case \, the width field can be preceded to set a minimum of characters filled with spaces. The example below also makes use of the optional '-' flag to justify it to the left., f 48;
#X obj 193 189 else/format [%.4s];
#X obj 214 483 else/format [%-3.4s];
#X connect 1 0 13 0;
#X connect 3 0 12 0;
#X connect 4 0 3 0;
#X connect 5 0 3 0;
#X connect 6 0 1 0;
#X connect 7 0 1 0;
#X connect 8 0 1 0;
#X connect 9 0 1 0;
#X connect 12 0 2 0;
#X connect 13 0 0 0;
#X restore 159 133 pd strings;
#N canvas 793 252 531 363 integers 0;
#X symbolatom 99 278 10 0 0 0 - - - 0;
#X floatatom 260 190 7 0 0 0 - - - 0;
#X msg 260 157 -3;
#X msg 298 158 3;
#X symbolatom 260 278 10 0 0 0 - - - 0;
#X text 51 25 For integer types ('%d'/'%i'/'%o'/'%u'/'%x'/'%X') \, the precision field does not set a maximum number of characters. Instead \, it sets a fixed number of digits and adds zeroes to the left as a fill. This is slightly different than setting a width field with a '0' flag. The difference is only observed for numbers of different signs as below (and without the "+" flag). Note how the width field will suppress a zero to include a minus (-) character., f 64;
#X obj 99 234 else/format [%.4d];
#X obj 260 234 else/format [%04d];
#X connect 1 0 6 0;
#X connect 1 0 7 0;
#X connect 2 0 1 0;
#X connect 3 0 1 0;
#X connect 6 0 0 0;
#X connect 7 0 4 0;
#X restore 159 167 pd integers;
#N canvas 591 153 839 648 floats 0;
#X floatatom 440 279 10 0 0 0 - - - 0;
#X symbolatom 441 474 18 0 0 0 - - - 0;
#X symbolatom 457 376 18 0 0 0 - - - 0;
#X msg 442 175 1.23456;
#X msg 414 141 2.345e-05;
#X msg 469 242 -18;
#X msg 456 207 1.999e+07;
#X symbolatom 279 474 18 0 0 0 - - - 0;
#X floatatom 279 279 14 0 0 0 - - - 0;
#X symbolatom 299 376 18 0 0 0 - - - 0;
#X msg 279 175 1.234;
#X symbolatom 590 474 18 0 0 0 - - - 0;
#X floatatom 590 279 13 0 0 0 - - - 0;
#X symbolatom 630 376 18 0 0 0 - - - 0;
#X msg 590 175 1.234;
#X msg 604 207 -1800;
#X msg 615 242 0.000123456;
#X msg 304 242 0.000123456;
#X msg 293 207 -1800;
#X msg 248 141 2.345e-05;
#X msg 559 141 0.0001234;
#X text 191 524 For '%g' \, the precision field sets the maximum number of significant digits \, not counting leading zeros. Note that there's a default of 6 digits. Also note that this affects the resolution and can cause the number to be rounded. This setting also specifies how it chooses to show the scientific notation when positive \, as the exponent value needs to be needs to equal to or higher than the precision number (for negative values \, the scientific notation is always chosen if the exponent is less the '-4')., f 78;
#X obj 299 328 else/format [%.2f];
#X obj 279 426 else/format [%f];
#X obj 457 328 else/format [%.2E];
#X obj 441 426 else/format [%e];
#X obj 630 328 else/format [%.3g];
#X obj 590 426 else/format [%g];
#X symbolatom 123 453 18 0 0 0 - - - 0;
#X floatatom 123 258 14 0 0 0 - - - 0;
#X symbolatom 143 355 18 0 0 0 - - - 0;
#X msg 123 154 1.234;
#X msg 148 221 0.000123456;
#X msg 137 186 -1800;
#X msg 92 120 2.345e-05;
#X obj 123 405 makefilename [%a];
#X obj 143 307 makefilename [%.2A];
#X text 166 30 In the case of '%f' and '%e'/'%E' \, the precision field sets the maximum number of digits to the right of the decimal point. The same is actually true for '%a'/'%A' \, but it's the number of hexadecimal digits instead. Note that there's a default of 6 digits. Also note that this affects the resolution and can cause the number to be rounded., f 82;
#X connect 0 0 24 0;
#X connect 0 0 25 0;
#X connect 3 0 0 0;
#X connect 4 0 0 0;
#X connect 5 0 0 0;
#X connect 6 0 0 0;
#X connect 8 0 22 0;
#X connect 8 0 23 0;
#X connect 10 0 8 0;
#X connect 12 0 26 0;
#X connect 12 0 27 0;
#X connect 14 0 12 0;
#X connect 15 0 12 0;
#X connect 16 0 12 0;
#X connect 17 0 8 0;
#X connect 18 0 8 0;
#X connect 19 0 8 0;
#X connect 20 0 12 0;
#X connect 22 0 9 0;
#X connect 23 0 7 0;
#X connect 24 0 2 0;
#X connect 25 0 1 0;
#X connect 26 0 13 0;
#X connect 27 0 11 0;
#X connect 29 0 35 0;
#X connect 29 0 36 0;
#X connect 31 0 29 0;
#X connect 32 0 29 0;
#X connect 33 0 29 0;
#X connect 34 0 29 0;
#X connect 35 0 28 0;
#X connect 36 0 30 0;
#X restore 159 201 pd floats;
#X text 41 23 The precision field behaves differently according to the type (strings \, integers of floats). The syntax of this field is specified by a "." and is followed by the precision number. See subpatches below for the examples., f 51;
#X restore 238 593 pd precision;
#X text 158 339 - string;
#X text 159 283 - floats with or without scientific notation;
#N canvas 307 190 794 593 + 0;
#X floatatom 110 188 11 0 0 0 - - - 0;
#X symbolatom 110 263 12 0 0 0 - - - 0;
#X msg 69 105 127;
#X msg 110 105 -255;
#X msg 128 137 1e+06;
#X msg 180 137 -1e+07;
#X floatatom 141 433 10 0 0 0 - - - 0;
#X symbolatom 141 516 18 0 0 0 - - - 0;
#X msg 143 328 1.23456;
#X msg 68 328 2.345e-05;
#X msg 170 393 -18;
#X msg 157 360 1.999e+07;
#X symbolatom 526 191 18 0 0 0 - - - 0;
#X floatatom 526 103 8 0 0 0 - - - 0;
#X msg 540 61 -18;
#X msg 460 30 2.3e-05;
#X msg 526 29 257;
#X floatatom 560 424 10 0 0 0 - - - 0;
#X symbolatom 560 511 18 0 0 0 - - - 0;
#X msg 588 306 1.23456;
#X msg 605 377 0.99999;
#X msg 560 278 2.345e-05;
#X msg 602 338 1.1e+08;
#X msg 534 247 -1800;
#X msg 496 247 179;
#X floatatom 307 207 11 0 0 0 - - - 0;
#X symbolatom 307 282 12 0 0 0 - - - 0;
#X msg 266 124 127;
#X msg 307 124 -255;
#X msg 325 156 1e+06;
#X msg 377 156 -1e+07;
#X text 58 18 The "+" flag prepends a plus sign for positive signed numeric types (%d/%i/%e/%E/%f/%g/%G). The space (which can be used if escaped by a backslash) uses a space for positive values., f 47;
#X floatatom 328 438 10 0 0 0 - - - 0;
#X symbolatom 328 521 18 0 0 0 - - - 0;
#X msg 330 333 1.23456;
#X msg 255 333 2.345e-05;
#X msg 357 398 -18;
#X msg 344 365 1.999e+07;
#X obj 110 225 else/format [%+d];
#X obj 307 244 else/format [%\ d];
#X obj 526 143 else/format [%+f];
#X obj 560 463 else/format [%\ G];
#X obj 328 473 else/format [%\ e];
#X obj 141 468 else/format [%+e];
#X connect 0 0 38 0;
#X connect 2 0 0 0;
#X connect 3 0 0 0;
#X connect 4 0 0 0;
#X connect 5 0 0 0;
#X connect 6 0 43 0;
#X connect 8 0 6 0;
#X connect 9 0 6 0;
#X connect 10 0 6 0;
#X connect 11 0 6 0;
#X connect 13 0 40 0;
#X connect 14 0 13 0;
#X connect 15 0 13 0;
#X connect 16 0 13 0;
#X connect 17 0 41 0;
#X connect 19 0 17 0;
#X connect 20 0 17 0;
#X connect 21 0 17 0;
#X connect 22 0 17 0;
#X connect 23 0 17 0;
#X connect 24 0 17 0;
#X connect 25 0 39 0;
#X connect 27 0 25 0;
#X connect 28 0 25 0;
#X connect 29 0 25 0;
#X connect 30 0 25 0;
#X connect 32 0 42 0;
#X connect 34 0 32 0;
#X connect 35 0 32 0;
#X connect 36 0 32 0;
#X connect 37 0 32 0;
#X connect 38 0 1 0;
#X connect 39 0 26 0;
#X connect 40 0 12 0;
#X connect 41 0 18 0;
#X connect 42 0 33 0;
#X connect 43 0 7 0;
#X restore 238 533 pd + & space;
#X text 64 482 The types can be preceded by optional fields. The sequence syntac is <flags><width><precision><type>. See details below:;
#X text 304 564 (and '-'/'0' flags);
#X text 177 532 flags*:;
#N canvas 756 38 539 610 modifiers 0;
#X floatatom 110 344 7 0 0 0 - - - 0;
#X symbolatom 110 414 7 0 0 0 - - - 0;
#X floatatom 290 344 7 0 0 0 - - - 0;
#X symbolatom 290 414 8 0 0 0 - - - 0;
#X text 173 406 8-bit unsigned, f 9;
#X text 359 416 16-bit signed;
#X text 77 471 By the way \, the range precision for signed integers according to its bits size is -2ˆ(bits-1) to 2ˆ(bits-1) -1 \, whereas for unsigned is 0 to 2ˆ(bits) -1 - for example \, for 32 bits we have:, f 62;
#X text 107 539 Signed: -2³¹ (-2.147.483.648) to 2³¹ - 1 (2.147.483.647), f 57;
#X obj 110 374 else/format %hhu!;
#X obj 290 374 else/format %hi!;
#X text 59 24 The type modifiers (aka length specifiers) are placed before the format specifier and adjust how the data is to be interpreted regarding its size. This is only for integer and float types., f 66;
#X text 59 67 For integer types (%d \, %i \, %x \, %o \, '%u'/'%x'/'%X') \, the default is 32-bit precision. You can only represent integers correctly with this precision if you're using Pd compiled for 64 bits (aka Pd64). This is because Pd uses 32 bit floats otherwise \, which can only represent integers up to 2^24., f 66;
#X text 59 130 For float types (%a/%A \, %f/%F \, %e/%E and %g/%G) the default is 64-bit precision \, but it gets truncated to 32-bit if you're using the single precision version of Pd. Again \, you can only truly represent these values in double precision if you're using Pd64., f 66;
#X text 59 182 The 'h' length modifier is used for integers to specify shorter precisions. You should probably not need this anyway since this is better suited for representing and matching this specifier to a data type and in Pd these can't be shorter than 32-bit. A single 'h' specifies 16-bit precision and 'hh' is 8-bit precision., f 66;
#X text 59 246 On the other hand \, the 'l' modifier specifies a higher precision of 64-bit for integers \, which Pd can't represent even in Pd64 as the maximum integer is 2^53 in this case., f 66;
#X text 59 287 The 'L' modifier is for float types and specifies a higher precision than 64-bits \, but Pd has a limit of 64-bits in Pd64 and 32 bits otherwise - hence \, it shouldn't be used., f 66;
#X text 107 559 Unsigned: 0 to -2³² - 1 (4.294.967.295), f 57;
#X connect 0 0 8 0;
#X connect 2 0 9 0;
#X connect 8 0 1 0;
#X connect 9 0 3 0;
#X restore 247 442 pd modifiers;
#X text 142 443 type modifiers:;
#X text 131 629 * the apostrophe (') flag is not supported;
#X text 68 29 These are all the valid patterns available \, note they are in in the C-Style of the printf function \, but in a limited set. You can also use flags "+" and "#" \, plus a precision field. See examples below for more details., f 61;
#N canvas 807 103 437 486 %a/%A 0;
#X floatatom 211 324 9 0 0 0 - - - 0;
#X symbolatom 61 420 19 0 0 0 - - - 0;
#X symbolatom 211 420 19 0 0 0 - - - 0;
#X msg 253 274 1e+09;
#X msg 225 201 255;
#X msg 161 205 9.9;
#X obj 61 372 else/format [%a];
#X obj 211 372 else/format [%A];
#X text 40 11 %a or %A - hexadecimal floating-point representation;
#X msg 211 169 127.123;
#X msg 236 237 -1e-05;
#X text 31 36 This format specifier allows you to represent a floating point number in hexadecimal form. The '%a' or '%A' specify respectively whether the the characters are lower or upper case. Also \, it prints 'NAN' and 'INF' in all CAPS for %A \, while '%a' uses lowercase. The number is preceded with "0x" (if %a) or "0X" (if %A). The 'p' character represents the power of 2 exponent (so it separates the fractional hexadecimal part from the exponent in base 2).;
#X connect 0 0 6 0;
#X connect 0 0 7 0;
#X connect 3 0 0 0;
#X connect 4 0 0 0;
#X connect 5 0 0 0;
#X connect 6 0 1 0;
#X connect 7 0 2 0;
#X connect 9 0 0 0;
#X connect 10 0 0 0;
#X restore 93 142 pd %a/%A;
#N canvas 787 279 411 464 %f/%F 0;
#X symbolatom 208 400 18 0 0 0 - - - 0;
#X floatatom 208 313 8 0 0 0 - - - 0;
#X msg 208 209 1.234;
#X msg 222 241 -18;
#X msg 177 178 2.3e-05;
#X msg 233 276 0.997;
#X msg 133 178 1;
#X text 29 30 %f/%F - decimal floating point:;
#X text 30 61 This format specifier allows you to format a float into a symbol without scientific notation. Note that there's a default precision of 6 digits after the decimal point. You can change this precision as shown later. As in 'e'/'E' \, trailing zeros are always shown. The '%F' variant just prints 'NAN' and 'INF' in all CAPS \, while '%f' uses lowercase., f 50;
#X symbolatom 74 399 18 0 0 0 - - - 0;
#X obj 74 312 expr pow(-1 \, 2.3);
#X obj 74 279 bng 16 250 50 0 empty empty empty 0 -8 0 10 #dfdfdf #000000 #000000;
#X obj 74 354 else/format [%F];
#X obj 208 354 else/format [%f];
#X connect 1 0 13 0;
#X connect 2 0 1 0;
#X connect 3 0 1 0;
#X connect 4 0 1 0;
#X connect 5 0 1 0;
#X connect 6 0 1 0;
#X connect 10 0 12 0;
#X connect 10 0 13 0;
#X connect 11 0 10 0;
#X connect 12 0 9 0;
#X connect 13 0 0 0;
#X restore 94 256 pd %f/%F;
#X text 158 141 - hexadecimal floating-point;
#X restore 462 216 pd variables;
#X msg 212 187 file;
#X obj 323 189 nbx 4 14 0 100 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X text 30 192 see also:;
#X obj 29 241 else/unite;
#X text 223 290 float/symbol atoms to format variables \, or a bang to define an empty string, f 51;
#X text 226 370 atoms that may contain '%' variables (obrigatory \, no default), f 36;
#X msg 200 163 symbol song;
#X obj 200 214 else/format %s-%d.wav;
#X msg 131 163 list a 10;
#X obj 28 216 makefilename;
#X text 164 370 1) list;
#X text 96 94 [format] formats symbols similarly to [makefilename] \, but it accepts more than one '%' variable \, where each corresponds to an inlet., f 53;
#X text 167 335 symbol;
#X text 213 336 - the formatted symbol;
#X connect 23 0 30 0;
#X connect 24 0 30 1;
#X connect 29 0 30 0;
#X connect 30 0 21 0;
#X connect 31 0 30 0;
