#N canvas 508 45 562 677 10;
#X obj 5 323 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 5 487 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 5 586 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000 0;
#X obj 5 648 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020 0;
#X obj 162 41 cnv 4 4 4 empty empty algorithm 0 28 2 18 #e0e0e0 #000000 0;
#X obj 306 5 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc 0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 305 4 pd;
#X obj 346 12 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc 0;
#X obj 459 12 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 479 12 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 516 12 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 465 27 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 503 27 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 43 42 cnv 4 4 4 empty empty Karplus-Strong 0 28 2 18 #e0e0e0 #000000 0;
#X obj 288 179 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X obj 19 42 cnv 4 4 4 empty empty A 0 28 2 18 #e0e0e0 #000000 0;
#X obj 4 4 cnv 15 301 42 empty empty pluck~ 20 20 2 37 #e0e0e0 #000000 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1 0 0;
#X restore 3 4 graph;
#X text 349 179 decay time (ms);
#X obj 347 201 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X obj 77 496 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 76 330 cnv 17 3 62 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 77 399 cnv 17 3 17 empty empty 1 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 158 496 signal;
#X text 127 609 2) float - decay time in ms (default 0);
#X obj 77 420 cnv 17 3 17 empty empty 2 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 77 441 cnv 17 3 17 empty empty 3 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 127 400 float/signal;
#X text 209 423 - decay time in ms;
#X text 209 444 - filter cutoff frequency;
#X obj 170 261 else/out~;
#X text 409 200 filter cutoff (hz);
#N canvas 737 204 419 314 negative 0;
#X obj 180 152 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X text 241 152 decay time (ms);
#X obj 94 220 else/out~;
#X msg 180 100 5000;
#X msg 197 123 -5000;
#X text 36 18 The decay time is actually a feedback parameter. Since negative feedback values are allowed \, you can insert a negative decay time value. Note that a negative parameter changes the tonal quality significantly.;
#X obj 94 180 else/pluck~ 100 5000, f 22;
#X obj 94 117 bng 17 250 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000;
#X obj 94 139 else/impseq~;
#X connect 0 0 6 2;
#X connect 3 0 0 0;
#X connect 4 0 0 0;
#X connect 6 0 2 0;
#X connect 7 0 8 0;
#X connect 8 0 6 1;
#X restore 384 257 pd negative \; feedback;
#X text 127 444 float/signal;
#X text 127 423 float/signal;
#X obj 170 226 else/pluck~ 50 2500 10000, f 30;
#X obj 5 522 cnv 3 550 3 empty empty flags 8 12 0 13 #dcdcdc #000000 0;
#X obj 77 463 cnv 17 3 17 empty empty 4 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 127 465 float/signal;
#X text 209 465 - optional noise input (with the -in flag);
#N canvas 717 185 637 455 examples 0;
#X text 188 38 And now for some computer music clich√© with random generators..., f 32;
#X obj 369 251 else/pluck~;
#X obj 84 248 else/pluck~ -in;
#X obj 196 251 else/brown~;
#X obj 105 111 else/dust~ 1;
#X obj 84 284 else/plate.rev~ 5 0.6 0.25 0.8 0.5, f 17;
#X obj 369 288 else/plate.rev~ 5 0.6 0.25 0.8 0.5, f 17;
#X obj 144 145 else/rand.f~ 30 250;
#X obj 150 183 else/rand.f~ 2500 5000;
#X obj 149 222 else/rand.f~ 500 20000;
#X obj 427 150 else/rand.f~ 250 500;
#X obj 433 188 else/rand.f~ 500 5000;
#X obj 432 227 else/rand.f~ 5000 10000;
#X obj 90 332 else/out~;
#X obj 375 335 else/out~;
#X obj 390 116 else/tempo~ -on 300 150;
#X connect 1 0 6 0;
#X connect 2 0 5 0;
#X connect 3 0 2 4;
#X connect 4 0 7 0;
#X connect 4 0 8 0;
#X connect 4 0 9 0;
#X connect 4 0 2 1;
#X connect 5 0 13 0;
#X connect 5 1 13 1;
#X connect 6 0 14 0;
#X connect 6 1 14 1;
#X connect 7 0 2 0;
#X connect 8 0 2 2;
#X connect 9 0 2 3;
#X connect 10 0 1 0;
#X connect 11 0 1 2;
#X connect 12 0 1 3;
#X connect 15 0 10 0;
#X connect 15 0 11 0;
#X connect 15 0 12 0;
#X connect 15 0 1 1;
#X restore 465 288 pd examples;
#N canvas 753 120 447 443 -in 0;
#X obj 118 291 else/out~;
#X obj 160 144 else/dust~ 4;
#X obj 289 206 else/impseq~;
#X text 51 47 The [pluck~] object uses an internal white noise generator as the excitation signal. But if a "-in" flag is given \, [pluck~] creates an extra right outlet for the excitation signal. Here we use an impulse instead of the white noise.;
#X obj 118 237 else/pluck~ -in 440 5000 7500;
#X connect 1 0 2 0;
#X connect 1 0 4 1;
#X connect 2 0 4 4;
#X connect 4 0 0 0;
#X restore 465 268 pd -in;
#X text 204 496 - the karplus-strong output;
#X obj 170 179 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X text 163 331 signal;
#X text 127 624 3) float - filter cutoff frequency (default around 7020);
#N canvas 791 128 381 386 cutoff 0;
#X obj 53 301 else/out~;
#X obj 53 261 else/pluck~ 50 2500 10000;
#X obj 200 153 else/tempo~ -on 120;
#X obj 200 190 else/rand.f~ 2000 15000;
#X obj 200 224 else/numbox~ 6 12 100 #c0c0c4 #440008 10 0 0 0;
#X text 25 18 The filter used in the loop is a [lop2~] \, a 1-pole / 1-zero lowpass filter. By default \, the cuttoff frequency is about 7020 hz \, which in a 44100 sample rate puts the pole at zero \, leaving only a zero at nyquist. This setting is the same as an average of two samples \, which was the original filter in the original Karplu-Strong Algorithm. When reaching nyquist for the cutoff \, you have no filter action \, so it's as if it's been disabled., f 51;
#X connect 1 0 0 0;
#X connect 2 0 3 0;
#X connect 2 0 1 1;
#X connect 3 0 4 0;
#X connect 4 0 1 3;
#X restore 465 248 pd cutoff;
#X text 313 153 trigger;
#X obj 229 154 else/dust~ 5;
#X text 209 400 - trigger (determines the maximum amplitude);
#X text 210 331 - frequency input;
#X text 175 346 list;
#X text 210 346 - frequency and trigger value (normalized to MIDI range);
#X text 140 546 -midi: sets to MIDI pitch frequency input, f 52;
#X text 127 594 1) float - frequency (default 0);
#X text 49 91 [pluck~] is a Karplus-Strong algorithm with a 1st order lowpass filter in the feedback loop. It takes frequency in hertz or midi \, a decay time in ms and a cutoff frequency in hz for the filter. It is triggered by signals at zero to non zero transitions or by lists at control rate., f 77;
#X text 29 225 * output is muted if less than 1 hz, f 17;
#X text 121 178 pitch *;
#X text 127 360 midi <float>;
#N canvas 255 156 1120 494 trigger 0;
#X obj 97 273 else/out~;
#X obj 146 151 else/impseq~ 1 0.5 0.25 0.1;
#X obj 174 177 else/trighold~;
#X obj 97 237 else/pluck~ 50 2500 10000;
#X obj 146 120 else/tempo~ -on 120;
#X obj 174 199 else/numbox~ 6 12 100 #c0c0c4 #440008 10 0 0 0;
#X text 33 22 Below we have a sequence of impulse values \, we can then see how the impulse value determines the amplitude/intensity. A trigger happens when there is a 0 to non 0 transition \, and this values determines the maximum amplitude., f 46;
#X obj 402 116 bng 21 250 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000;
#X obj 402 400 else/out~;
#X obj 402 369 else/pluck~ -midi 0 2500;
#X obj 402 244 else/keyboard 17 80 2 3 0 0 empty empty;
#X obj 402 210 else/makenote2;
#X obj 402 151 else/rand.i 48 71;
#X listbox 402 340 11 0 0 0 - - - 0;
#X msg 402 179 \$1 127 0.5;
#X floatatom 97 179 5 0 0 0 - - - 12;
#X msg 59 147 midi \$1;
#X obj 59 113 tgl 21 0 empty empty empty 0 -8 0 10 #dfdfdf #000000 #000000 0 1;
#X text 52 364 By default \, the frequency input is in Hertz \, but you can set it to MIDI pitch with the 'midi' message or 'midi' flag., f 44;
#X obj 300 280 else/note.in;
#X text 334 16 You can use lists for a MIDI/control input. It takes note on messages to trigger it (note offs are just ignored) with pitch and velocity (values from 0 to 127 is normalized to 0 to 1 range (float values and values outside this range is possible). You can get note on list messages with objects like [keyboard] \, [makenote2] and [note.in], f 52;
#X obj 811 134 else/keyboard 17 80 1 4 0 0 empty empty;
#X obj 811 109 else/note.in;
#X msg 705 196 midi_active \$1;
#X obj 705 164 tgl 23 0 empty empty empty 0 -8 0 10 #dfdfdf #000000 #000000 0 1;
#X obj 811 362 else/out~;
#X obj 914 276 else/impseq~ 1 0.5 0.25 0.1;
#X obj 914 245 else/tempo~ -on 120;
#X obj 844 259 sig~ 50;
#X obj 811 321 else/pluck~ -midi 50 2500 7500;
#X text 718 32 A list input only works properly if there is no signal connected into the 1st and 2nd inlets. Nonetheless \, you can enable 'midi mode' and force a list input even with signal inputs connected in the 1st and 2nd inlets., f 55;
#X connect 1 0 2 0;
#X connect 1 0 3 1;
#X connect 2 0 5 0;
#X connect 3 0 0 0;
#X connect 4 0 1 0;
#X connect 7 0 12 0;
#X connect 9 0 8 0;
#X connect 10 0 13 0;
#X connect 11 0 10 0;
#X connect 12 0 14 0;
#X connect 13 0 9 0;
#X connect 14 0 11 0;
#X connect 15 0 3 0;
#X connect 16 0 3 0;
#X connect 17 0 16 0;
#X connect 19 0 13 0;
#X connect 21 0 29 0;
#X connect 22 0 21 0;
#X connect 23 0 29 0;
#X connect 24 0 23 0;
#X connect 26 0 29 1;
#X connect 27 0 26 0;
#X connect 28 0 29 0;
#X connect 29 0 25 0;
#X restore 342 288 pd trigger and MIDI;
#X text 98 563 -midi_active: force MIDI mode (default disabled), f 59;
#X text 152 530 -in: creates an extra right outlet for noise input;
#X text 85 376 midi_active <float>;
#X text 210 376 - non zero forces MIDI input over signal, f 49;
#X text 210 361 - non zero sets to MIDI pitch input instead of hz;
#X text 175 158 Hz;
#X connect 14 0 35 2;
#X connect 19 0 35 3;
#X connect 35 0 30 0;
#X connect 43 0 35 0;
#X connect 48 0 35 1;
