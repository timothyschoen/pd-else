#N canvas 631 57 570 765 10;
#N canvas 421 117 825 523 read/write 0;
#X msg 550 168 clear;
#X text 590 168 clears all channels;
#X text 669 250 writes contents of buffer into a file, f 18;
#X text 621 294 without symbol: opens dialog box, f 17;
#X text 579 275 formats: .wav \, .aif/.aiff or .caf;
#X msg 501 138 open;
#X msg 574 257 save test.wav;
#X msg 581 300 save;
#X msg 539 138 load;
#X text 578 139 without symbol \, opens dialog box;
#X text 592 111 load into buffer;
#X text 23 87 Just the 'open' message opens a dialog for you to choose a sound file. Then the buffer is resized and reinitialized according to the sample size and its number of channels. If you give the open message a file name \, same thing happens \, but note that after the sample name you can also define optional arguments. The 1st optional argument sets the start read position in samples in the file \, the 2nd the buffer duration in ms and the 3rd the number of channels in the buffer. This way you can reconfigure the buffer size and its number of channels., f 65;
#X text 23 197 The 'load' needs a file name and it loads this file into the sample buffer according to the previously set buffer size and number of channels. Just 'load' opens a dialog., f 65;
#X text 23 241 The "save" message saves the contents of [sample~] into an audio file and needs a symbol with the file name to save to (in which case the file is saved in the current patch's folder). If no file name is given \, a file dialog is opened for naming it and you can save it anywhere in your computer., f 65;
#X text 23 23 You can set an array name as the first argument. The second argument sets a sound file to open. The size and number of channels from given sound file prevails \, unless the -size \, -ms and -ch flags are given \, in which case the sound file loads into these parameters., f 65;
#X text 23 302 The [sample~] object supports 'wav' \, 'aif/aiff' and 'caf' sound files for opening and saving and in both cases the file extension needs to be set. If you don't specify a format for saving \, [sample~] will save in same format of the most recently opened audio file and by default it saves in .wav format., f 65;
#X listbox 455 371 27 0 0 0 - - - 0;
#X msg 478 87 open stereo.wav 500 500 1;
#X msg 465 66 open stereo.wav;
#X text 23 367 The "depth" message sets the bit depth for writing files \, it accepts 16 \, 24 \, 32 and 64 (use double precision Pd for this one). The "sr" message also sets a sample rate for saving a file., f 65;
#X msg 565 226 depth 32 \, sr 88200;
#X msg 560 198 depth 16 \, sr 44100;
#X text 459 396 <size \, sr \, ms \, ch \, bits> *;
#X text 220 429 * Note that if you specify a buffer size that is smaller than the file you're loading \, the file size that is output will be clipped to the buffer size. On the other hand \, if you set a buffer that is bigger than a sample you're loading \, then the sample size is the original sample size and smaller than the buffer size in ms., f 67;
#X obj 455 342 else/sample~ sample_\$0 stereo.wav;
#X msg 455 42 open violin.flac;
#X text 576 36 open a file specified by a symbol, f 12;
#X msg 487 111 load violin.flac;
#X connect 0 0 24 0;
#X connect 5 0 24 0;
#X connect 6 0 24 0;
#X connect 7 0 24 0;
#X connect 8 0 24 0;
#X connect 17 0 24 0;
#X connect 18 0 24 0;
#X connect 20 0 24 0;
#X connect 21 0 24 0;
#X connect 24 0 16 0;
#X connect 25 0 24 0;
#X connect 27 0 24 0;
#X restore 448 193 pd read/write;
#X obj 306 5 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc 0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 305 4 pd;
#X obj 345 12 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc 0;
#X obj 23 41 cnv 4 4 4 empty empty Audio 0 28 2 18 #e0e0e0 #000000 0;
#X obj 458 12 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 478 12 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 515 12 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 464 27 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 502 27 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 77 41 cnv 4 4 4 empty empty buffer 0 28 2 18 #e0e0e0 #000000 0;
#X obj 3 4 cnv 15 301 42 empty empty sample~ 20 20 2 37 #e0e0e0 #000000 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1 0 0;
#X restore 3 4 graph;
#X obj 10 732 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020 0;
#X obj 8 291 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 10 553 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 10 685 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000 0;
#X obj 86 562 cnv 17 3 27 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 154 694 1) symbol;
#X text 223 709 - audio file to load (optional), f 44;
#X text 154 709 2) symbol;
#X obj 10 595 cnv 3 550 3 empty empty flags 8 12 0 13 #dcdcdc #000000 0;
#X text 150 389 clear;
#X text 189 389 - fills all arrays with zeros, f 58;
#X text 189 502 - normalizes to the given float value, f 58;
#X text 189 417 - sets file to write to (no symbol opens dialog box), f 58;
#X text 120 431 sr <float>;
#X text 156 459 show;
#X text 156 473 hide;
#X text 189 459 - shows/opens buffer supbatch window, f 58;
#X text 189 473 - hides/closes buffer supbatch window, f 58;
#X text 108 516 size <float>;
#X text 120 530 ms <float>;
#X text 102 417 save <symbol>;
#X text 102 445 depth <float>;
#X text 189 516 - sets maximum buffer size in samples, f 58;
#X text 189 530 - sets maximum buffer size in ms, f 58;
#X text 135 602 -size <float> - sets maximum buffer size in samples, f 64;
#X text 147 616 -ms <float> - sets maximum buffer size in ms, f 62;
#X obj 88 303 cnv 17 3 242 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 223 694 - buffer name (default sample_\$0), f 44;
#X text 156 374 info;
#X text 189 374 - re output size \, sample rate and channels, f 58;
#X text 147 631 -ch <float> - sets number of channels (default 1 or samples's), f 62;
#X msg 163 167 show;
#X msg 172 189 hide;
#X obj 164 250 else/display;
#X text 356 253 <size \, sr \, ms \, ch \, bits>;
#X text 189 562 -;
#X text 156 562 list;
#X text 189 403 - trims to a sample range in ms, f 58;
#X msg 111 174 info;
#X msg 141 143 trim 100 200;
#X text 108 487 set <symbol>;
#X text 189 488 - set buffer name, f 58;
#X text 117 302 open <list> -;
#X text 102 349 load <symbol>;
#X text 114 403 trim <f \, f>;
#X text 108 501 norm <float>;
#X text 189 349 -;
#X text 201 349 load a file into existing buffer size and number of channels (just 'open' opens dialog box to open a file), f 56;
#X text 201 562 sample size in samples \, sample rate \, buffer size in ms \, channels and bits, f 36;
#X text 58 220 click to see -->;
#N canvas 530 226 808 425 related-objects 0;
#X msg 119 81 open;
#X text 70 164 Similar to:;
#X obj 68 237 soundfiler;
#X obj 154 165 table vanilla_\$0;
#X text 398 23 You can use pd vanilla's objects (such as [tabreceive~] \, [tabplay~] \, [tabread4~] and so on) to access the internal arrays of a buffer. In the case of a multi channel buffer \, you have to give it the right table name according to a specific channel.;
#X obj 521 161 else/tabwriter~;
#X obj 521 191 else/tabplayer~;
#X obj 521 131 batch.write~;
#X text 47 29 [sample~] is similar to pd vanilla's [table] object., f 39;
#X text 152 82 <-- check internal array;
#X text 398 85 For multichannel samples \, ELSE has other objects that follow the same naming convention \, so they work nicely together \, see:, f 58;
#X text 407 262 The objects above work with mono or multi channel samples. When trying to access the first channel of a buffer \, they look for a table name with the same name as the argument (for single channel sample compatibility). If not found \, then they look for the first channel of a multi channel [sample~] (the buffer name preeceded by "0-").;
#X text 38 283 But [sample~] is also able to define multi channel arrays (up to 64). The convention for channel ordering is the sample name preceded by the channel number (from 0) and "-". For instance \, a 4 channel [sample~] named "test" has arrays named as: "0-test" \, "1-test" \, "2-test" and "3-test"!, f 54;
#X text 38 358 On the other hand \, for single or "mono" buffers \, a buffer named "test" has an internal array also named: "test"., f 54;
#X text 264 165 <-- click to open;
#X text 407 221 The [tabplayer~] is specially nicely integrated with [sample~] because it is automatically aware of the sample rate of the loaded file and adjusts accordingly., f 58;
#X text 407 342 Hence \, all of them can also access single channel arrays specified with a [table] or [array] object!, f 58;
#X obj 119 107 else/sample~ else_\$0 loop.wav;
#X obj 68 205 else/initmess read -resize loop.wav vanilla_\$0;
#X connect 0 0 17 0;
#X connect 18 0 2 0;
#X restore 418 214 pd related-objects;
#X text 147 645 -sr <float> - sets sample rate to save to (default Pd's), f 62;
#X text 129 660 -depth <float> - sets bit-depth to save to (default 16), f 65;
#X text 189 431 - sets file's sample rate to save to, f 58;
#X text 189 445 - sets bit depth (8 \, 16 \, 24 \, 32 or 64) to save to, f 58;
#X msg 221 189 open stereo.wav;
#X msg 335 191 open;
#X text 71 88 [sample~] is an abstraction that creates an audio buffer which you can use to load a sample or record into. It can load and save multichannel files. It is based on [sfload] and [soundfiler]., f 70;
#X text 201 301 takes a filename to open - just 'open' opens dialog box to open a file, f 56;
#X obj 164 220 else/sample~ \$0-sample stereo.wav;
#X connect 44 0 72 0;
#X connect 45 0 72 0;
#X connect 51 0 72 0;
#X connect 52 0 72 0;
#X connect 68 0 72 0;
#X connect 69 0 72 0;
#X connect 72 0 46 0;
