#N canvas 618 43 569 745 10;
#N canvas 523 128 825 523 read/write 0;
#X msg 524 157 clear;
#X text 564 157 clears all channels;
#X text 647 246 writes contents of buffer into a file, f 18;
#X text 599 290 without symbol: opens dialog box, f 17;
#X text 557 271 formats: .wav \, .aif/.aiff or .caf;
#X msg 443 22 open;
#X msg 552 253 save test.wav;
#X msg 559 296 save;
#X text 25 203 The "save" message saves the contents of [sample~] into an audio file and needs a symbol with the file name to save to (in which case the file is saved in the current patch's folder). If no file name is given \, a file dialog is opened for naming it and you can save it anywhere in your computer., f 65;
#X listbox 455 371 27 0 0 0 - - - 0;
#X msg 475 79 open stereo.wav;
#X text 25 338 The "depth" message sets the bit depth for writing files \, it accepts 16 \, 24 \, 32 and 64 (use double precision Pd for this one). The "sr" message also sets a sample rate for saving a file., f 65;
#X msg 543 222 depth 32 \, sr 88200;
#X msg 538 194 depth 16 \, sr 44100;
#X text 459 396 <size \, sr \, ms \, ch \, bits> *;
#X text 575 53 open a file specified by a symbol;
#X msg 465 55 open violin.flac;
#X msg 515 126 open stereo.wav 1 1000 250;
#X msg 489 102 open stereo.wav 1;
#X text 583 78 a stereo one now;
#X text 605 102 load only first channel;
#X text 684 121 1st ch \, 1000ms array size from 250ms, f 20;
#X text 25 32 You can set an array name as the first argument. The second argument sets a sound file to open. The size and number of channels from given sound file is the default \, unless the -size and -ch flags are given \, in which case the sound file loads into these parameters. But these flags make more sense if you want to initialize a buffer to record into. This is because further optional arguments also set the number of channels \, size and also onset., f 65;
#X text 25 126 Just the 'open' message opens a dialog for you to choose a sound file. Then the buffer is resized and reinitialized according to the sample size and its number of channels. If you give the open message a file name \, same thing happens \, but after the sample name you can also define the same optional arguments to set channel \, size and onset., f 65;
#X text 25 264 The [sample~] object supports 'wav' \, 'aif/aiff' and 'caf' sound files for saving (and the file extension needs to be set) \, but can open any file that [sfload] supports. If you don't specify a format for saving \, [sample~] will save in same format of the most recently opened audio file and by default it saves in .wav format., f 65;
#X text 485 15 without symbol \, opens dialog box (same as clicking on the object), f 32;
#X obj 455 342 else/sample~ sample_\$0 stereo.wav 1 1000 250;
#X text 279 437 * Note that regardless of the buffer size and specified number of channels \, the output is always the original sample size and original number of channels., f 62;
#X connect 0 0 26 0;
#X connect 5 0 26 0;
#X connect 6 0 26 0;
#X connect 7 0 26 0;
#X connect 10 0 26 0;
#X connect 12 0 26 0;
#X connect 13 0 26 0;
#X connect 16 0 26 0;
#X connect 17 0 26 0;
#X connect 18 0 26 0;
#X connect 26 0 9 0;
#X restore 459 284 pd read/write;
#X obj 306 5 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc 0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 305 4 pd;
#X obj 345 12 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc 0;
#X obj 23 41 cnv 4 4 4 empty empty Audio 0 28 2 18 #e0e0e0 #000000 0;
#X obj 458 12 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 478 12 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 515 12 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 464 27 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 502 27 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 77 41 cnv 4 4 4 empty empty buffer 0 28 2 18 #e0e0e0 #000000 0;
#X obj 3 4 cnv 15 301 42 empty empty sample~ 20 20 2 37 #e0e0e0 #000000 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1 0 0;
#X restore 3 4 graph;
#X obj 10 719 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020 0;
#X obj 8 346 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 10 556 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 10 672 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000 0;
#X obj 86 565 cnv 17 3 27 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 154 681 1) symbol;
#X obj 10 598 cnv 3 550 3 empty empty flags 8 12 0 13 #dcdcdc #000000 0;
#X text 150 406 clear;
#X text 189 406 - fills all arrays with zeros, f 58;
#X text 189 519 - normalizes to the given float value, f 58;
#X text 189 434 - sets file to write to (no symbol opens dialog box), f 58;
#X text 120 448 sr <float>;
#X text 156 476 show;
#X text 156 490 hide;
#X text 189 476 - shows/opens buffer supbatch window, f 58;
#X text 189 490 - hides/closes buffer supbatch window, f 58;
#X text 108 533 size <float>;
#X text 102 434 save <symbol>;
#X text 102 462 depth <float>;
#X obj 88 355 cnv 17 3 193 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 223 681 - buffer name (default sample_\$0), f 44;
#X text 156 391 info;
#X text 189 391 - re output size \, sample rate and channels, f 58;
#X text 147 620 -ch <float> - sets number of channels (default 1 or samples's), f 62;
#X msg 197 171 show;
#X msg 206 193 hide;
#X obj 198 287 else/display;
#X text 204 317 <size \, sr \, ms \, ch \, bits>;
#X text 189 565 -;
#X text 156 565 list;
#X text 189 420 - trims to a sample range in ms, f 58;
#X msg 145 178 info;
#X msg 175 147 trim 100 200;
#X text 108 504 set <symbol>;
#X text 189 505 - set buffer name, f 58;
#X text 117 354 open <list> -;
#X text 114 420 trim <f \, f>;
#X text 108 518 norm <float>;
#X text 201 565 sample size in samples \, sample rate \, buffer size in ms \, channels and bits, f 36;
#N canvas 530 226 808 486 related-objects 0;
#X text 74 196 Similar to:;
#X obj 72 269 soundfiler;
#X obj 158 197 table vanilla_\$0;
#X text 402 25 You can use pd vanilla's objects (such as [tabreceive~] \, [tabplay~] \, [tabread4~] and so on) to access the internal arrays of a buffer. In the case of a multi channel buffer \, you have to give it the right table name according to a specific channel.;
#X obj 525 163 else/tabwriter~;
#X obj 525 193 else/tabplayer~;
#X obj 525 133 batch.write~;
#X text 51 41 [sample~] is similar to pd vanilla's [table] object., f 39;
#X text 132 93 <-- check internal array;
#X text 402 87 For multichannel samples \, ELSE has other objects that follow the same naming convention \, so they work nicely together \, see:, f 58;
#X text 411 264 The objects above work with mono or multi channel samples. When trying to access the first channel of a buffer \, they look for a table name with the same name as the argument (for single channel sample compatibility). If not found \, then they look for the first channel of a multi channel [sample~] (the buffer name preeceded by "0-").;
#X text 42 315 But [sample~] is also able to define multi channel arrays (up to 64). The convention for channel ordering is the sample name preceded by the channel number (from 0) and "-". For instance \, a 4 channel [sample~] named "test" has arrays named as: "0-test" \, "1-test" \, "2-test" and "3-test"!, f 54;
#X text 42 390 On the other hand \, for single or "mono" buffers \, a buffer named "test" has an internal array also named: "test"., f 54;
#X text 268 197 <-- click to open;
#X text 411 223 The [tabplayer~] is specially nicely integrated with [sample~] because it is automatically aware of the sample rate of the loaded file and adjusts accordingly., f 58;
#X text 411 344 Hence \, all of them can also access single channel arrays specified with a [table] or [array] object!, f 58;
#X obj 72 237 else/initmess read -resize loop.wav vanilla_\$0;
#X msg 93 93 show;
#X text 435 396 The [player~] object from ELSE is kinda like integrating [sample~] and [tabplayer~] altogether., f 33;
#X obj 658 406 else/player~;
#X text 134 126 or shift+click below:;
#X obj 93 149 else/sample~ else_\$0 loop.wav;
#X connect 16 0 1 0;
#X connect 17 0 21 0;
#X restore 429 305 pd related-objects;
#X text 147 634 -sr <float> - sets sample rate to save to (default Pd's), f 62;
#X text 129 649 -depth <float> - sets bit-depth to save to (default 16), f 65;
#X text 189 448 - sets file's sample rate to save to, f 58;
#X text 189 462 - sets bit depth (8 \, 16 \, 24 \, 32 or 64) to save to, f 58;
#X msg 264 173 open;
#X text 71 88 [sample~] is an abstraction that creates an audio buffer which you can use to load a sample or record into. It can load and save multichannel files. It is based on [sfload] and [soundfiler]., f 70;
#X msg 287 221 open violin.flac;
#X msg 279 198 open stereo.wav;
#X text 201 353 takes a filename to open - just 'open' opens dialog box to open a file. Optional further args is number of channels \, size in ms and offset in ms, f 56;
#X text 135 605 -size <float> - sets maximum buffer size in ms (default 1000), f 64;
#X text 189 533 - resets buffer size in ms, f 58;
#X text 52 257 click to open file --> shift+click to view sample, f 23;
#X text 166 696 2) list;
#X text 223 696 - optional file and args like open message, f 44;
#X obj 198 257 else/sample~ \$0-sample stereo.wav;
#X connect 37 0 67 0;
#X connect 38 0 67 0;
#X connect 44 0 67 0;
#X connect 45 0 67 0;
#X connect 57 0 67 0;
#X connect 59 0 67 0;
#X connect 60 0 67 0;
#X connect 67 0 39 0;
