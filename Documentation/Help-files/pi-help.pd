#N canvas 404 58 565 442 10;
#X obj 4 291 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 326 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 361 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000 0;
#X obj 136 335 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 137 300 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 4 414 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020 0;
#X obj 229 194 bng 19 250 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000;
#X text 171 301 bang;
#X obj 306 4 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc 0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 305 3 pd;
#X obj 345 11 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc 0;
#X obj 23 40 cnv 4 4 4 empty empty Get 0 28 2 18 #e0e0e0 #000000 0;
#X obj 56 40 cnv 4 4 4 empty empty the 0 28 2 18 #e0e0e0 #000000 0;
#X obj 458 11 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 478 11 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 515 11 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 464 26 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 502 26 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 280 197 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X text 159 195 get value;
#X obj 85 40 cnv 4 4 4 empty empty value 0 28 2 18 #e0e0e0 #000000 0;
#X obj 133 40 cnv 4 4 4 empty empty of 0 28 2 18 #e0e0e0 #000000 0;
#X obj 159 40 cnv 4 4 4 empty empty Pi 0 28 2 18 #e0e0e0 #000000 0;
#X obj 3 3 cnv 15 301 42 empty empty pi 20 20 2 37 #e0e0e0 #000000 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1 0 0;
#X restore 3 3 graph;
#X text 165 335 float;
#X text 62 89 [pi] calculates and outputs the value of pi. It receives a multiplier value via the argument or second inlet \, which needs to be greater than 0 (otherwise it's considered as 1).;
#X text 201 335 - the value of pi;
#N canvas 746 157 456 421 expr 0;
#X obj 105 289 bng 19 250 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000;
#X obj 105 352 else/display;
#X obj 103 233 else/display;
#X obj 103 204 value pi;
#X obj 84 112 else/pi pi;
#X obj 232 352 else/display;
#X obj 232 320 expr 1 / halfpi_\$0;
#X obj 216 113 else/pi 0.5 halfpi_\$0;
#X obj 105 320 expr 2*pi;
#X text 38 22 [pi] can take a [value] name as the second argument or as the first argument (since the first float argument is optional). You can then retrieve this value in another [value] or [var] object or inside an expressionin [expr], f 58;
#X obj 233 235 else/display;
#X obj 233 206 else/var halfpi_\$0;
#X obj 232 289 bng 19 250 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000;
#X obj 103 173 bng 19 250 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000;
#X obj 233 173 bng 19 250 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000;
#X connect 0 0 8 0;
#X connect 3 0 2 0;
#X connect 6 0 5 0;
#X connect 8 0 1 0;
#X connect 11 0 10 0;
#X connect 12 0 6 0;
#X connect 13 0 3 0;
#X connect 14 0 11 0;
#X restore 431 255 pd expr and value;
#X obj 229 228 else/pi 2;
#X text 201 301 - calculate or output the last calculated value;
#X obj 229 256 else/display;
#X text 62 131 [pi] outputs the result when loading a patch and also when receiving a bang. Since it's an abstraction with [loadbang] \, it load output comes before other [loadbang] objects in the patch.;
#X text 167 370 1) float (optional) - multiplier (default 1);
#X text 80 229 click (same as bang) -->;
#X text 167 390 2) symbol - variable name (default nonw);
#X text 322 197 multiplier;
#X connect 6 0 29 0;
#X connect 18 0 29 1;
#X connect 29 0 31 0;
