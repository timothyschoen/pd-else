#N canvas 577 38 560 469 10;
#X obj 2 4 cnv 15 301 42 empty empty del~ 20 20 2 37 #e0e0e0 #000000 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1;
#X restore 2 4 graph;
#X obj 23 41 cnv 4 4 4 empty empty Delay 0 28 2 18 #e0e0e0 #000000 0;
#X obj 77 41 cnv 4 4 4 empty empty line 0 28 2 18 #e0e0e0 #000000 0;
#X obj 306 5 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc 0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 305 4 pd;
#X obj 345 12 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc 0;
#X obj 458 12 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 478 12 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 515 12 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 464 27 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 502 27 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 325 137 hsl 128 15 0 1000 0 0 empty empty empty -2 -8 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 322 254 else/out~;
#X obj 80 179 else/out~;
#X floatatom 322 164 6 0 0 0 - - - 0;
#X obj 322 193 else/f2s~ 200;
#N canvas 466 38 561 610 del~ 0;
#X obj 4 378 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 454 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 3 520 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000 0;
#X obj 3 584 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020 0;
#X obj 106 385 cnv 17 3 60 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 45 564 2) float;
#X obj 4 489 cnv 3 550 3 empty empty flags 8 12 0 13 #dcdcdc #000000 0;
#X text 172 399 clear;
#X text 209 399 - clears delay line, f 37;
#X text 118 429 freeze <float>;
#X text 130 414 size <float>;
#X text 209 414 - changes the delay size, f 37;
#X text 209 429 - non zero freezes \, zero unfreezes, f 37;
#X text 166 384 signal;
#X text 209 384 - signal input into the delay line, f 37;
#X obj 83 313 else/out~;
#X msg 138 164 clear;
#X text 178 163 clears delay line;
#X msg 147 217 size \$1;
#X floatatom 147 193 5 0 0 0 - - - 0;
#X obj 213 216 tgl 15 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X msg 213 240 freeze \$1;
#X obj 2 3 cnv 15 301 42 empty \$0-cnv del~\ in 20 20 2 37 #e0e0e0 #000000 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1;
#X restore 2 3 graph;
#X obj 23 40 cnv 4 4 4 empty empty Delay 0 28 2 18 #e0e0e0 #000000 0;
#X obj 77 40 cnv 4 4 4 empty empty line 0 28 2 18 #e0e0e0 #000000 0;
#X obj 306 4 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc 0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 305 3 pd;
#X obj 345 11 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc 0;
#X obj 458 11 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 478 11 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 515 11 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 464 26 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 502 26 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 116 40 cnv 4 4 4 empty empty input 0 28 2 18 #e0e0e0 #000000 0;
#X text 308 274 The -samps flag sets time value to samples instead of ms (default), f 34;
#X text 183 193 clears and resizes the delay line (in samples in this case);
#X text 234 216 freeze (stop updating values into the delay line);
#X text 94 525 (besides the first optional argument that defines "in" or "out", f 64;
#X text 39 548 1) symbol;
#X text 102 563 - delay size in ms or samples (default 1 sample);
#X text 128 495 -samps;
#X text 170 496 - sets time value to samples (default is ms);
#X obj 104 462 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 166 463 signal;
#X text 209 463 - dummy outlet to force order of execution;
#X obj 114 279 else/del~ in -samps \$0-y 44100;
#X text 102 548 - sets delay line name (optional: default internal name relative to patch), f 74;
#X text 73 88 Define a delay line and write to it. If neither "in" or "out" is specified as the first argument \, the default it [del~ in]., f 64;
#X text 236 315 The second argument also defines the maximum delay amount a corresponding [del~ out] has., f 44;
#X obj 114 135 else/player~ bubul.mp3 1 1;
#X connect 16 0 46 0;
#X connect 18 0 46 0;
#X connect 19 0 18 0;
#X connect 20 0 21 0;
#X connect 21 0 46 0;
#X connect 50 0 15 0;
#X connect 50 0 46 0;
#X restore 293 392 pd del~ in;
#X text 364 164 delay time (ms by default);
#X text 203 238 write to delay line, f 11;
#X text 442 216 read from delay line, f 10;
#X text 96 362 For more information on messages and inlet/outlet for both "in" and "out" \, see:, f 50;
#N canvas 717 64 562 508 del~ 0;
#X obj 4 308 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 344 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 3 413 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000 0;
#X obj 3 479 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020 0;
#X obj 104 317 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 4 386 cnv 3 550 3 empty empty flags 8 12 0 13 #dcdcdc #000000 0;
#X text 209 318 - signal input into the delay line, f 37;
#X obj 2 3 cnv 15 301 42 empty \$0-cnv2 del~\ out 20 20 2 37 #e0e0e0 #000000 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1;
#X restore 2 3 graph;
#X obj 23 40 cnv 4 4 4 empty empty Delay 0 28 2 18 #e0e0e0 #000000 0;
#X obj 77 40 cnv 4 4 4 empty empty line 0 28 2 18 #e0e0e0 #000000 0;
#X obj 306 4 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc 0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 305 3 pd;
#X obj 345 11 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc 0;
#X obj 458 11 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 478 11 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 515 11 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 464 26 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 502 26 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 116 40 cnv 4 4 4 empty empty output 0 28 2 18 #e0e0e0 #000000 0;
#X text 294 208 The -samps flag sets time value to samples instead of ms (default), f 34;
#X text 94 418 (besides the first optional argument that defines "in" or "out", f 64;
#X text 128 392 -samps;
#X text 170 393 - sets time value to samples (default is ms);
#X obj 96 245 else/out~;
#X obj 99 132 hsl 128 15 0 44100 0 0 empty empty empty -2 -8 0 10 #dcdcdc #000000 #000000 0 1;
#X floatatom 96 153 6 0 0 0 - - - 0;
#X obj 96 176 else/f2s~ 200;
#X text 138 153 delay time (in samples in this case);
#X text 130 318 float/signal;
#X obj 104 355 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 166 356 signal;
#X text 209 356 - output of a delay line, f 37;
#N canvas 799 137 492 462 order 0;
#X obj 102 362 -~;
#X obj 103 162 bng 19 250 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000;
#X obj 103 194 else/ramp~;
#X text 174 403 matches delay in samples;
#X obj 103 136 else/tempo 10000 -ms -on;
#N canvas 707 219 468 219 out 0;
#X obj 129 147 outlet~;
#X obj 94 28 inlet~;
#X obj 129 69 inlet~;
#X text 145 27 dummy intlet to force order of execution;
#X obj 129 110 del~ out -samps \$0-order;
#X connect 2 0 4 0;
#X connect 4 0 0 0;
#X restore 142 321 pd out;
#X floatatom 175 294 5 0 64 0 - - - 0;
#X text 213 292 delay in samples;
#X text 48 16 We can force the order of execution as this example shows. If we don't do this \, it's hard to guarantee we can read from the delay line without having a minimum delay of a block size. This is the same issue with [delwrite~] and [delread~] objects and other objects like [send~]/[receive~]. But the [del~] object provides another structure \, because [del~ in] has a dummy outlet to force the order of execution. This way you only need a subpatch to include [del~ out] objects.;
#X obj 142 235 del~ in -samps \$0-order 64;
#X obj 102 402 else/numbox~ 6 12 100 #c0c0c4 #440008 10 0 0 0;
#X obj 142 358 else/numbox~ 6 12 100 #c0c0c4 #440008 10 0 0 0;
#X text 151 257 <-- dummy outlet forces order of execution;
#X text 188 321 <-- open;
#X connect 0 0 10 0;
#X connect 1 0 2 0;
#X connect 2 0 0 0;
#X connect 2 0 9 0;
#X connect 4 0 1 0;
#X connect 5 0 0 1;
#X connect 5 0 11 0;
#X connect 6 0 5 1;
#X connect 9 0 5 0;
#X restore 441 277 pd order;
#X text 261 258 Note that the same "order of execution" issue also applies to [del~]:, f 39;
#X obj 96 214 else/del~ out -samps \$0-y 44100;
#X text 34 457 2) float;
#X text 28 441 1) symbol;
#X text 91 441 - sets delay line name (optional: default internal name relative to patch), f 74;
#X text 77 86 Read from a delay line. It uses a cubic (4 point) interpolation called spline and considers the buffer to be circular (so index 0 to table size is accepted)., f 70;
#X text 91 456 - delay time in ms or samples (default 0);
#X connect 25 0 26 0;
#X connect 26 0 27 0;
#X connect 27 0 35 0;
#X connect 35 0 24 0;
#X restore 372 392 pd del~ out;
#X obj 3 442 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020 0;
#X obj 7 316 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000 0;
#X text 109 331 1) symbol;
#X text 170 331 - "in" (default) or "out" to define functionality;
#X text 266 417 Open both to see how they interact;
#X text 19 290 see also:;
#X obj 61 244 else/del~ in \$0-x 1000;
#X obj 322 221 else/del~ out \$0-x;
#X obj 85 291 else/ffdelay~;
#X obj 176 290 else/fbdelay~;
#X text 50 85 [del~] sets and writes to a delay line if created as [del~ in] (default) and reads from it (with interpolation) if created as [del~ out]. It's quite similar to [delread~]/[delread4~] \, but with more features., f 72;
#X obj 61 149 else/player~ bubul.mp3 1 1;
#X connect 12 0 15 0;
#X connect 15 0 16 0;
#X connect 16 0 30 0;
#X connect 30 0 13 0;
#X connect 34 0 14 0;
#X connect 34 0 29 0;
