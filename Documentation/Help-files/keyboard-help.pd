#N canvas 442 38 561 695 10;
#X obj 5 259 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 5 528 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 5 587 cnv 3 550 3 empty empty flags 8 12 0 13 #dcdcdc #000000 0;
#X obj 5 667 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020 0;
#X obj 99 266 cnv 17 3 235 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 110 41 cnv 4 4 4 empty empty GUI 0 28 2 18 #e0e0e0 #000000 0;
#X obj 26 41 cnv 4 4 4 empty empty Keyboard 0 28 2 18 #e0e0e0 #000000 0;
#X obj 3 4 cnv 15 301 42 empty empty keyboard 20 20 2 37 #e0e0e0 #000000 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1;
#X restore 3 4 graph;
#X text 189 264 float;
#X text 189 506 float;
#X text 229 264 - MIDI Note value, f 47;
#X text 229 278 - MIDI Note and Velocity values, f 47;
#X text 153 278 list <f \, f>;
#X obj 99 507 cnv 17 3 17 empty empty 1 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 98 536 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 232 536 - MIDI Note and Velocity values;
#X text 153 536 list <f \, f>;
#X obj 307 5 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc 0;
#X obj 346 12 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc 0;
#X obj 459 12 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 479 12 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 516 12 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 465 27 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 503 27 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 252 42 1;
#X restore 306 4 graph;
#X text 229 376 - set key width, f 47;
#X text 141 376 width <float>;
#X text 135 390 height <float>;
#X text 153 404 oct <float>;
#X text 229 404 - transpose octaves up or down, f 47;
#X text 147 418 8ves <float>;
#X text 229 418 - set number of octaves, f 47;
#X text 147 432 lowc <float>;
#X text 229 506 - velocity of MIDI note value, f 47;
#X text 135 460 toggle <float>;
#X obj 150 155 else/keyboard 17 64 2 3 0 0 empty empty;
#X text 189 320 flush;
#X text 229 390 - set keyboard height, f 47;
#X text 229 432 - set number of lowest C (e.g. 4 = C4), f 47;
#X text 229 460 - sets toggle mode on <1> of off <0>, f 47;
#X text 229 320 - flushes hanging Note On keys, f 47;
#X text 147 446 norm <float>;
#X text 229 446 - set velocity normalization, f 47;
#X text 207 230 MIDI Note / Velocity;
#X obj 288 126 makenote 100 500;
#N canvas 729 72 482 473 normalize 0;
#X obj 47 164 else/keyboard 19 80 3 3 0 0 empty empty;
#X msg 47 104 norm \$1;
#X floatatom 47 68 5 0 127 0 - - - 0;
#X obj 47 261 else/display 7;
#X text 127 22 Note that the velocity depends on where you click on the vertical axis. The lower you click \, the higher the velocity is., f 48;
#X obj 282 283 catch~ \$0-norm;
#X text 127 62 Nonetheless \, you can set a normalized velocity value for all clicks with the 'norm' message. It takes values from 0 to 127 \, so if you set to a value different than zero \, that value is set for all generated note on messages. but if you set it to '0' \, then the there's no normalization and velocity depends where you click., f 48;
#X obj 290 351 else/out~;
#X obj 282 312 else/plate.rev~ 50 0.6 0.25 0.8 0.8, f 18;
#X obj 47 300 else/voices 4 1;
#N canvas 870 145 477 340 voice 0;
#X obj 125 33 inlet;
#X obj 398 171 tgl 40 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 125 186 *~;
#X obj 128 247 *~;
#X obj 398 223 switch~;
#X obj 125 95 mtof;
#X obj 262 208 vsl 20 100 0 1 0 0 xxx xx empty 0 -9 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 38 185 else/sine~;
#X obj 125 136 else/sine~;
#X obj 125 65 unpack float float;
#X obj 213 136 else/adsr~ 500 200 0.5 1000;
#X obj 262 179 else/sig2float~;
#X obj 39 144 * 1.497;
#X obj 128 278 throw~ \$0-norm;
#X connect 0 0 9 0;
#X connect 1 0 4 0;
#X connect 2 0 7 2;
#X connect 3 0 13 0;
#X connect 5 0 8 0;
#X connect 5 0 12 0;
#X connect 7 0 3 0;
#X connect 8 0 2 0;
#X connect 9 0 5 0;
#X connect 9 1 10 0;
#X connect 10 0 2 1;
#X connect 10 0 3 1;
#X connect 10 0 11 0;
#X connect 10 1 1 0;
#X connect 11 0 6 0;
#X connect 12 0 7 0;
#X restore 47 438 pd voice;
#N canvas 870 145 477 340 voice 0;
#X obj 125 33 inlet;
#X obj 398 171 tgl 40 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 125 186 *~;
#X obj 128 247 *~;
#X obj 398 223 switch~;
#X obj 125 95 mtof;
#X obj 262 208 vsl 20 100 0 1 0 0 xxx xx empty 0 -9 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 38 185 else/sine~;
#X obj 125 136 else/sine~;
#X obj 125 65 unpack float float;
#X obj 213 136 else/adsr~ 500 200 0.5 1000;
#X obj 262 179 else/sig2float~;
#X obj 39 144 * 1.497;
#X obj 128 278 throw~ \$0-norm;
#X connect 0 0 9 0;
#X connect 1 0 4 0;
#X connect 2 0 7 2;
#X connect 3 0 13 0;
#X connect 5 0 8 0;
#X connect 5 0 12 0;
#X connect 7 0 3 0;
#X connect 8 0 2 0;
#X connect 9 0 5 0;
#X connect 9 1 10 0;
#X connect 10 0 2 1;
#X connect 10 0 3 1;
#X connect 10 0 11 0;
#X connect 10 1 1 0;
#X connect 11 0 6 0;
#X connect 12 0 7 0;
#X restore 65 414 pd voice;
#N canvas 870 145 477 340 voice 0;
#X obj 125 33 inlet;
#X obj 398 171 tgl 40 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 125 186 *~;
#X obj 128 247 *~;
#X obj 398 223 switch~;
#X obj 125 95 mtof;
#X obj 262 208 vsl 20 100 0 1 0 0 xxx xx empty 0 -9 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 38 185 else/sine~;
#X obj 125 136 else/sine~;
#X obj 125 65 unpack float float;
#X obj 213 136 else/adsr~ 500 200 0.5 1000;
#X obj 262 179 else/sig2float~;
#X obj 39 144 * 1.497;
#X obj 128 278 throw~ \$0-norm;
#X connect 0 0 9 0;
#X connect 1 0 4 0;
#X connect 2 0 7 2;
#X connect 3 0 13 0;
#X connect 5 0 8 0;
#X connect 5 0 12 0;
#X connect 7 0 3 0;
#X connect 8 0 2 0;
#X connect 9 0 5 0;
#X connect 9 1 10 0;
#X connect 10 0 2 1;
#X connect 10 0 3 1;
#X connect 10 0 11 0;
#X connect 10 1 1 0;
#X connect 11 0 6 0;
#X connect 12 0 7 0;
#X restore 84 388 pd voice;
#N canvas 870 145 477 340 voice 0;
#X obj 125 33 inlet;
#X obj 398 171 tgl 40 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 125 186 *~;
#X obj 128 247 *~;
#X obj 398 223 switch~;
#X obj 125 95 mtof;
#X obj 262 208 vsl 20 100 0 1 0 0 xxx xx empty 0 -9 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 38 185 else/sine~;
#X obj 125 136 else/sine~;
#X obj 125 65 unpack float float;
#X obj 213 136 else/adsr~ 500 200 0.5 1000;
#X obj 262 179 else/sig2float~;
#X obj 39 144 * 1.497;
#X obj 128 278 throw~ \$0-norm;
#X connect 0 0 9 0;
#X connect 1 0 4 0;
#X connect 2 0 7 2;
#X connect 3 0 13 0;
#X connect 5 0 8 0;
#X connect 5 0 12 0;
#X connect 7 0 3 0;
#X connect 8 0 2 0;
#X connect 9 0 5 0;
#X connect 9 1 10 0;
#X connect 10 0 2 1;
#X connect 10 0 3 1;
#X connect 10 0 11 0;
#X connect 10 1 1 0;
#X connect 11 0 6 0;
#X connect 12 0 7 0;
#X restore 103 364 pd voice;
#X obj 47 331 route 0 1 2 3;
#X connect 0 0 3 0;
#X connect 1 0 0 0;
#X connect 2 0 1 0;
#X connect 3 0 9 0;
#X connect 5 0 8 0;
#X connect 8 0 7 0;
#X connect 8 1 7 1;
#X connect 9 0 14 0;
#X connect 14 0 10 0;
#X connect 14 1 11 0;
#X connect 14 2 12 0;
#X connect 14 3 13 0;
#X restore 466 182 pd normalize;
#N canvas 645 38 517 652 send/receive 0;
#X text 48 22 You can set send/receive names with the -send/-receive flags or the 'send'/'receive' messages - make sure to escape "\$0" properly with backslashes (as in: "\\\$0"). Setting these to 'empty' removes the send/receive symbols., f 67;
#X obj 51 99 else/keyboard 19 80 3 3 0 0 empty empty;
#X obj 54 353 else/keyboard 19 80 3 3 0 0 \$0-keyboard-snd \$0-keyboard-rcv;
#X msg 66 326 send empty \, receive empty;
#X obj 54 299 initmess send \\\$0-keyboard-snd \, receive \\\$0-keyboard-rcv;
#X obj 51 225 s \$0-keyboard-rcv;
#X obj 58 464 r \$0-keyboard-snd;
#X obj 58 493 else/display;
#X text 158 190 Note you can send a list to the keyboard object;
#X obj 51 193 else/display;
#X text 172 209 This way you don't need to use both inlets and just rely on the built in receive symbol, f 45;
#X text 50 550 Note that inside the properties window you don't need to escape the special characters of "$" and also spaces \, both of which are allowed. Also note that other special characters are not allowed \, such as braces \, backslashes \, commas and semicolons., f 69;
#X text 204 453 Note that when you set a receive or send symbol \, the corresponding inlets/outlet does not get drawn when you're in edit mode. This is an indicative that the object has a send or receive symbol., f 41;
#X connect 1 0 9 0;
#X connect 3 0 2 0;
#X connect 4 0 2 0;
#X connect 6 0 7 0;
#X connect 9 0 5 0;
#X restore 448 202 pd send/receive;
#X text 141 474 send <symbol>;
#X text 229 474 - sets send symbol, f 47;
#X text 123 488 receive <symbol>;
#X text 229 488 - sets receive symbol, f 47;
#X text 76 593 -width <float>: width in pixels (default 17) | -height <float>: height in pixels (default 80) | -oct <float>: number of octaves (default 4) | -lowc <float>: number of lowest C (default 3 - that is "C3") | -tgl sets to toggle mode (default non toggle) | -norm <float>: velocity normalization value (default 0) | -send <symbol>: sets send symbol (default 'empty') | -receive <symbol>: sets receive symbol (default 'empty') |, f 77;
#X obj 4 560 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000 0;
#X text 239 567 (none);
#N canvas 672 109 566 510 more 0;
#X text 39 336 For instance \, below \, we have \$0 used in the send symbol. Using something like "\$1" is also possible and useful if you're using the object in an abstraction \, then you can load a value passed as an argument into a parameter., f 80;
#X obj 391 420 r \$0-snd;
#X obj 391 445 else/display;
#X obj 120 402 else/keyboard 17 80 2 3 0 0 \$0-snd empty;
#X obj 48 104 else/keyboard 17 80 4 3 0 0 empty empty;
#X text 119 21 This is the default [keyboard] object. Please get into and out of edit mode so you can see how the [keyboard] object creates two inlets and an outlet when you're in edit mode. The bluish "C" note indicates it is C4 (Midi note "60")., f 62;
#X obj 48 194 else/display;
#X text 39 239 Note that when you set a receive or send symbol \, the corresponding inlets/outlet do not get drawn when you're in edit mode. This is an indicative that the object has a send or receive symbol., f 80;
#X msg 48 49 oct 1;
#X msg 58 75 oct -1;
#X text 120 74 <-- Use the 'oct' message to go octaves up/down;
#X text 39 283 Also note that all the parameters that you can set by inserting a value into a field in the properties window can also load dollar sign arguments (\$0 \, \$1 \, \$2 \, and so on). Namely \, these parameters are: key width \, height \, normalization \, and send/receive symbols., f 80;
#X connect 1 0 2 0;
#X connect 4 0 6 0;
#X connect 8 0 4 0;
#X connect 9 0 4 0;
#X restore 449 104 pd more details;
#X obj 288 104 else/rand.i 48 72;
#X text 14 207 see also:;
#X text 165 292 on <list>;
#X text 229 292 - list MIDI Notes to be on with velocity of 127;
#X text 159 306 off <list>;
#X text 229 306 - list MIDI Notes to be off with velocity of 0, f 47;
#X text 111 334 set <float \, float>;
#X text 229 334 - set note (pitch/velocity) without output, f 47;
#N canvas 474 82 640 304 keyboard-split 0;
#X obj 75 40 else/keyboard 17 80 4 2 0 0 empty empty;
#X obj 75 156 else/spread 40 60 72;
#X listbox 75 256 9 0 0 0 - - - 0;
#X listbox 114 231 9 0 0 0 - - - 0;
#X listbox 153 206 9 0 0 0 - - - 0;
#X listbox 192 181 9 0 0 0 - - - 0;
#X text 275 175 This example uses [spread] to split notes from [keyboard] so you can route them to different synths., f 46;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 1 1 3 0;
#X connect 1 2 4 0;
#X connect 1 3 5 0;
#X restore 436 222 pd keyboard-split;
#X obj 288 79 bng 19 250 50 0 empty empty empty 0 -8 0 10 #dfdfdf #000000 #000000;
#X text 50 153 Right click for properties --->, f 15;
#X obj 14 227 else/note2midi;
#X text 41 91 [keyboard] takes MIDI notes and also generates them via clicking., f 27;
#X listbox 150 230 7 0 0 0 - - - 0;
#N canvas 674 92 553 608 basic 0;
#X obj 67 78 tgl 20 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 67 108 metro 800;
#X obj 269 337 catch~ \$0-voice;
#X obj 301 472 clone;
#X text 232 485 see also:;
#X text 185 76 Try clicking and dragging \, it also works and slides through chromatically!, f 52;
#X obj 276 402 else/out~;
#X obj 67 237 else/keyboard 19 80 3 2 0 0 empty empty;
#X obj 67 133 else/rand.i 36 72;
#X obj 67 328 else/display 7;
#X obj 269 363 else/plate.rev~ 50 0.6 0.25 0.8 0.8, f 18;
#X msg 209 150 set 48 127;
#X msg 209 171 set 48 0;
#X text 285 145 set message does not output values, f 27;
#X text 128 541 hint: you can also create a list of <note \, velocity> and send to the left inlet. In the same way as other pd object \, this distributes to both inlets.;
#X text 64 8 In this example [keyboard] displays randomly generated notes and driving 4 voices. Also see that each voice subpatch has [adsr~]'s status outlet to control the DSP status for that subpatch - open and check it. You should also try pd's [clone] object for managing polyphonic synths as well as [synth~] from ELSE., f 72;
#X obj 301 493 else/synth~;
#X obj 67 185 pack;
#X msg 217 202 flush;
#X text 258 203 flushes hanging Note On keys;
#X obj 67 158 makenote 100 2500;
#X obj 67 362 else/voices 4 1;
#N canvas 870 145 477 340 voice 0;
#X obj 125 33 inlet;
#X obj 398 171 tgl 40 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 125 186 *~;
#X obj 128 247 *~;
#X obj 398 223 switch~;
#X obj 125 95 mtof;
#X obj 262 208 vsl 20 100 0 1 0 0 xxx xx empty 0 -9 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 38 185 else/sine~;
#X obj 125 136 else/sine~;
#X obj 125 65 unpack float float;
#X obj 213 136 else/adsr~ 500 200 0.5 1000;
#X obj 262 179 else/sig2float~;
#X obj 39 144 * 1.497;
#X obj 128 278 throw~ \$0-voice;
#X connect 0 0 9 0;
#X connect 1 0 4 0;
#X connect 2 0 7 2;
#X connect 3 0 13 0;
#X connect 5 0 8 0;
#X connect 5 0 12 0;
#X connect 7 0 3 0;
#X connect 8 0 2 0;
#X connect 9 0 5 0;
#X connect 9 1 10 0;
#X connect 10 0 2 1;
#X connect 10 0 3 1;
#X connect 10 0 11 0;
#X connect 10 1 1 0;
#X connect 11 0 6 0;
#X connect 12 0 7 0;
#X restore 67 500 pd voice;
#X obj 67 393 route 0 1 2 3;
#N canvas 870 145 477 340 voice 0;
#X obj 125 33 inlet;
#X obj 398 171 tgl 40 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 125 186 *~;
#X obj 128 247 *~;
#X obj 398 223 switch~;
#X obj 125 95 mtof;
#X obj 262 208 vsl 20 100 0 1 0 0 xxx xx empty 0 -9 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 38 185 else/sine~;
#X obj 125 136 else/sine~;
#X obj 125 65 unpack float float;
#X obj 213 136 else/adsr~ 500 200 0.5 1000;
#X obj 262 179 else/sig2float~;
#X obj 39 144 * 1.497;
#X obj 128 278 throw~ \$0-voice;
#X connect 0 0 9 0;
#X connect 1 0 4 0;
#X connect 2 0 7 2;
#X connect 3 0 13 0;
#X connect 5 0 8 0;
#X connect 5 0 12 0;
#X connect 7 0 3 0;
#X connect 8 0 2 0;
#X connect 9 0 5 0;
#X connect 9 1 10 0;
#X connect 10 0 2 1;
#X connect 10 0 3 1;
#X connect 10 0 11 0;
#X connect 10 1 1 0;
#X connect 11 0 6 0;
#X connect 12 0 7 0;
#X restore 85 476 pd voice;
#N canvas 870 145 477 340 voice 0;
#X obj 125 33 inlet;
#X obj 398 171 tgl 40 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 125 186 *~;
#X obj 128 247 *~;
#X obj 398 223 switch~;
#X obj 125 95 mtof;
#X obj 262 208 vsl 20 100 0 1 0 0 xxx xx empty 0 -9 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 38 185 else/sine~;
#X obj 125 136 else/sine~;
#X obj 125 65 unpack float float;
#X obj 213 136 else/adsr~ 500 200 0.5 1000;
#X obj 262 179 else/sig2float~;
#X obj 39 144 * 1.497;
#X obj 128 278 throw~ \$0-voice;
#X connect 0 0 9 0;
#X connect 1 0 4 0;
#X connect 2 0 7 2;
#X connect 3 0 13 0;
#X connect 5 0 8 0;
#X connect 5 0 12 0;
#X connect 7 0 3 0;
#X connect 8 0 2 0;
#X connect 9 0 5 0;
#X connect 9 1 10 0;
#X connect 10 0 2 1;
#X connect 10 0 3 1;
#X connect 10 0 11 0;
#X connect 10 1 1 0;
#X connect 11 0 6 0;
#X connect 12 0 7 0;
#X restore 104 450 pd voice;
#N canvas 870 145 477 340 voice 0;
#X obj 125 33 inlet;
#X obj 398 171 tgl 40 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 125 186 *~;
#X obj 128 247 *~;
#X obj 398 223 switch~;
#X obj 125 95 mtof;
#X obj 262 208 vsl 20 100 0 1 0 0 xxx xx empty 0 -9 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 38 185 else/sine~;
#X obj 125 136 else/sine~;
#X obj 125 65 unpack float float;
#X obj 213 136 else/adsr~ 500 200 0.5 1000;
#X obj 262 179 else/sig2float~;
#X obj 39 144 * 1.497;
#X obj 128 278 throw~ \$0-voice;
#X connect 0 0 9 0;
#X connect 1 0 4 0;
#X connect 2 0 7 2;
#X connect 3 0 13 0;
#X connect 5 0 8 0;
#X connect 5 0 12 0;
#X connect 7 0 3 0;
#X connect 8 0 2 0;
#X connect 9 0 5 0;
#X connect 9 1 10 0;
#X connect 10 0 2 1;
#X connect 10 0 3 1;
#X connect 10 0 11 0;
#X connect 10 1 1 0;
#X connect 11 0 6 0;
#X connect 12 0 7 0;
#X restore 123 426 pd voice;
#X connect 0 0 1 0;
#X connect 1 0 8 0;
#X connect 2 0 10 0;
#X connect 7 0 9 0;
#X connect 8 0 20 0;
#X connect 9 0 21 0;
#X connect 10 0 6 0;
#X connect 10 1 6 1;
#X connect 11 0 7 0;
#X connect 12 0 7 0;
#X connect 17 0 7 0;
#X connect 18 0 7 0;
#X connect 20 0 17 0;
#X connect 20 1 17 1;
#X connect 21 0 23 0;
#X connect 23 0 22 0;
#X connect 23 1 24 0;
#X connect 23 2 25 0;
#X connect 23 3 26 0;
#X restore 442 123 pd basic example;
#N canvas 660 91 506 579 toggle/shift 0;
#X obj 48 175 else/keyboard 19 80 3 3 1 0 empty empty;
#X text 167 63 In toggle mode \, you need to click on a note to set it On or Off. Dragging doesn't work., f 43;
#X msg 48 94 toggle \$1;
#X obj 48 66 tgl 15 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 48 34 loadbang;
#X msg 81 135 flush;
#X obj 273 304 catch~ \$0-tgl;
#X text 167 98 When in toggle mode \, you can flush hanging Note On messages. Note that the flush message also flushes hanging notes from messages from the inlets., f 43;
#X obj 48 266 else/display 7;
#X obj 280 372 else/out~;
#X obj 273 333 else/plate.rev~ 50 0.6 0.25 0.8 0.8, f 18;
#X text 62 537 Press shift and test this above.;
#X obj 48 300 else/voices 4 1;
#N canvas 870 145 477 340 voice 0;
#X obj 125 33 inlet;
#X obj 398 171 tgl 40 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 125 186 *~;
#X obj 128 247 *~;
#X obj 398 223 switch~;
#X obj 125 95 mtof;
#X obj 262 208 vsl 20 100 0 1 0 0 xxx xx empty 0 -9 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 38 185 else/sine~;
#X obj 125 136 else/sine~;
#X obj 125 65 unpack float float;
#X obj 213 136 else/adsr~ 500 200 0.5 1000;
#X obj 262 179 else/sig2float~;
#X obj 39 144 * 1.497;
#X obj 128 278 throw~ \$0-tgl;
#X connect 0 0 9 0;
#X connect 1 0 4 0;
#X connect 2 0 7 2;
#X connect 3 0 13 0;
#X connect 5 0 8 0;
#X connect 5 0 12 0;
#X connect 7 0 3 0;
#X connect 8 0 2 0;
#X connect 9 0 5 0;
#X connect 9 1 10 0;
#X connect 10 0 2 1;
#X connect 10 0 3 1;
#X connect 10 0 11 0;
#X connect 10 1 1 0;
#X connect 11 0 6 0;
#X connect 12 0 7 0;
#X restore 48 438 pd voice;
#X obj 48 331 route 0 1 2 3;
#N canvas 870 145 477 340 voice 0;
#X obj 125 33 inlet;
#X obj 398 171 tgl 40 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 125 186 *~;
#X obj 128 247 *~;
#X obj 398 223 switch~;
#X obj 125 95 mtof;
#X obj 262 208 vsl 20 100 0 1 0 0 xxx xx empty 0 -9 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 38 185 else/sine~;
#X obj 125 136 else/sine~;
#X obj 125 65 unpack float float;
#X obj 213 136 else/adsr~ 500 200 0.5 1000;
#X obj 262 179 else/sig2float~;
#X obj 39 144 * 1.497;
#X obj 128 278 throw~ \$0-tgl;
#X connect 0 0 9 0;
#X connect 1 0 4 0;
#X connect 2 0 7 2;
#X connect 3 0 13 0;
#X connect 5 0 8 0;
#X connect 5 0 12 0;
#X connect 7 0 3 0;
#X connect 8 0 2 0;
#X connect 9 0 5 0;
#X connect 9 1 10 0;
#X connect 10 0 2 1;
#X connect 10 0 3 1;
#X connect 10 0 11 0;
#X connect 10 1 1 0;
#X connect 11 0 6 0;
#X connect 12 0 7 0;
#X restore 66 414 pd voice;
#N canvas 870 145 477 340 voice 0;
#X obj 125 33 inlet;
#X obj 398 171 tgl 40 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 125 186 *~;
#X obj 128 247 *~;
#X obj 398 223 switch~;
#X obj 125 95 mtof;
#X obj 262 208 vsl 20 100 0 1 0 0 xxx xx empty 0 -9 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 38 185 else/sine~;
#X obj 125 136 else/sine~;
#X obj 125 65 unpack float float;
#X obj 213 136 else/adsr~ 500 200 0.5 1000;
#X obj 262 179 else/sig2float~;
#X obj 39 144 * 1.497;
#X obj 128 278 throw~ \$0-tgl;
#X connect 0 0 9 0;
#X connect 1 0 4 0;
#X connect 2 0 7 2;
#X connect 3 0 13 0;
#X connect 5 0 8 0;
#X connect 5 0 12 0;
#X connect 7 0 3 0;
#X connect 8 0 2 0;
#X connect 9 0 5 0;
#X connect 9 1 10 0;
#X connect 10 0 2 1;
#X connect 10 0 3 1;
#X connect 10 0 11 0;
#X connect 10 1 1 0;
#X connect 11 0 6 0;
#X connect 12 0 7 0;
#X restore 85 388 pd voice;
#N canvas 870 145 477 340 voice 0;
#X obj 125 33 inlet;
#X obj 398 171 tgl 40 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 125 186 *~;
#X obj 128 247 *~;
#X obj 398 223 switch~;
#X obj 125 95 mtof;
#X obj 262 208 vsl 20 100 0 1 0 0 xxx xx empty 0 -9 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 38 185 else/sine~;
#X obj 125 136 else/sine~;
#X obj 125 65 unpack float float;
#X obj 213 136 else/adsr~ 500 200 0.5 1000;
#X obj 262 179 else/sig2float~;
#X obj 39 144 * 1.497;
#X obj 128 278 throw~ \$0-tgl;
#X connect 0 0 9 0;
#X connect 1 0 4 0;
#X connect 2 0 7 2;
#X connect 3 0 13 0;
#X connect 5 0 8 0;
#X connect 5 0 12 0;
#X connect 7 0 3 0;
#X connect 8 0 2 0;
#X connect 9 0 5 0;
#X connect 9 1 10 0;
#X connect 10 0 2 1;
#X connect 10 0 3 1;
#X connect 10 0 11 0;
#X connect 10 1 1 0;
#X connect 11 0 6 0;
#X connect 12 0 7 0;
#X restore 104 364 pd voice;
#X text 61 481 In regular mode ("non toggle" mode) \, you can also toggle notes by pressing the shift key when you click on the notes to set them on and off. This way you can have the two options. The flush message also flushes hanging notes from shift clicking., f 65;
#X connect 0 0 8 0;
#X connect 2 0 0 0;
#X connect 3 0 2 0;
#X connect 4 0 3 0;
#X connect 5 0 0 0;
#X connect 6 0 10 0;
#X connect 8 0 12 0;
#X connect 10 0 9 0;
#X connect 10 1 9 1;
#X connect 12 0 14 0;
#X connect 14 0 13 0;
#X connect 14 1 15 0;
#X connect 14 2 16 0;
#X connect 14 3 17 0;
#X restore 448 142 pd toggle/shift;
#N canvas 545 38 527 524 on/off/play/show 0;
#X obj 60 351 else/keyboard 17 80 3 3 1 0 empty empty;
#X msg 35 119 on 55 65 70 74 77;
#X msg 71 177 off 55 70 74;
#X msg 81 197 off 65 77;
#X text 36 31 The 'on' message expects a list of MIDI pitches that are set as note on messages with a velocity of 127 \, while 'off' send note of messages for its list of pitches., f 69;
#X text 36 72 If you're on toggle mode you can click on the notes that are on to set them off. If not in toggle mode you can use shift+click instead., f 69;
#X obj 60 442 else/display;
#X obj 60 473 print;
#X msg 121 307 show 51 53 66 69;
#X msg 110 284 show 55 58 62 67;
#X msg 92 228 play 55 58 62 67;
#X msg 102 251 play 51 53 66 69;
#X text 238 142 The 'play' message is like the 'on' message preceded by 'flush' \, so it flushes hanging notes and sets the pitches on the given list On., f 35;
#X msg 60 146 flush;
#X text 238 194 The 'play' message is like the 'on' message preceded by 'flush' \, so it flushes hanging notes and sets the pitches on the given list On., f 35;
#X text 238 252 The 'show' message is like 'play' but there's no output., f 35;
#X connect 0 0 6 0;
#X connect 1 0 0 0;
#X connect 2 0 0 0;
#X connect 3 0 0 0;
#X connect 6 0 7 0;
#X connect 8 0 0 0;
#X connect 9 0 0 0;
#X connect 10 0 0 0;
#X connect 11 0 0 0;
#X connect 13 0 0 0;
#X restore 424 162 pd on/off/play/show;
#X text 153 348 play <list>;
#X text 153 362 show <list>;
#X text 229 348 - flush notes and plays a list of Note On keys, f 47;
#X text 229 362 - flush notes and sets a list of Note On keys, f 47;
#X connect 36 0 69 0;
#X connect 45 0 36 0;
#X connect 45 1 36 1;
#X connect 56 0 45 0;
#X connect 65 0 56 0;
