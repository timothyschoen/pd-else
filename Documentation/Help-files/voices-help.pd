#N canvas 356 38 564 677 10;
#X obj 2 3 cnv 15 301 42 empty empty voices 20 20 2 37 #e0e0e0 #000000 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1;
#X restore 2 3 graph;
#X obj 306 4 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc 0;
#X obj 345 11 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc 0;
#X obj 458 11 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 478 11 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 515 11 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 464 26 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 502 26 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 252 42 1;
#X restore 305 3 graph;
#X obj 22 39 cnv 4 4 4 empty empty Polyphonic 0 28 2 18 #e0e0e0 #000000 0;
#X obj 110 39 cnv 4 4 4 empty empty voice 0 28 2 18 #e0e0e0 #000000 0;
#X obj 155 39 cnv 4 4 4 empty empty allocator 0 28 2 18 #e0e0e0 #000000 0;
#X obj 4 645 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020 0;
#X obj 6 314 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 470 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 597 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000 0;
#X obj 102 478 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 103 322 cnv 17 3 115 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 4 504 cnv 3 550 3 empty empty flags 8 12 0 13 #dcdcdc #000000 0;
#X text 179 392 clear - clears memory without output, f 59;
#X text 179 406 flush - clears memory and output hanging notes, f 59;
#X text 161 604 1) float - sets number of voices (default 1);
#X text 161 619 2) float - non zero sets voice stealing (default 0);
#X text 123 529 -rel <float>: sets release time in ms (default 0), f 63;
#X text 143 350 rel <float> - sets a release time in ms, f 65;
#X text 29 224 see also:;
#X obj 192 261 else/display;
#X obj 273 261 else/display;
#X obj 130 174 notein;
#X obj 130 198 pack;
#X obj 192 159 else/keyboard 22 60 1 4 1 0 empty empty;
#X text 184 289 voices;
#X text 269 290 extra voices;
#X text 288 229 <-- 1st argument is the number of voices, f 20;
#N canvas 579 115 503 350 retrigger 0;
#X text 66 30 [voices] has 3 different retrigger modes \, which are ways of handling repeated note on messages. In this context \, a repeated note on is a note that hasn't had a note off message to free its voice allocation. The modes are:, f 56;
#X text 179 189 See examples in the subpatches below:, f 19;
#X text 44 133 - retrig <2>:;
#X text 128 133 don't retrigger and send repeated notes ons to "extra" outlet, f 48;
#X text 128 117 (default) retrigger on the same voice allocation;
#X text 44 102 - retrig <0>:;
#X text 44 117 - retrig <1>:;
#N canvas 513 110 780 471 retrig_2 0;
#X obj 133 341 else/display;
#X obj 256 341 else/display;
#X obj 133 112 else/keyboard 17 80 1 4 0 0 empty empty;
#X obj 268 171 tgl 17 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 2;
#X text 293 170 sustain;
#X obj 133 235 pack float float;
#X obj 133 205 else/suspedal -retrig 3;
#X obj 268 144 loadbang;
#X obj 133 268 else/display;
#X text 279 318 extra;
#X text 39 32 In retrigger mode 2 \, repeated notes go to the extra outlet. Here we have [suspedal] in retrig mode 3 again \, which sends note off for all repeated note ons when the sustain is switched off.;
#X obj 133 311 else/voices -retrig 2;
#X obj 256 387 print extra;
#X obj 133 387 print list;
#X listbox 516 368 9 0 0 0 - - - 12;
#X msg 516 104 60;
#X obj 516 233 else/keyboard 17 80 1 4 0 0 empty empty;
#X obj 516 197 makenote 100 250;
#X obj 458 158 pipe 300;
#X msg 567 104 60;
#X obj 567 144 del 300;
#X msg 567 166 62;
#X text 455 104 repeated;
#X text 597 103 non repeated;
#X listbox 675 368 9 0 0 0 - - - 12;
#X obj 516 334 voices -retrig 2 -rel 250 2;
#X text 423 30 Below we emulate a repeated Note On with [pipe] and we have a release time of 250 ms. The repeated note goes to the extra outlet., f 50;
#X connect 0 0 13 0;
#X connect 1 0 12 0;
#X connect 2 0 6 0;
#X connect 3 0 6 2;
#X connect 5 0 8 0;
#X connect 6 0 5 0;
#X connect 6 1 5 1;
#X connect 7 0 3 0;
#X connect 8 0 11 0;
#X connect 11 0 0 0;
#X connect 11 1 1 0;
#X connect 15 0 17 0;
#X connect 15 0 18 0;
#X connect 16 0 25 0;
#X connect 17 0 16 0;
#X connect 17 1 16 1;
#X connect 18 0 17 0;
#X connect 19 0 17 0;
#X connect 19 0 20 0;
#X connect 20 0 21 0;
#X connect 21 0 17 0;
#X connect 25 0 14 0;
#X connect 25 1 24 0;
#X restore 196 297 pd retrig_2;
#X text 128 102 retrigger on a new voice allocation, f 48;
#N canvas 526 187 689 472 retrig_0 0;
#X obj 67 125 else/keyboard 17 80 1 4 0 0 empty empty;
#X obj 202 184 tgl 17 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 2;
#X text 227 183 sustain;
#X obj 67 342 else/display;
#X obj 214 342 else/display;
#X obj 67 274 else/display;
#X obj 67 248 pack float float;
#X obj 202 157 loadbang;
#X text 232 319 extra;
#X obj 67 218 else/suspedal -retrig 3;
#X obj 214 386 print extra;
#X obj 67 386 print list;
#X listbox 436 368 9 0 0 0 - - - 12;
#X msg 436 104 60;
#X obj 436 233 else/keyboard 17 80 1 4 0 0 empty empty;
#X obj 436 197 makenote 100 250;
#X obj 378 158 pipe 300;
#X msg 487 104 60;
#X obj 487 144 del 300;
#X msg 487 166 62;
#X text 375 104 repeated;
#X text 517 103 non repeated;
#X obj 436 404 print retrig mode 0 -->;
#X text 334 36 Below we emulate a repeated Note On with [pipe] and we have a release time of 250 ms. The repeated note goes to another voice allocation number., f 50;
#X text 30 29 In retrigger mode 0 (default) \, a repeated note goes to another voice allocation number. Here we have [suspedal] in retrigger mode 3 \, which sends Note Off messages for all given Note Ons. You can see that "extra" Note Off messages go to the "extra" outlet., f 45;
#X obj 67 312 else/voices -retrig 0 2 1;
#X obj 436 334 voices -retrig 0 -rel 250 2 1;
#X connect 0 0 9 0;
#X connect 1 0 9 2;
#X connect 3 0 11 0;
#X connect 4 0 10 0;
#X connect 5 0 25 0;
#X connect 6 0 5 0;
#X connect 7 0 1 0;
#X connect 9 0 6 0;
#X connect 9 1 6 1;
#X connect 12 0 22 0;
#X connect 13 0 15 0;
#X connect 13 0 16 0;
#X connect 14 0 26 0;
#X connect 15 0 14 0;
#X connect 15 1 14 1;
#X connect 16 0 15 0;
#X connect 17 0 15 0;
#X connect 17 0 18 0;
#X connect 18 0 19 0;
#X connect 19 0 15 0;
#X connect 25 0 3 0;
#X connect 25 1 4 0;
#X connect 26 0 12 0;
#X restore 196 232 pd retrig_0;
#N canvas 448 140 747 457 retrig_1 0;
#X obj 135 153 else/keyboard 17 80 1 4 0 0 empty empty;
#X obj 270 212 tgl 17 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 2;
#X text 295 211 sustain;
#X obj 135 370 else/display;
#X obj 270 370 else/display;
#X obj 135 302 else/display;
#X obj 135 276 pack float float;
#X obj 270 185 loadbang;
#X obj 135 246 else/suspedal -retrig 1;
#X text 267 397 extra;
#X text 28 83 Here we use [suspedal] in mode "1" \, which does not send a Note Off message and produces repeated Note On messages. It then outputs a single note off message when turned off., f 62;
#X listbox 535 374 9 0 0 0 - - - 12;
#X msg 535 110 60;
#X obj 535 239 else/keyboard 17 80 1 4 0 0 empty empty;
#X obj 535 203 makenote 100 250;
#X obj 477 164 pipe 300;
#X msg 586 110 60;
#X obj 586 150 del 300;
#X msg 586 172 62;
#X text 437 20 Below we emulate a repeated Note On with [pipe] and we have a release time of 250 ms. The repeated note comes before the release time is finished and goes to the same voice allocation number., f 44;
#X text 474 110 repeated;
#X text 616 109 non repeated;
#X obj 535 410 print retrig mode 0 -->;
#X text 28 22 In retrigger mode 1 \, [voices] sends repeated note on messages to the same voice number. One case possible is when you have a Note Off message with a release time. This can also happen without a Note Off message and in this case no Note Off is given prior to the repeated Note On., f 62;
#X obj 135 340 else/voices -retrig 1 2;
#X obj 535 340 voices -retrig 1 -rel 250 2 1;
#X connect 0 0 8 0;
#X connect 1 0 8 2;
#X connect 5 0 24 0;
#X connect 6 0 5 0;
#X connect 7 0 1 0;
#X connect 8 0 6 0;
#X connect 8 1 6 1;
#X connect 11 0 22 0;
#X connect 12 0 14 0;
#X connect 12 0 15 0;
#X connect 13 0 25 0;
#X connect 14 0 13 0;
#X connect 14 1 13 1;
#X connect 15 0 14 0;
#X connect 16 0 14 0;
#X connect 16 0 17 0;
#X connect 17 0 18 0;
#X connect 18 0 14 0;
#X connect 24 0 3 0;
#X connect 24 1 4 0;
#X connect 25 0 11 0;
#X restore 196 263 pd retrig_1;
#X restore 463 249 pd retrigger;
#N canvas 572 133 457 500 release 0;
#X obj 108 135 else/keyboard 17 80 2 4 0 0 empty empty;
#X obj 345 322 else/display;
#X obj 41 153 tgl 17 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1000;
#X obj 41 181 nbx 4 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X msg 41 203 rel \$1;
#X text 41 23 You can set a release time to prevent a note off from freeing a voice allocation. This keeps it allocated for that period of time after a note off is sent., f 65;
#X obj 345 231 tgl 17 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1000;
#X obj 345 259 nbx 4 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X text 41 65 This is useful if you want to wait for a release envelope to finish before using that voice allocation for a new note. Set the release time in ms with the '-rel' flag \, 'rel' message or right inlet., f 65;
#X text 264 258 release time;
#X obj 108 363 route 0 1 2 3, f 40;
#X obj 108 390 else/display;
#X obj 167 390 else/display;
#X obj 226 390 else/display;
#X obj 285 390 else/display;
#X obj 108 291 else/voices -n 4 -rel 1000, f 40;
#X obj 108 322 else/display;
#X text 82 444 Check the retriggering examples for more details.;
#X connect 0 0 15 0;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X connect 4 0 15 0;
#X connect 6 0 7 0;
#X connect 7 0 15 1;
#X connect 10 0 11 0;
#X connect 10 1 12 0;
#X connect 10 2 13 0;
#X connect 10 3 14 0;
#X connect 15 0 16 0;
#X connect 15 1 1 0;
#X connect 16 0 10 0;
#X restore 475 229 pd release;
#X obj 30 247 else/mono;
#X text 105 544 -retrig <float>: sets retrigger mode <0 \, 1 or 2> (default 0), f 66;
#X text 185 320 list - MIDI note messages (note and velocity pair or more);
#N canvas 571 93 430 441 list 0;
#X obj 80 257 else/keyboard 22 80 2 4 1 0 empty empty;
#X listbox 60 387 27 0 0 0 - - - 12;
#X obj 60 353 else/voices 4;
#X msg 83 174 60 127 1 x whatever 1 2 3, f 14;
#X msg 74 148 C4 127 1.5 1;
#X msg 61 121 69 127 2;
#X obj 60 221 else/makenote2 60 off 1 x;
#X text 42 23 The list input expects at least two elements \, which would be "note" and "velocity" \, and you can have more elements. Note that the first element does not need to be a float. This works well for regular MIDI note messages as given by [keyboard] or more complex Note On and Note Off messages as possible with [makenote2] (check its help file).;
#X connect 0 0 2 0;
#X connect 2 0 1 0;
#X connect 3 0 6 0;
#X connect 4 0 6 0;
#X connect 5 0 6 0;
#X connect 6 0 2 0;
#X restore 457 188 pd list input;
#X text 161 335 anything - other custom messages to route to active voices, f 62;
#N canvas 700 90 519 383 custom 0;
#X obj 133 297 else/voices 4;
#X msg 133 227 60 127;
#X obj 133 197 loadbang;
#X listbox 133 338 23 0 0 0 - - - 12;
#X msg 210 178 170 \, 60 \, 120;
#X obj 210 229 else/midi.in;
#X obj 210 254 else/display;
#X text 46 18 Other ("anything") messages are treated as custom messages and are sent out according to the voice allocation. Say for instance you want to send poliphonic aftertouch to an active voice. See an example below for that where we have a MIDI Note message (pitch 60) activating voice number 0 \, then you can click on the message to the right to generate a polyphonic message for the same pitch., f 64;
#X text 46 106 A message like this will be routed to the same voice allocation if the first element in the list after the selector corresponds to an allocated pitch (float or symbol)., f 64;
#X text 294 177 <-- ployphonic aftertouch;
#X msg 227 204 128 \, 60 \, 88;
#X connect 0 0 3 0;
#X connect 1 0 0 0;
#X connect 2 0 1 0;
#X connect 4 0 5 0;
#X connect 5 0 6 0;
#X connect 6 0 0 0;
#X connect 10 0 5 0;
#X restore 427 269 pd custom messages;
#X obj 102 446 cnv 17 3 17 empty empty 1 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 30 270 else/synth~;
#X text 155 420 n <float> - sets number of voices (in list mode only), f 63;
#X text 179 446 float - sets release time in ms, f 57;
#X text 135 513 -n <float>: sets number of voices (default 1), f 61;
#X text 125 364 offset <float> - sets index offset, f 68;
#X text 105 559 -offset <float>: sets index offset (default 0), f 66;
#X text 159 574 -steal: sets to voice stealing mode (default no stealing);
#X text 185 478 list - note messages prepended by index number, f 57;
#X text 49 87 [voices] does voice allocation for polyphonic synths similarly to Vanilla's [poly] \, but with more functionalities. It outputs the voice information as a list with at least: voice index \, pitch and velocity. The rightmost outlet sends messages for the extra voices., f 75;
#X obj 192 231 else/voices 4, f 14;
#N canvas 341 228 820 462 basic 0;
#X obj 140 411 else/display;
#X msg 97 220 60 \$1;
#X obj 97 188 tgl 15 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 127;
#X obj 140 262 else/display;
#X obj 140 188 tgl 15 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 127;
#X obj 184 188 tgl 15 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 127;
#X obj 230 188 tgl 15 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 127;
#X msg 140 220 61 \$1;
#X msg 184 220 62 \$1;
#X msg 230 220 63 \$1;
#X msg 49 268 offset \$1;
#X obj 49 245 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X msg 205 261 2;
#X msg 245 261 4;
#X obj 215 409 else/display;
#X obj 140 379 else/voices 4;
#X obj 404 168 else/keyboard 17 80 3 4 0 0 empty empty;
#N canvas 470 55 378 320 random 0;
#X obj 86 246 pack f f;
#X obj 86 283 outlet;
#X obj 50 19 inlet;
#X obj 86 221 makenote;
#X obj 183 116 expr $f1 + random(2 \, 5);
#X obj 199 140 expr $f1 + random(2 \, 5);
#X obj 217 164 expr $f1 + random(2 \, 5);
#X obj 50 44 expr random(60 \, 84) \; random(90 \, 127) \; random(750 \, 1250);
#X connect 0 0 1 0;
#X connect 2 0 7 0;
#X connect 3 0 0 0;
#X connect 3 1 0 1;
#X connect 4 0 5 0;
#X connect 4 0 3 0;
#X connect 5 0 6 0;
#X connect 5 0 3 0;
#X connect 6 0 3 0;
#X connect 7 0 3 0;
#X connect 7 0 4 0;
#X connect 7 1 3 1;
#X connect 7 2 3 2;
#X restore 404 140 pd random chords;
#X obj 404 110 bng 18 250 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000;
#X text 525 294 According to the voice index (the first element in the list sent by [voices]) \, the MIDI note messages are routed to different instances of "voice.pd"., f 43;
#X obj 404 302 clone 4 voice 4;
#X obj 404 339 else/out~;
#X obj 404 273 else/voices 4 1;
#X text 525 344 check clone's help file and click on in to open the patch., f 43;
#X text 525 262 Here [voices] feeds [clone] \, which loads 4 instances of a patch named "voice.pd"., f 43;
#X obj 329 178 tgl 15 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 127;
#X msg 329 203 steal \$1;
#X msg 205 297 n \$1;
#X text 47 127 After a voice is allocated \, the object needs to receive a corresponding note-off message so that the voice can be used again., f 51;
#X text 606 384 see also:;
#X obj 682 385 else/synth~;
#X text 557 110 [voices] is quite useful with [clone] to implement polyphonic synths., f 31;
#X text 402 31 You can set the object to "voice stealing" mode with the second argument or the "steal" message/flag. This mode forces a note off message (pitch and a velocity of 0) on the first allocated voice so the extra incoming voice "steals" it (just like [poly])., f 63;
#X text 47 30 [voices] outputs a list with voice index \, pitch \, velocity and optional extra stuff. You can set the number of voices with the first argument or '-n' flag \, and you can change the number of voices with the "n" message \, which causes the object to flush and clear its memory. The index offset is 0 by default and you can set a different one with the "offset" message or flag., f 51;
#X msg 214 325 flush;
#X msg 217 350 clear;
#X text 258 326 flush and clear;
#X text 258 351 just clear memory;
#X connect 1 0 3 0;
#X connect 2 0 1 0;
#X connect 3 0 15 0;
#X connect 4 0 7 0;
#X connect 5 0 8 0;
#X connect 6 0 9 0;
#X connect 7 0 3 0;
#X connect 8 0 3 0;
#X connect 9 0 3 0;
#X connect 10 0 15 0;
#X connect 11 0 10 0;
#X connect 12 0 27 0;
#X connect 13 0 27 0;
#X connect 15 0 0 0;
#X connect 15 1 14 0;
#X connect 16 0 22 0;
#X connect 17 0 16 0;
#X connect 18 0 17 0;
#X connect 20 0 21 0;
#X connect 20 1 21 1;
#X connect 22 0 20 0;
#X connect 25 0 26 0;
#X connect 26 0 22 0;
#X connect 27 0 15 0;
#X connect 34 0 15 0;
#X connect 35 0 15 0;
#X restore 487 208 pd basic;
#X text 125 378 retrig <float> - non zero sets to retrigger mode, f 68;
#X connect 29 0 30 0;
#X connect 29 1 30 1;
#X connect 30 0 53 0;
#X connect 31 0 53 0;
#X connect 53 0 27 0;
#X connect 53 1 28 0;
