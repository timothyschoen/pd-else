#N canvas 516 38 562 458 10;
#X obj 4 269 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 341 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 373 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 422 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020 0;
#X obj 307 4 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc 0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 306 3 pd;
#X obj 346 11 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc 0;
#X obj 22 40 cnv 4 4 4 empty empty Float/list 0 28 2 18 #e0e0e0 #000000 0;
#X obj 459 11 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 479 11 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 516 11 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 465 26 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 503 26 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 4 4 cnv 15 301 42 empty empty op 20 20 2 37 #e0e0e0 #000000 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1 0 0;
#X restore 3 4 graph;
#X obj 96 40 cnv 4 4 4 empty empty operators 0 28 2 18 #e0e0e0 #000000 0;
#X obj 116 349 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 117 278 cnv 17 3 33 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 95 401 2) float;
#X obj 116 316 cnv 17 3 17 empty empty 1 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 165 132 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X text 93 383 1) symbol -;
#X text 157 296 <symbol> -;
#X obj 214 203 else/op * 3;
#X msg 214 131 1 2 3;
#X obj 214 231 else/display;
#X text 146 350 float/list - operator result;
#N canvas 862 297 393 346 comparative 0;
#X text 41 56 greater than;
#X text 143 56 less than;
#X text 236 50 greater than;
#X text 51 189 less than;
#X text 236 62 or equal to;
#X text 50 201 or equal to;
#X text 161 199 equal to;
#X text 253 199 not equal to;
#X text 110 18 COMPARATIVE OPERATORS;
#X obj 49 112 else/op > 5;
#X obj 151 112 else/op < 5;
#X obj 244 112 else/op >= 5;
#X obj 59 251 else/op <= 5;
#X obj 170 251 else/op == 5;
#X obj 261 251 else/op != 5;
#X obj 49 145 else/display;
#X obj 151 145 else/display;
#X obj 244 145 else/display;
#X obj 59 284 else/display;
#X obj 170 284 else/display;
#X obj 261 284 else/display;
#X msg 49 86 1 5 10;
#X msg 151 86 1 5 10;
#X msg 244 86 1 5 10;
#X msg 59 225 1 5 10;
#X msg 170 222 1 5 10;
#X msg 261 222 1 5 10;
#X connect 9 0 15 0;
#X connect 10 0 16 0;
#X connect 11 0 17 0;
#X connect 12 0 18 0;
#X connect 13 0 19 0;
#X connect 14 0 20 0;
#X connect 21 0 9 0;
#X connect 22 0 10 0;
#X connect 23 0 11 0;
#X connect 24 0 12 0;
#X connect 25 0 13 0;
#X connect 26 0 14 0;
#X restore 459 156 pd comparative;
#N canvas 911 197 288 353 arithmetic 0;
#X obj 49 145 else/display;
#X obj 161 145 else/display;
#X obj 51 287 else/display;
#X obj 163 287 else/display;
#X msg 49 86 1 5 10;
#X msg 161 86 1 5 10;
#X msg 51 228 1 5 10;
#X msg 163 228 1 5 10;
#X obj 49 112 else/op + 5;
#X obj 161 112 else/op * 5;
#X obj 51 254 else/op - 5;
#X obj 163 254 else/op / 5;
#X text 58 18 ARITHMETIC OPERATORS;
#X text 52 61 Add;
#X text 163 61 Multiply;
#X text 160 200 Divide;
#X text 51 201 Subtract;
#X connect 4 0 8 0;
#X connect 5 0 9 0;
#X connect 6 0 10 0;
#X connect 7 0 11 0;
#X connect 8 0 0 0;
#X connect 9 0 1 0;
#X connect 10 0 2 0;
#X connect 11 0 3 0;
#X restore 459 137 pd arithmetic;
#N canvas 932 242 434 391 bitwise 0;
#X obj 49 145 else/display;
#X obj 151 145 else/display;
#X obj 37 298 else/display;
#X obj 139 298 else/display;
#X obj 278 147 else/display;
#X obj 275 301 else/display;
#X msg 49 86 1 5 10;
#X msg 151 86 1 5 10;
#X msg 37 239 1 5 10;
#X msg 139 239 1 5 10;
#X msg 278 83 1 5 10;
#X msg 275 239 1 5 10;
#X text 268 205 bitwise exclusive or, f 12;
#X obj 49 112 else/op & 5;
#X obj 151 112 else/op | 5;
#X obj 37 265 else/op << 5;
#X obj 139 265 else/op >> 5;
#X obj 49 112 else/op & 5;
#X obj 151 112 else/op | 5;
#X obj 37 265 else/op << 5;
#X obj 139 265 else/op >> 5;
#X text 41 56 bitwise and;
#X obj 278 112 else/op ~;
#X text 143 56 bitwise or;
#X obj 275 268 else/op ^ 5;
#X text 31 205 bitwise shift left, f 11;
#X text 134 207 bitwise shift right, f 11;
#X text 123 16 BITWISE OPERATORS;
#X obj 278 112 else/op ~;
#X text 269 60 bitwise not;
#X obj 275 268 else/op ^ 5;
#X text 349 85 (right inlet ignored), f 8;
#X connect 6 0 17 0;
#X connect 7 0 18 0;
#X connect 8 0 19 0;
#X connect 9 0 20 0;
#X connect 10 0 28 0;
#X connect 11 0 30 0;
#X connect 17 0 0 0;
#X connect 18 0 1 0;
#X connect 19 0 2 0;
#X connect 20 0 3 0;
#X connect 28 0 4 0;
#X connect 30 0 5 0;
#X restore 459 197 pd bitwise;
#N canvas 893 32 310 606 set 0;
#X obj 58 564 outlet;
#X msg 83 23 +;
#X msg 89 42 -;
#X msg 95 61 *;
#X msg 101 80 /;
#X msg 107 99 >;
#X msg 113 118 <;
#X msg 119 138 >=;
#X msg 126 157 <=;
#X msg 133 177 ==;
#X msg 140 197 !=;
#X msg 146 217 &&;
#X msg 158 259 ||;
#X msg 172 299 &;
#X msg 177 319 >>;
#X msg 184 339 <<;
#X msg 207 397 pow;
#X msg 213 417 max;
#X msg 221 437 min;
#X msg 226 457 log;
#X msg 199 378 ~;
#X msg 190 359 ^;
#X msg 230 480 %;
#X msg 154 239 !;
#X msg 164 279 !;
#X connect 1 0 0 0;
#X connect 2 0 0 0;
#X connect 3 0 0 0;
#X connect 4 0 0 0;
#X connect 5 0 0 0;
#X connect 6 0 0 0;
#X connect 7 0 0 0;
#X connect 8 0 0 0;
#X connect 9 0 0 0;
#X connect 10 0 0 0;
#X connect 11 0 0 0;
#X connect 12 0 0 0;
#X connect 13 0 0 0;
#X connect 14 0 0 0;
#X connect 15 0 0 0;
#X connect 16 0 0 0;
#X connect 17 0 0 0;
#X connect 18 0 0 0;
#X connect 19 0 0 0;
#X connect 20 0 0 0;
#X connect 21 0 0 0;
#X connect 22 0 0 0;
#X connect 23 0 0 0;
#X connect 24 0 0 0;
#X restore 269 140 pd set;
#X floatatom 277 170 5 0 0 0 - - - 0;
#N canvas 745 164 586 342 others 0;
#X obj 68 147 else/display;
#X obj 69 279 else/display;
#X obj 191 281 else/display;
#X obj 195 149 else/display;
#X msg 68 88 1 5 10;
#X msg 69 220 1 5 10;
#X msg 191 222 1 5 10;
#X msg 195 85 1 5 10;
#X obj 68 114 else/op min 5;
#X obj 191 248 else/op log 5;
#X obj 69 246 else/op pow 2;
#X text 214 19 OTHER OPERATORS;
#X text 65 58 minimum;
#X text 190 62 maximum;
#X text 71 190 power;
#X text 201 196 log, f 4;
#X obj 195 114 else/op max 5;
#X obj 385 257 else/display;
#X obj 385 224 else/op % 1.1;
#X msg 385 199 1 2 8;
#X text 386 173 modulo;
#X text 325 75 The '%' (modulo) operator calls the 'fmod' function also found in the expr family of objects. Note that it doesn't correspond neither to [%] or [mod] objects from Vanilla., f 31;
#X connect 4 0 8 0;
#X connect 5 0 10 0;
#X connect 6 0 9 0;
#X connect 7 0 16 0;
#X connect 8 0 0 0;
#X connect 9 0 2 0;
#X connect 10 0 1 0;
#X connect 16 0 3 0;
#X connect 18 0 17 0;
#X connect 19 0 18 0;
#X restore 459 216 pd others;
#X text 223 297 operator see [pd set] for all options;
#X text 165 383 operator: see [pd set] for all options (default +), f 52;
#N canvas 881 258 472 364 hint 0;
#X obj 206 193 else/iterate;
#X obj 206 224 abs;
#X obj 180 264 else/group;
#X obj 180 295 else/display;
#X msg 179 125 -1 -2 -3 4 5 6;
#X obj 179 156 t b l;
#X text 34 32 For any other operations on lists that are not present in [op] and other objects from the ELSE library \, just do something like this below \, where you can use any object. You can also use [expr] for more complex operations and even conversion formulas (with more than two variables \, etc.), f 64;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X connect 4 0 5 0;
#X connect 5 0 2 0;
#X connect 5 1 0 0;
#X restore 459 236 pd hint;
#N canvas 597 270 414 254 see 0;
#X text 86 35 see also:;
#X obj 88 54 else/op~;
#X obj 233 88 else/trunc;
#X obj 233 108 else/floor;
#X obj 233 128 else/ceil;
#X obj 233 68 else/wrap2;
#X text 192 39 other operations on lists;
#X obj 233 148 else/rint;
#X obj 233 189 else/hex2dec;
#X obj 233 210 else/dec2hex;
#X obj 233 168 else/quantizer;
#X restore 23 227 pd see also;
#X text 181 279 list - input value(s) to operator, f 44;
#N canvas 661 297 418 226 logic 0;
#X text 57 55 logical and;
#X text 159 55 logical or;
#X obj 66 107 else/op && 1;
#X obj 167 107 else/op || 1;
#X obj 66 140 else/display;
#X obj 167 140 else/display;
#X msg 66 81 1 1 1;
#X msg 167 79 0 0 0;
#X text 147 20 LOGIC OPERATORS;
#X obj 287 140 else/display;
#X text 279 55 logical not;
#X obj 287 107 else/op !;
#X msg 287 79 0 1 0;
#X connect 2 0 4 0;
#X connect 3 0 5 0;
#X connect 6 0 2 0;
#X connect 7 0 3 0;
#X connect 11 0 9 0;
#X connect 12 0 11 0;
#X restore 459 176 pd logic;
#X text 51 85 [op] provides many operators and is most useful for lists \, as there are objects in Pd Vanilla for most of these operations., f 61;
#X msg 321 173 2 3 4;
#X text 181 318 list - secondary operator value (ignored for bitnot);
#N canvas 624 161 499 312 lists 0;
#X obj 136 132 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X obj 185 231 else/display;
#X msg 272 145 2 3 4;
#X obj 289 175 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X msg 259 119 1 2 3 4 5 6;
#X msg 183 92 1 2 3 4 5 6 7;
#X obj 185 203 else/op * 1 2 3;
#X text 90 22 If list sizes mismatch \, the same thing that happens with multichannel signals in math objects like [*~] applies \, where the smaller list wraps and repeats until reaching the size of the longer list., f 56;
#X msg 194 136 1 2 3 4;
#X connect 0 0 6 0;
#X connect 2 0 6 1;
#X connect 3 0 6 1;
#X connect 4 0 6 1;
#X connect 5 0 6 0;
#X connect 6 0 1 0;
#X connect 8 0 6 0;
#X restore 469 92 pd lists;
#X text 153 402 - inlet values (default 0) - ignored for bitnot;
#X connect 20 0 23 0;
#X connect 23 0 25 0;
#X connect 24 0 23 0;
#X connect 30 0 23 0;
#X connect 31 0 23 1;
#X connect 40 0 23 1;
