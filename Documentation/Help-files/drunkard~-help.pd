#N canvas 454 38 563 575 10;
#X obj 109 267 cnv 17 3 77 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 109 407 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 210 266 -;
#X text 210 282 -;
#X text 132 314 seed <float> -;
#X text 150 330 p <float> -;
#X obj 306 4 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc 0;
#X obj 345 11 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc 0;
#X obj 458 11 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 478 11 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 515 11 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 464 26 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 502 26 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 252 42 1 0 0;
#X restore 305 3 graph;
#X obj 22 40 cnv 4 4 4 empty empty Drunkard's 0 28 2 18 #e0e0e0 #000000 0;
#X obj 111 40 cnv 4 4 4 empty empty walk 0 28 2 18 #e0e0e0 #000000 0;
#X obj 3 3 cnv 15 301 42 empty empty drunkard~ 20 20 2 37 #e0e0e0 #000000 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1;
#X restore 2 3 graph;
#X obj 153 40 cnv 4 4 4 empty empty algorithm 0 28 2 18 #e0e0e0 #000000 0;
#X obj 6 258 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 6 398 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X text 225 330 sets probability of a positive step in %, f 50;
#X text 132 298 step <float> -;
#X text 225 298 sets step range, f 50;
#X obj 206 226 hsl 128 15 -1 1 0 0 empty empty empty -2 -8 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 479 77 else/setdsp~;
#X text 67 93 [drunkard~] generates random nvalues within a given step range from the last output. When reaching the bounds \, the values get wrapped., f 63;
#X text 166 266 signal;
#X text 225 266 impulses triggers a random output, f 50;
#X text 165 410 signal;
#X text 210 410 - random value as result of the random walk;
#X text 178 282 list;
#X text 225 282 two floats set lower and upper bound, f 50;
#X obj 203 201 else/s2f~;
#X obj 203 142 else/impulse~ 50;
#X obj 109 350 cnv 17 3 17 empty empty 1 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 109 374 cnv 17 3 17 empty empty 2 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 174 350 float -;
#X text 225 350 sets lower bound, f 50;
#X text 174 374 float -;
#X text 225 374 sets upper bound, f 50;
#N canvas 459 157 701 372 seed 0;
#X text 30 19 Pseudo random number generators aren't true random number generators. Instead \, an algorithm is used to provide a sequence of numbers that seems random. The same sequence can be reproduced if you set a "seed" value \, which can be any integer number., f 52;
#X floatatom 39 283 11 0 0 0 - - - 16;
#X obj 203 167 bng 19 250 50 0 empty empty empty 17 7 0 10 #dfdfdf #000000 #000000;
#X obj 206 318 hsl 128 15 0 127 0 0 empty empty empty -2 -8 0 10 #dfdfdf #000000 #000000 0 1;
#X obj 42 318 hsl 128 15 0 127 0 0 empty empty empty -2 -8 0 10 #dfdfdf #000000 #000000 0 1;
#X text 367 12 You can set a seed with the '-seed' flag. If you don't supply it \, each object gets its own seed internal seed. If you send a 'seed' message without float \, the object also gets a unique seed value., f 52;
#X text 30 98 Seeds are kept locally \, which means that if two [drunkard~] objects are seeded the same they will have the same output. Conversely \, you can seed the same [drunkard~] object twice with the same seed to repeat the output., f 52;
#X obj 39 230 else/drunkard~ -seed 1039;
#X obj 39 256 else/s2f~;
#X obj 203 256 else/s2f~;
#X obj 203 230 else/drunkard~ -seed 1039;
#X floatatom 203 283 11 0 0 0 - - - 16;
#X text 379 74 Sync [drunkard~] objects with a seed value;
#X msg 536 149 seed 507;
#X msg 494 149 seed;
#X text 596 147 <-- set seed;
#X floatatom 386 263 10 0 0 0 - - - 16;
#X obj 389 298 hsl 128 15 0 127 0 0 empty empty empty -2 -8 0 10 #dfdfdf #000000 #000000 0 1;
#X obj 539 298 hsl 128 15 0 127 0 0 empty empty empty -2 -8 0 10 #dfdfdf #000000 #000000 0 1;
#X obj 386 236 else/s2f~;
#X obj 536 236 else/s2f~;
#X obj 386 120 bng 19 250 50 0 empty empty empty 17 7 0 10 #dfdfdf #000000 #000000;
#X obj 386 205 else/drunkard~;
#X obj 536 205 else/drunkard~;
#X floatatom 536 263 10 0 0 0 - - - 16;
#X obj 203 201 else/float2imp~;
#X obj 39 207 else/float2imp~;
#X obj 386 149 else/float2imp~;
#X connect 1 0 4 0;
#X connect 2 0 25 0;
#X connect 2 0 26 0;
#X connect 7 0 8 0;
#X connect 8 0 1 0;
#X connect 9 0 11 0;
#X connect 10 0 9 0;
#X connect 11 0 3 0;
#X connect 13 0 22 0;
#X connect 13 0 23 0;
#X connect 14 0 22 0;
#X connect 14 0 23 0;
#X connect 16 0 17 0;
#X connect 19 0 16 0;
#X connect 20 0 24 0;
#X connect 21 0 27 0;
#X connect 22 0 19 0;
#X connect 23 0 20 0;
#X connect 24 0 18 0;
#X connect 25 0 10 0;
#X connect 26 0 7 0;
#X connect 27 0 22 0;
#X connect 27 0 23 0;
#X restore 482 220 pd seed;
#X text 31 157 see also;
#X obj 32 211 else/brown~;
#X obj 32 184 else/drunkard;
#X text 149 494 1) float;
#X text 149 510 2) float;
#X obj 4 546 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020 0;
#X obj 5 484 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000 0;
#X obj 6 433 cnv 3 550 3 empty empty flags 8 12 0 13 #dcdcdc #000000 0;
#X text 205 494 - sets step range (default 1), f 34;
#X text 119 444 -seed <float>: sets seed (default: unique internal), f 54;
#X text 137 461 -p <float>: sets probability (default 70), f 51;
#X text 149 526 3) float;
#X text 205 510 - sets minimum value (default -1), f 34;
#X text 205 526 - sets maximum value (default 1);
#X text 225 314 a float sets seed \, no float sets a unique internal;
#X obj 203 174 else/drunkard~;
#X connect 33 0 24 0;
#X connect 34 0 57 0;
#X connect 57 0 33 0;
