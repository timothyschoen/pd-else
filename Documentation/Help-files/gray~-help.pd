#N canvas 518 42 564 442 10;
#X obj 7 411 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020 0;
#X obj 7 272 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 7 325 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 225 208 else/out~;
#X obj 23 40 cnv 4 4 4 empty empty Gray 0 28 2 18 #e0e0e0 #000000 0;
#X obj 162 40 cnv 4 4 4 empty empty generator 0 28 2 18 #e0e0e0 #000000 0;
#X obj 116 40 cnv 4 4 4 empty empty noise 0 28 2 18 #e0e0e0 #000000 0;
#X obj 306 4 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc 0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 305 3 pd;
#X obj 345 11 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc 0;
#X obj 458 11 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 478 11 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 515 11 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 464 26 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 502 26 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 70 40 cnv 4 4 4 empty empty code 0 28 2 18 #e0e0e0 #000000 0;
#X obj 3 3 cnv 15 301 42 empty empty gray~ 20 20 2 37 #e0e0e0 #000000 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1 0 0;
#X restore 2 3 graph;
#X obj 95 281 cnv 17 3 35 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 95 337 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 126 283 seed <float> - a float sets seed \, no float sets a unique internal, f 65;
#N canvas 475 138 704 321 seed 0;
#X obj 393 220 else/downsample~ 1;
#X obj 548 220 else/downsample~ 1;
#X obj 393 260 else/numbox~ 6 12 100 #c0c0c4 #440008 10 0 0 0;
#X obj 548 260 else/numbox~ 6 12 100 #c0c0c4 #440008 10 0 0 0;
#X text 30 19 Pseudo random number generators aren't true random number generators. Instead \, an algorithm is used to provide a sequence of numbers that seems random. The same sequence can be reproduced if you set a "seed" value \, which can be any integer number., f 52;
#X text 30 98 Seeds are kept locally \, which means that if two [gray~] objects are seeded the same they will have the same output. Conversely \, you can seed the same [gray~] object twice with the same seed to repeat the output., f 52;
#X text 387 79 Sync [gray~] objects with a seed value;
#X obj 57 220 else/downsample~ 1;
#X obj 57 260 else/numbox~ 6 12 100 #c0c0c4 #440008 10 0 0 0;
#X obj 207 220 else/downsample~ 1;
#X obj 207 260 else/numbox~ 6 12 100 #c0c0c4 #440008 10 0 0 0;
#X text 365 24 You can set a seed with the '-seed' flag. If you don't supply it \, each object gets its own seed internal seed. If you send a 'seed' message without float \, the object also gets a unique seed value., f 52;
#X msg 433 113 seed 507;
#X msg 393 113 seed;
#X text 495 114 <-- set seed;
#X obj 393 142 trigger bang anything;
#X obj 57 181 else/gray~ -seed 1039;
#X obj 207 181 else/gray~ -seed 1039;
#X obj 403 192 else/gray~;
#X obj 548 192 else/gray~;
#X connect 0 0 2 0;
#X connect 1 0 3 0;
#X connect 7 0 8 0;
#X connect 9 0 10 0;
#X connect 12 0 15 0;
#X connect 13 0 15 0;
#X connect 15 0 1 0;
#X connect 15 0 0 0;
#X connect 15 1 18 0;
#X connect 15 1 19 0;
#X connect 16 0 7 0;
#X connect 17 0 9 0;
#X connect 18 0 0 0;
#X connect 19 0 1 0;
#X restore 484 214 pd seed;
#X obj 7 359 cnv 3 550 3 empty empty flags 8 12 0 13 #dcdcdc #000000 0;
#X text 144 370 -seed <float>: sets seed (default: unique internal);
#X text 37 90 [gray~] generates noise based on "gray code" or reflected binary code (RBC) \, which results from flipping random bits (sot is is based on a pseudo random number generator algorithm.). "Gray Code" is named after Frank Gray \, the owner of the patent of gray codes. This type of noise has a high RMS level relative to its peak to peak level. The spectrum is emphasized towards lower frequencies. It has support for multuchannels., f 79;
#X text 138 299 ch <float> - set number of channels, f 63;
#X text 142 337 signal(s) - gray noise(s);
#N canvas 749 154 362 429 multichannel 0;
#X obj 77 322 else/out.mc~;
#X msg 121 120 ch 2;
#X msg 76 119 ch 1;
#X text 68 46 The -ch flag or message sets the number of output channels. You can also use the '-mc' flag., f 33;
#X obj 110 211 snake~ out, f 12;
#X obj 224 213 else/imp~ 1;
#X obj 110 256 else/sh~;
#X obj 179 256 else/sh~;
#X obj 110 285 else/numbox~ 6 10 100 #C0C0C4 #440008 10 0 0 0;
#X obj 179 285 else/numbox~ 6 10 100 #C0C0C4 #440008 10 0 0 0;
#X obj 76 166 else/gray~ -ch 2;
#X connect 1 0 10 0;
#X connect 2 0 10 0;
#X connect 4 0 6 0;
#X connect 4 1 7 0;
#X connect 5 0 6 1;
#X connect 5 0 7 1;
#X connect 6 0 8 0;
#X connect 7 0 9 0;
#X connect 10 0 0 0;
#X connect 10 0 4 0;
#X restore 436 238 pd multichannel;
#X text 156 388 -ch <float>: sets number of channels (default: 1);
#X obj 225 177 else/gray~;
#X connect 29 0 3 0;
