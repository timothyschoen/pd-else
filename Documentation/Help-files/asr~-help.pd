#N canvas 571 78 562 768 10;
#X obj 5 392 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 5 568 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 5 677 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000 0;
#X obj 5 738 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020 0;
#X obj 95 576 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 95 400 cnv 17 3 115 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 24 41 cnv 4 4 4 empty empty Attack/Sustain/Release 0 28 2 18 #e0e0e0 #000000 0;
#X obj 199 41 cnv 4 4 4 empty empty gated 0 28 2 18 #e0e0e0 #000000 0;
#X obj 146 323 else/out~;
#X obj 146 286 *~;
#X obj 256 291 vsl 18 80 0 1 0 0 ewtwet wefwert empty 0 -9 0 10 #dcdcdc #000000 #000000 0 1;
#X text 279 364 0;
#X text 279 287 1;
#X obj 3 4 cnv 15 301 42 empty empty asr~ 20 20 2 37 #e0e0e0 #000000 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1;
#X restore 3 4 graph;
#X obj 95 522 cnv 17 3 17 empty empty 1 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 131 523 float/signal;
#X text 216 576 - envelope signal;
#X obj 161 183 tgl 20 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 249 41 cnv 4 4 4 empty empty envelope 0 28 2 18 #e0e0e0 #000000 0;
#X obj 306 5 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc 0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 0 0;
#X restore 305 4 pd;
#X obj 345 12 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc 0;
#X obj 458 12 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 478 12 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 515 12 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 464 27 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 502 27 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 98 235 osc~ 440;
#X text 217 397 - gate values, f 51;
#N canvas 486 183 804 473 example 0;
#X obj 553 293 *~;
#X obj 553 375 else/out~;
#X obj 553 333 else/lowpass~ 0 20;
#X obj 605 272 else/rescale~ 100 1500;
#X obj 605 102 else/randpulse~ 0.5;
#X obj 78 113 else/tempo 120 100 -on;
#X obj 299 289 catch~ \$0-voice;
#X obj 128 429 clone;
#X text 106 384 see also:;
#X obj 239 187 tgl 22 0 empty empty empty 0 -6 0 8 #d0d0d0 #404040 #000000 0 1;
#X obj 78 158 else/display;
#X obj 104 215 else/suspedal -retrig 1;
#X text 195 190 On/Off;
#X obj 78 188 makenote 127 150;
#X obj 92 406 else/voices;
#X obj 459 220 else/bl.saw~;
#X obj 299 318 else/plate.rev~ 50 0.75 0.5 0.5 0.5, f 18;
#X obj 78 136 else/rand.i 48 72;
#X obj 459 148 else/rand.f~ 50 150;
#X obj 310 364 else/out~;
#X text 674 171 <-- gate value;
#X text 675 300 <-- cutoff;
#X text 529 174 <-- Hz;
#X obj 459 174 else/numbox~ 6 12 100 #c0c0c4 #440008 10 0 0 0;
#X obj 605 171 else/numbox~ 6 12 100 #c0c0c4 #440008 10 0 0 0;
#X obj 605 300 else/numbox~ 6 12 100 #c0c0c4 #440008 10 0 0 0;
#X obj 104 261 else/voices -retrig 1 2 1;
#X obj 104 240 pack float float;
#N canvas 179 291 434 315 voice1 0;
#X obj 73 46 inlet;
#X obj 271 163 tgl 40 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 271 215 switch~;
#X obj 163 219 *~;
#X obj 73 110 mtof;
#X obj 73 77 unpack float float;
#X obj 98 144 osc~ 0.125;
#X obj 163 251 throw~ \$0-voice;
#X obj 73 173 else/bl.vsaw~;
#X obj 178 131 else/asr~ 50 150;
#X connect 0 0 5 0;
#X connect 1 0 2 0;
#X connect 3 0 7 0;
#X connect 4 0 8 0;
#X connect 5 0 4 0;
#X connect 5 1 9 0;
#X connect 6 0 8 1;
#X connect 8 0 3 0;
#X connect 9 0 3 1;
#X connect 9 1 1 0;
#X restore 104 343 pd voice1;
#X text 52 343 open =>;
#X obj 177 309 else/display;
#X obj 104 309 else/display;
#X obj 104 282 route 0 1, f 25;
#X obj 605 214 else/asr~ 250 500;
#X text 425 21 [asr~] accepts any gate value \, positive or negative and above 1 or below -1 \, so you can use it to control anything besides amplitude.;
#X text 26 17 Here we have randomly generated notes into a sustain pedal and then feeding a [voice] object with 2 voices. Also see that each voice subpatch has [asr~]'s status outlet to control a DSP switch for that subpatch - open and check it. You should also try pd's [clone] object for managing polyphonic synths.;
#N canvas 179 291 434 315 voice2 0;
#X obj 73 46 inlet;
#X obj 271 163 tgl 40 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 271 215 switch~;
#X obj 163 219 *~;
#X obj 73 110 mtof;
#X obj 73 77 unpack float float;
#X obj 98 144 osc~ 0.125;
#X obj 163 251 throw~ \$0-voice;
#X obj 73 173 else/bl.vsaw~;
#X obj 178 131 else/asr~ 50 150;
#X connect 0 0 5 0;
#X connect 1 0 2 0;
#X connect 3 0 7 0;
#X connect 4 0 8 0;
#X connect 5 0 4 0;
#X connect 5 1 9 0;
#X connect 6 0 8 1;
#X connect 8 0 3 0;
#X connect 9 0 3 1;
#X connect 9 1 1 0;
#X restore 177 343 pd voice2;
#X connect 0 0 2 0;
#X connect 2 0 1 0;
#X connect 3 0 25 0;
#X connect 4 0 18 0;
#X connect 4 0 24 0;
#X connect 5 0 17 0;
#X connect 6 0 16 0;
#X connect 9 0 11 2;
#X connect 10 0 13 0;
#X connect 11 0 27 0;
#X connect 11 1 27 1;
#X connect 13 0 11 0;
#X connect 13 1 11 1;
#X connect 15 0 0 0;
#X connect 16 0 19 0;
#X connect 16 1 19 1;
#X connect 17 0 10 0;
#X connect 18 0 23 0;
#X connect 23 0 15 0;
#X connect 24 0 33 0;
#X connect 25 0 2 1;
#X connect 26 0 32 0;
#X connect 27 0 26 0;
#X connect 30 0 36 0;
#X connect 31 0 28 0;
#X connect 32 0 31 0;
#X connect 32 1 30 0;
#X connect 33 0 0 1;
#X connect 33 0 3 0;
#X restore 484 334 pd example;
#X text 32 280 see also:;
#X obj 95 544 cnv 17 3 17 empty empty 2 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 131 545 float/signal;
#X text 156 165 gate;
#X obj 380 256 tgl 19 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 380 283 else/display;
#X obj 95 597 cnv 17 3 17 empty empty 1 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 173 597 float;
#N canvas 789 187 414 411 status 0;
#X obj 288 306 switch~;
#X obj 288 238 tgl 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 71 266 *~;
#X obj 49 204 osc~ 440;
#X obj 181 254 else/sig2float~;
#X obj 181 290 vsl 18 100 0 0.5 0 0 empty empty empty 0 -9 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 335 127 else/setdsp~;
#X text 19 67 In the case of turning [switch~] on or off \, this only works for control data input \, because if the audio engine is off you can't use it to turn it on., f 62;
#X obj 71 311 else/out~;
#X msg 143 161 0;
#X text 162 133 gate on;
#X text 171 160 gate off;
#X msg 129 134 127;
#X text 19 16 [asr~] has a right outlet that sends a status value (1 when the envelope starts and 0 when it ends). This can be useful for different things \, but particularly to turn on and off the DSP processing of a subpatch or abstraction with [switch~]., f 62;
#X obj 129 202 else/asr~ 100 500, f 27;
#X connect 1 0 0 0;
#X connect 2 0 8 0;
#X connect 3 0 2 0;
#X connect 4 0 5 0;
#X connect 9 0 14 0;
#X connect 12 0 14 0;
#X connect 14 0 2 1;
#X connect 14 0 4 0;
#X connect 14 1 1 0;
#X restore 491 262 pd status;
#X text 216 597 - envelope status (on: 1 / off: 0);
#X text 179 439 bang;
#X obj 161 208 sig~;
#X obj 5 622 cnv 3 550 3 empty empty flags 8 12 0 13 #dcdcdc #000000 0;
#X obj 380 317 sel 0;
#X obj 380 345 bng 19 250 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000;
#X text 347 348 done;
#X text 111 683 1) float - attack time in ms (default 10), f 61;
#X text 173 425 float;
#X text 217 425 - gate values in MIDI velocity range (0-127 is 0-1);
#X obj 32 358 else/envgen~;
#X text 131 411 gate <float>;
#X text 217 411 - control gate values, f 51;
#N canvas 658 80 505 586 control 0;
#X obj 82 443 *~;
#X obj 192 446 vsl 18 100 0 1 0 0 empty empty empty 0 -9 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 82 488 else/out~;
#X obj 82 193 else/keyboard 17 80 3 4 0 0 empty empty;
#X obj 82 282 unpack;
#X floatatom 140 312 5 0 0 0 - - - 16;
#X obj 82 315 mtof;
#X obj 192 420 else/s2f~;
#X obj 211 289 tgl 23 0 empty empty empty 0 -8 0 10 #dfdfdf #000000 #000000 0 1;
#X floatatom 211 322 5 0 0 0 - - - 0;
#X msg 211 345 gate \$1;
#X text 57 103 Control gate is possible in 2 ways. With a float value the MIDI velocity range is considered \, so 0-127 is the same as 0-1 in signal values (float values and values outside this range is possible). Moreover \, a 'gate' message sets the actual gate value in the normal range at control rate., f 68;
#X obj 159 344 bng 21 250 50 0 empty empty empty 0 -8 0 10 #dfdfdf #000000 #000000;
#X obj 82 353 osc~ 440;
#X text 281 287 A bang is like opening and closing the gate right away. It considers the last gate value (1 by default). By default \, this makes the envelope run without sustaining., f 28;
#X obj 140 385 else/asr~ 150 750;
#X text 57 52 At a gate on (transition from 0 to any value) \, the attack ramp is generated. A gate off (transition from any value to 0) makes [asr~] go to 0 at the specified release time in ms. A gate is possible in the leftmost inlet via dignal and control values., f 68;
#X connect 0 0 2 0;
#X connect 3 0 4 0;
#X connect 4 0 6 0;
#X connect 4 1 5 0;
#X connect 5 0 15 0;
#X connect 6 0 13 0;
#X connect 7 0 1 0;
#X connect 8 0 9 0;
#X connect 9 0 10 0;
#X connect 10 0 15 0;
#X connect 12 0 15 0;
#X connect 13 0 0 0;
#X connect 15 0 0 1;
#X connect 15 0 7 0;
#X restore 455 242 pd control gate;
#N canvas 664 155 462 429 multichannel 0;
#X obj 53 282 *~;
#X obj 208 264 else/meter2~;
#X obj 343 100 else/pulse~ 0.5;
#X obj 208 132 snake~ in 2, f 23;
#X obj 53 317 else/out.mc~;
#X obj 208 101 else/randpulse2~ 1.5;
#X obj 52 177 else/sine~ -mc 440 550;
#X obj 307 249 tgl 25 0 empty empty empty 0 -8 0 10 #dfdfdf #000000 #000000 0 1;
#X obj 208 213 else/asr~ 150 250;
#X text 26 18 If [asr~] has a multichannel left input \, it outputs the same number of channels \, one for each gate signal. Secondary inlets must have the same number of channels if bigger than 1 \, in which case each channel gets its own parameter \, otherwise the single channel input is copied to all channels. The status output considers all channels., f 68;
#X connect 0 0 4 0;
#X connect 2 0 3 1;
#X connect 3 0 8 0;
#X connect 5 0 3 0;
#X connect 6 0 0 0;
#X connect 8 0 0 1;
#X connect 8 0 1 0;
#X connect 8 1 7 0;
#X restore 454 355 pd multichannel;
#X text 149 397 signal(s);
#X text 149 576 signal(s);
#X text 265 185 attack;
#X text 377 185 release;
#X text 216 544 - decay time in ms, f 43;
#X text 216 522 - attack time in ms, f 43;
#N canvas 632 120 681 643 immediate 0;
#X obj 296 535 else/out~;
#X obj 387 365 tgl 20 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 296 493 *~;
#X obj 295 463 else/brown~;
#X obj 387 394 else/tempo~ 60;
#X obj 387 431 else/timed.gate~ 500;
#X text 325 412 impulse =>;
#X text 426 460 <-- gate value;
#X obj 387 460 else/numbox~ 2 12 100 #c0c0c4 #440008 10 0 0 0;
#X obj 124 257 else/out~;
#X obj 175 108 tgl 20 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 124 215 *~;
#X obj 57 155 else/brown~;
#X obj 175 136 else/tempo~ 60;
#X text 168 159 <-- impulses;
#X obj 413 255 else/out~;
#X obj 428 105 tgl 20 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 413 223 *~;
#X obj 346 153 else/brown~;
#X obj 428 134 sig~;
#X obj 536 256 vsl 18 80 0 1 0 0 ewtwet wefwert empty 0 -9 0 10 #dcdcdc #000000 #000000 0 1;
#X text 551 339 0;
#X text 559 252 1;
#X obj 536 229 else/s2f~;
#X msg 478 155 rel \$1;
#X obj 478 131 tgl 16 0 empty empty empty 0 -8 0 10 #dfdfdf #000000 #000000 0 1;
#X text 139 425 One way or another \, not you can use the [timed.gate~] object to create a timed gate so you can trigger the envelope with an impulse \, and thus control the time of the sustain point., f 22;
#X text 56 23 With the default mode \, you can trigger the object with an impulse or bangs \, since it's the same as gate on followed by a gate off. It then makes a one shot envelope without stopping at the sustain point., f 40;
#X obj 139 108 bng 21 250 50 0 empty empty empty 0 -8 0 10 #dfdfdf #000000 #000000;
#X obj 139 187 else/asr~ 150 500;
#X obj 428 185 else/asr~ -rel 1500 500;
#X text 350 26 the '-rel' flag or 'flag' message sets to immediate release mode after the gate off \, wherever you're at. So it goes into the release even if the attack stage hasn't finished yet., f 43;
#X obj 387 495 else/asr~ 100 500;
#X connect 1 0 4 0;
#X connect 2 0 0 0;
#X connect 3 0 2 0;
#X connect 4 0 5 0;
#X connect 5 0 8 0;
#X connect 8 0 32 0;
#X connect 10 0 13 0;
#X connect 11 0 9 0;
#X connect 12 0 11 0;
#X connect 13 0 29 0;
#X connect 16 0 19 0;
#X connect 17 0 15 0;
#X connect 18 0 17 0;
#X connect 19 0 30 0;
#X connect 23 0 20 0;
#X connect 24 0 30 0;
#X connect 25 0 24 0;
#X connect 28 0 29 0;
#X connect 29 0 11 1;
#X connect 30 0 17 1;
#X connect 30 0 23 0;
#X connect 32 0 2 1;
#X restore 472 282 pd immediate release;
#X f 12;
#X floatatom 270 201 5 0 1000 0 - - - 0;
#X floatatom 380 201 5 0 1000 0 - - - 0;
#X floatatom 138 209 2 0 0 0 - - - 0;
#X obj 256 264 else/s2f~;
#X text 163 657 -rel: sets to immediate release mode;
#X text 217 439 - trigger at control rate (like an impulse), f 51;
#X obj 161 231 else/asr~ 150 500, f 37;
#X obj 32 334 else/adsr~;
#X obj 31 307 else/decay~;
#X text 111 699 2) float - release time in ms (default 10), f 61;
#X text 30 89 [asr~] is an attack/sustain/release gated envelope \, and a simplification of [adsr~]. The attack/release times are set in ms. A gate on sets the maximum attack peak. A gate off sets the release \, but note that \, by default \, if the gate off comes before the attack phase is finished \, the attack stages still gets completed before going into the release ramp. Another mode allows an immediate release. The object has multichannel support., f 84;
#X text 137 497 rel <float>;
#X text 217 497 - non zero sets to immediate release mode, f 51;
#X text 185 468 lin;
#X text 217 468 - sets to linear mode \, like using 'curve 0', f 51;
#X text 185 483 lag;
#X text 217 483 - sets to lag filter mode, f 51;
#X text 125 454 curve <float>;
#X text 217 454 - sets log curve parameter (default 1 \, 0 is linear);
#X text 113 630 -curve <float>: sets curve parameter (default 1) | -lin: sets to lin mode (like '-curve 0' | -lag: sets to lag filter mode, f 61;
#X text 111 715 3) float - curve parameter (default 1), f 61;
#N canvas 755 107 490 508 curve/lin/lag 0;
#X obj 409 221 else/setdsp~;
#X text 381 128 see also:;
#X obj 49 327 cnv 15 398 138 empty empty empty 20 12 0 14 #e0e0e0 #404040 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X array \$0-log 441 float 0;
#X coords 0 1 440 0 400 140 1 0 0;
#X restore 48 326 graph;
#X obj 120 155 bng 20 250 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000;
#X obj 133 192 else/timed.gate~ 6;
#X obj 381 169 else/lag~;
#X obj 121 284 tabwrite~ \$0-log;
#X text 143 156 <= click;
#X text 341 234 turn on =>;
#X obj 381 148 else/smooth~;
#X msg 265 194 curve \$1;
#X floatatom 265 171 5 0 0 0 - - - 0;
#X msg 235 143 -1;
#X msg 54 184 lin;
#X msg 87 184 lag;
#X msg 295 143 1;
#X msg 265 143 0;
#X text 41 14 You can set a curve parameter for [asr~] \, the default is "1" \, "0" is linear and negative values are possible. Note this is like using the curve parameter in the [smooth~] object., f 68;
#X text 41 53 You can also set to 'lag' mode \, which uses the same filter as the [lag~] object (and simulates how analog gear work in general). The lag mode is similar to using the curve parameter "1.75" or so. The 'lin' message or flag is like using "curve 0" \, in order to get out of "lag" mode you need to use the 'lin'/'curve' messages., f 68;
#X obj 133 241 else/asr~ 1.5 4;
#X connect 4 0 5 0;
#X connect 4 0 7 0;
#X connect 5 0 20 0;
#X connect 11 0 20 0;
#X connect 12 0 11 0;
#X connect 13 0 12 0;
#X connect 14 0 20 0;
#X connect 15 0 20 0;
#X connect 16 0 12 0;
#X connect 17 0 12 0;
#X connect 20 0 7 0;
#X restore 448 314 pd curve/lin/lag;
#X connect 9 0 8 0;
#X connect 18 0 42 0;
#X connect 18 0 64 0;
#X connect 28 0 9 0;
#X connect 35 0 36 0;
#X connect 36 0 44 0;
#X connect 42 0 68 0;
#X connect 44 0 45 0;
#X connect 62 0 68 1;
#X connect 63 0 68 2;
#X connect 65 0 10 0;
#X connect 68 0 9 1;
#X connect 68 0 65 0;
#X connect 68 1 35 0;
