#N canvas 447 38 563 710 10;
#X obj 5 325 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 5 523 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 5 606 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000 0;
#X obj 5 680 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020 0;
#X obj 95 531 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 95 332 cnv 17 3 79 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 24 41 cnv 4 4 4 empty empty Attack/Decay/Sustain/Release 0 28 2 18 #e0e0e0 #000000 0;
#X obj 249 41 cnv 4 4 4 empty empty gated 0 28 2 18 #e0e0e0 #000000 0;
#X obj 95 415 cnv 17 3 17 empty empty 1 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 131 416 float/signal;
#X obj 147 263 else/out~;
#X obj 147 226 *~;
#X obj 267 231 vsl 18 80 0 1 0 0 ewtwet wefwert empty 0 -9 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 267 204 else/sig2float~;
#X text 290 304 0;
#X text 290 227 1;
#X obj 3 4 cnv 15 301 42 empty empty adsr~ 20 20 2 37 #e0e0e0 #000000 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1;
#X restore 3 4 graph;
#X obj 95 436 cnv 17 3 17 empty empty 2 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 131 437 float/signal;
#X text 216 531 - envelope signal;
#X obj 162 123 tgl 20 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 299 41 cnv 4 4 4 empty empty envelope 0 28 2 18 #e0e0e0 #000000 0;
#X obj 306 5 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc 0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 0 0;
#X restore 305 4 pd;
#X obj 345 12 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc 0;
#X obj 458 12 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 478 12 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 515 12 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 464 27 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 502 27 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 90 173 osc~ 440;
#X text 217 332 - gate values, f 43;
#N canvas 486 183 804 473 example 0;
#X obj 553 293 *~;
#X obj 553 375 else/out~;
#X obj 553 333 else/lowpass~ 0 20;
#X obj 605 272 else/rescale~ 100 1500;
#X obj 605 102 else/randpulse~ 0.5;
#X obj 605 214 else/adsr~ 100 300 0.7 100;
#X text 425 21 [adsr~] accepts any gate value \, positive or negative and above 1 or below -1 \, so you can use it to control anything besides amplitude.;
#X obj 78 113 else/tempo 120 100 -on;
#X obj 299 289 catch~ \$0-voice;
#X obj 128 429 clone;
#X text 106 384 see also:;
#X obj 239 187 tgl 22 0 empty empty empty 0 -6 0 8 #d0d0d0 #404040 #000000 0 1;
#X obj 78 158 else/display;
#X obj 104 215 else/suspedal -retrig 1;
#X text 195 190 On/Off;
#X obj 78 188 makenote 127 150;
#X text 26 17 Here we have randomly generated notes into a sustain pedal and then feeding a [voice] object with 2 voices. Also see that each voice subpatch has [adsr~]'s status outlet to control a DSP switch for that subpatch - open and check it. You should also try pd's [clone] object for managing polyphonic synths.;
#X obj 92 406 else/voices;
#X obj 459 220 else/bl.saw~;
#X obj 299 318 else/plate.rev~ 50 0.75 0.5 0.5 0.5, f 18;
#X obj 78 136 else/rand.i 48 72;
#X obj 459 148 else/rand.f~ 50 150;
#X obj 310 364 else/out~;
#X text 674 171 <-- gate value;
#X text 675 300 <-- cutoff;
#X text 529 174 <-- Hz;
#X obj 459 174 else/numbox~ 6 12 100 #c0c0c4 #440008 10 0 0 0;
#X obj 605 171 else/numbox~ 6 12 100 #c0c0c4 #440008 10 0 0 0;
#X obj 605 300 else/numbox~ 6 12 100 #c0c0c4 #440008 10 0 0 0;
#X obj 104 261 else/voices -retrig 1 2 1;
#X obj 104 240 pack float float;
#N canvas 179 291 434 315 voice1 0;
#X obj 73 46 inlet;
#X obj 313 163 tgl 40 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 313 215 switch~;
#X obj 163 219 *~;
#X obj 73 110 mtof;
#X obj 73 77 unpack float float;
#X obj 98 144 osc~ 0.125;
#X obj 178 131 else/adsr~ 10 40 0.5 50;
#X obj 163 251 throw~ \$0-voice;
#X obj 73 173 else/bl.vsaw~;
#X connect 0 0 5 0;
#X connect 1 0 2 0;
#X connect 3 0 8 0;
#X connect 4 0 9 0;
#X connect 5 0 4 0;
#X connect 5 1 7 0;
#X connect 6 0 9 1;
#X connect 7 0 3 1;
#X connect 7 1 1 0;
#X connect 9 0 3 0;
#X restore 104 343 pd voice1;
#N canvas 52 291 438 299 voice2 0;
#X obj 72 37 inlet;
#X obj 312 154 tgl 40 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 312 206 switch~;
#X obj 162 200 *~;
#X obj 72 101 mtof;
#X obj 72 68 unpack float float;
#X obj 97 135 osc~ 0.125;
#X obj 177 122 else/adsr~ 10 40 0.5 50;
#X obj 162 232 throw~ \$0-voice;
#X obj 72 164 else/bl.vsaw~;
#X connect 0 0 5 0;
#X connect 1 0 2 0;
#X connect 3 0 8 0;
#X connect 4 0 9 0;
#X connect 5 0 4 0;
#X connect 5 1 7 0;
#X connect 6 0 9 1;
#X connect 7 0 3 1;
#X connect 7 1 1 0;
#X connect 9 0 3 0;
#X restore 177 343 pd voice2;
#X text 52 343 open =>;
#X obj 177 309 else/display;
#X obj 104 309 else/display;
#X obj 104 282 route 0 1, f 25;
#X connect 0 0 2 0;
#X connect 2 0 1 0;
#X connect 3 0 28 0;
#X connect 4 0 21 0;
#X connect 4 0 27 0;
#X connect 5 0 0 1;
#X connect 5 0 3 0;
#X connect 7 0 20 0;
#X connect 8 0 19 0;
#X connect 11 0 13 2;
#X connect 12 0 15 0;
#X connect 13 0 30 0;
#X connect 13 1 30 1;
#X connect 15 0 13 0;
#X connect 15 1 13 1;
#X connect 18 0 0 0;
#X connect 19 0 22 0;
#X connect 19 1 22 1;
#X connect 20 0 12 0;
#X connect 21 0 26 0;
#X connect 26 0 18 0;
#X connect 27 0 5 0;
#X connect 28 0 2 1;
#X connect 29 0 36 0;
#X connect 30 0 29 0;
#X connect 34 0 32 0;
#X connect 35 0 31 0;
#X connect 36 0 35 0;
#X connect 36 1 34 0;
#X restore 484 268 pd example;
#X text 23 249 see also:;
#X obj 23 268 else/asr~;
#X obj 95 458 cnv 17 3 17 empty empty 3 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 131 459 float/signal;
#X obj 95 480 cnv 17 3 17 empty empty 4 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 131 481 float/signal;
#X text 129 125 gate;
#N canvas 786 244 383 359 triggered 0;
#X obj 151 271 else/out~;
#X obj 166 71 tgl 20 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 151 229 *~;
#X obj 84 169 else/brown~;
#X obj 166 201 else/adsr~ 50 100 0.5 500;
#X obj 166 100 else/tempo~ 60;
#X obj 166 137 else/timed.gate~ 500;
#X text 28 17 You can use the [timed.gate~] object to create a timed gate so you can trigger the envelope with an impulse., f 54;
#X text 104 118 impulse =>;
#X text 205 166 <-- gate value;
#X obj 166 166 else/numbox~ 2 12 100 #c0c0c4 #440008 10 0 0 0;
#X connect 1 0 5 0;
#X connect 2 0 0 0;
#X connect 3 0 2 0;
#X connect 4 0 2 1;
#X connect 5 0 6 0;
#X connect 6 0 10 0;
#X connect 10 0 4 0;
#X restore 466 235 pd triggered \; by impulses;
#X obj 381 196 tgl 19 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 381 223 else/display;
#X obj 95 552 cnv 17 3 17 empty empty 1 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 173 552 float;
#N canvas 789 187 414 411 status 0;
#X obj 288 306 switch~;
#X obj 288 238 tgl 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 71 266 *~;
#X obj 49 204 osc~ 440;
#X obj 181 254 else/sig2float~;
#X obj 181 290 vsl 18 100 0 0.5 0 0 empty empty empty 0 -9 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 335 127 else/setdsp~;
#X obj 129 202 else/adsr~ 100 300 0.25 500;
#X text 19 16 [adsr~] has a right outlet that sends a status value (1 when the envelope starts and 0 when it ends). This can be useful for different things \, but particularly to turn on and off the DSP processing of a subpatch or abstraction with [switch~]., f 62;
#X text 19 67 In the case of turning [switch~] on or off \, this only works for control data input \, because if the audio engine is off you can't use it to turn it on., f 62;
#X obj 71 311 else/out~;
#X msg 143 161 0;
#X text 162 133 gate on;
#X text 171 160 gate off;
#X msg 129 134 127;
#X connect 1 0 0 0;
#X connect 2 0 10 0;
#X connect 3 0 2 0;
#X connect 4 0 5 0;
#X connect 7 0 2 1;
#X connect 7 0 4 0;
#X connect 7 1 1 0;
#X connect 11 0 7 0;
#X connect 14 0 7 0;
#X restore 490 172 pd status;
#X text 216 552 - envelope status (on: 1 / off: 0);
#X obj 162 171 else/adsr~ 1000 500 0.5 1000, f 37;
#X text 179 379 bang;
#X text 217 379 - trigger/retrigger, f 46;
#N canvas 420 66 665 494 retrigger 0;
#X obj 74 347 *~;
#X obj 51 285 osc~ 440;
#X obj 192 324 else/sig2float~;
#X obj 192 357 vsl 18 100 0 0.5 0 0 empty empty empty 0 -9 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 131 203 tgl 20 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 127;
#X obj 99 204 bng 20 250 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000;
#X obj 74 397 else/out~;
#X text 20 18 You can retrigger the envelope with a bang or with a float value. With float values you don't need to turn the gate off before retriggering the envelope \, so even repeated values make the envelope restart the attack ramp. Try it below or on the right.;
#X msg 131 173 127;
#X obj 131 273 else/adsr~ 100 300 0.25 500;
#X text 20 80 A bang considers the last non zero float value as the gate value \, and the default value is "127"!, f 60;
#X floatatom 131 240 5 0 0 0 - - - 0;
#X msg 67 207 0;
#X text 265 377 Note: the [envgen~] object has a retrigger mode which allows you to set a retrigger time in ms. Hence \, if you want to have a more versatile ADSR object with this functionality \, please use this more general and all purpose envelope generator. Check its help file for more details on how its retrigger mode works.;
#X obj 531 447 else/envgen~;
#X obj 180 239 else/impseq~;
#X obj 180 201 bng 21 250 50 0 empty empty empty 0 -8 0 10 #dfdfdf #000000 #000000;
#X text 159 171 <= click;
#X text 20 113 At a signal rate \, you can retrigger the envelope with impulses or gates via the second inlet., f 60;
#X obj 517 141 tgl 20 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 415 124 else/suspedal -retrig 1, f 13;
#X obj 475 268 *~;
#X obj 415 230 osc~ 440;
#X obj 475 296 else/out~;
#X obj 415 203 mtof;
#X obj 490 225 else/adsr~ 100 300 0.5 500;
#X obj 517 116 loadbang;
#X obj 415 26 else/keyboard 17 80 1 4 0 0 empty empty;
#X obj 490 170 else/display;
#X obj 415 170 else/display;
#X connect 0 0 6 0;
#X connect 1 0 0 0;
#X connect 2 0 3 0;
#X connect 4 0 11 0;
#X connect 5 0 9 0;
#X connect 8 0 4 0;
#X connect 9 0 0 1;
#X connect 9 0 2 0;
#X connect 11 0 9 0;
#X connect 12 0 9 0;
#X connect 15 0 9 1;
#X connect 16 0 15 0;
#X connect 19 0 20 2;
#X connect 20 0 29 0;
#X connect 20 1 28 0;
#X connect 21 0 23 0;
#X connect 22 0 21 0;
#X connect 24 0 22 0;
#X connect 25 0 21 1;
#X connect 26 0 19 0;
#X connect 27 0 20 0;
#X connect 28 0 25 0;
#X connect 29 0 24 0;
#X restore 472 213 pd retrigger;
#X obj 162 148 sig~;
#X obj 5 578 cnv 3 550 3 empty empty flags 8 12 0 13 #dcdcdc #000000 0;
#X obj 381 257 sel 0;
#X obj 381 285 bng 19 250 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000;
#X text 348 288 done;
#N canvas 696 182 494 456 lin 0;
#X obj 409 181 else/setdsp~;
#X text 349 106 see also:;
#X obj 49 287 cnv 15 398 138 empty empty empty 20 12 0 14 #e0e0e0 #404040 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X array \$0-log 441 float 0;
#X coords 0 1 440 0 400 140 1 0 0;
#X restore 48 286 graph;
#X obj 120 115 bng 20 250 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000;
#X obj 56 126 tgl 25 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 133 152 else/timed.gate~ 6;
#X obj 349 127 else/lag~;
#X obj 121 244 tabwrite~ \$0-log;
#X text 143 116 <= click;
#X text 341 194 turn on =>;
#X obj 133 201 else/adsr~ -lin 1.5 2 0.5 4;
#X msg 56 161 lin \$1;
#X text 41 19 The [adsr~] object can operate in "lin" (linear) mode \, set with the -lin flag or "lin" message. By defqult \, [adsr~] is logarithmic \, which implements a one pole filter \, much like the [lag~] object. This non-liner mode simulates how analog gear work in general. The attack or release time represent how long it takes for the signal to converge to within 0.01% of the target value., f 68;
#X connect 4 0 6 0;
#X connect 4 0 8 0;
#X connect 5 0 12 0;
#X connect 6 0 11 0;
#X connect 11 0 8 0;
#X connect 12 0 11 0;
#X restore 508 193 pd lin;
#X text 137 394 lin <float>;
#X text 217 394 - non zero sets to "lin" mode \, "log" otherwise;
#X text 111 612 1) float - attack time in ms (default 10), f 61;
#X text 111 627 2) float - decay time in ms (default 10), f 61;
#X text 111 643 3) float - sustain amplitude ratio to gate value (default 1), f 61;
#X text 111 659 4) float - release time in ms (default 10), f 61;
#X text 173 363 float;
#X text 217 363 - gate values in MIDI velocity range (0-127 is 0-1);
#X obj 23 290 else/envgen~;
#X text 163 587 -lin: sets to lin mode (default 'log');
#X text 131 348 gate <float>;
#X text 217 347 - control gate values, f 43;
#N canvas 566 86 498 588 control 0;
#X obj 83 453 *~;
#X obj 193 456 vsl 18 100 0 0.5 0 0 empty empty empty 0 -9 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 83 498 else/out~;
#X obj 83 203 else/keyboard 17 80 3 4 0 0 empty empty;
#X obj 83 292 unpack;
#X floatatom 141 329 5 0 0 0 - - - 16;
#X obj 83 325 mtof;
#X obj 83 351 osc~;
#X obj 193 430 else/s2f~;
#X obj 212 299 tgl 23 0 empty empty empty 0 -8 0 10 #dfdfdf #000000 #000000 0 1;
#X floatatom 212 332 5 0 0 0 - - - 0;
#X msg 212 355 gate \$1;
#X obj 141 395 else/adsr~ 100 300 0.25 500;
#X text 54 113 Control gate is possible in 2 ways. With a float value the MIDI velocity range is considered \, so 0-127 is the same as 0-1 in signal values (float values and values outside this range is possible). Moreover \, a 'gate' message sets the actual gate value in the normal range at control rate., f 63;
#X text 54 36 At a gate on (transition from 0 to any value) \, the attack ramp is generated \, then a decay ramp goes to the sustain point (specified as a ratio of the gate value). A gate off (transition from any value to 0) makes [adsr~] go to 0 at the specified release time in ms. A gate is possible in the leftmost inlet via dignal and control values., f 65;
#X connect 0 0 2 0;
#X connect 3 0 4 0;
#X connect 4 0 6 0;
#X connect 4 1 5 0;
#X connect 5 0 12 0;
#X connect 6 0 7 0;
#X connect 7 0 0 0;
#X connect 8 0 1 0;
#X connect 9 0 10 0;
#X connect 10 0 11 0;
#X connect 11 0 12 0;
#X connect 12 0 0 1;
#X connect 12 0 8 0;
#X restore 455 151 pd control gate;
#N canvas 664 155 462 429 multichannel 0;
#X obj 53 282 *~;
#X obj 208 213 else/adsr~ 100 300 0.7 100;
#X obj 208 264 else/meter2~;
#X obj 343 100 else/pulse~ 0.5;
#X obj 208 132 snake~ in 2, f 23;
#X obj 53 317 else/out.mc~;
#X obj 208 101 else/randpulse2~ 1.5;
#X text 26 29 If [adsr~] has a multichannel left input \, it outputs the same number of channels \, one for each gate signal. Secondary inlets must have the same number of channels if bigger than 1 \, in which case each channel gets its own parameter \, otherwise the single channel input is copied to all channels., f 68;
#X obj 52 177 else/sine~ -mc 440 550;
#X connect 0 0 5 0;
#X connect 1 0 0 1;
#X connect 1 0 2 0;
#X connect 3 0 4 1;
#X connect 4 0 1 0;
#X connect 6 0 4 0;
#X connect 8 0 0 0;
#X restore 454 289 pd multichannel;
#X text 149 332 signal(s);
#X text 149 531 signal(s);
#X text 32 85 [adsr~] is an attack/decay/sustain/release gated envelope. The object has multichannel support., f 69;
#X obj 95 501 cnv 17 3 17 empty empty 5 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 131 502 float/signal;
#X obj 216 143 nbx 4 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X obj 271 143 nbx 4 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X text 217 125 attack;
#X obj 326 143 nbx 4 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X obj 381 143 nbx 4 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X text 383 125 release;
#X text 273 125 decay;
#X text 327 125 sustain;
#X text 216 502 - release time in ms, f 43;
#X text 216 481 - sustain amplitude (ratio to gate value), f 43;
#X text 216 458 - decay time in ms, f 43;
#X text 216 436 - attack time in ms, f 43;
#X text 216 415 - signal retrigger via impulses and gates, f 43;
#X connect 11 0 10 0;
#X connect 13 0 12 0;
#X connect 21 0 52 0;
#X connect 31 0 11 0;
#X connect 42 0 43 0;
#X connect 43 0 54 0;
#X connect 48 0 11 1;
#X connect 48 0 13 0;
#X connect 48 1 42 0;
#X connect 52 0 48 0;
#X connect 54 0 55 0;
#X connect 77 0 48 2;
#X connect 78 0 48 3;
#X connect 80 0 48 4;
#X connect 81 0 48 5;
