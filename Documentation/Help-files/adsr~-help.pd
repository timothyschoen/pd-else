#N canvas 544 49 563 807 10;
#X obj 5 392 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 5 606 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 5 705 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000 0;
#X obj 5 779 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020 0;
#X obj 95 614 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 95 399 cnv 17 3 92 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 24 41 cnv 4 4 4 empty empty Attack/Decay/Sustain/Release 0 28 2 18 #e0e0e0 #000000 0;
#X obj 249 41 cnv 4 4 4 empty empty gated 0 28 2 18 #e0e0e0 #000000 0;
#X obj 95 498 cnv 17 3 17 empty empty 1 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 131 499 float/signal;
#X obj 146 323 else/out~;
#X obj 146 286 *~;
#X obj 256 291 vsl 18 80 0 1 0 0 ewtwet wefwert empty 0 -9 0 10 #dcdcdc #000000 #000000 0 1;
#X text 279 364 0;
#X text 279 287 1;
#X obj 3 4 cnv 15 301 42 empty empty adsr~ 20 20 2 37 #e0e0e0 #000000 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1;
#X restore 3 4 graph;
#X obj 95 519 cnv 17 3 17 empty empty 2 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 131 520 float/signal;
#X text 216 614 - envelope signal;
#X obj 161 183 tgl 20 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 299 41 cnv 4 4 4 empty empty envelope 0 28 2 18 #e0e0e0 #000000 0;
#X obj 306 5 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc 0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 0 0;
#X restore 305 4 pd;
#X obj 345 12 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc 0;
#X obj 458 12 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 478 12 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 515 12 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 464 27 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 502 27 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 98 235 osc~ 440;
#X text 217 399 - gate values, f 43;
#N canvas 486 183 804 473 example 0;
#X obj 553 293 *~;
#X obj 553 375 else/out~;
#X obj 553 333 else/lowpass~ 0 20;
#X obj 605 272 else/rescale~ 100 1500;
#X obj 605 102 else/randpulse~ 0.5;
#X obj 605 214 else/adsr~ 100 300 0.7 100;
#X text 425 21 [adsr~] accepts any gate value \, positive or negative and above 1 or below -1 \, so you can use it to control anything besides amplitude.;
#X obj 78 113 else/tempo 120 100 -on;
#X obj 299 289 catch~ \$0-voice;
#X obj 128 429 clone;
#X text 106 384 see also:;
#X obj 239 187 tgl 22 0 empty empty empty 0 -6 0 8 #d0d0d0 #404040 #000000 0 1;
#X obj 78 158 else/display;
#X obj 104 215 else/suspedal -retrig 1;
#X text 195 190 On/Off;
#X obj 78 188 makenote 127 150;
#X text 26 17 Here we have randomly generated notes into a sustain pedal and then feeding a [voice] object with 2 voices. Also see that each voice subpatch has [adsr~]'s status outlet to control a DSP switch for that subpatch - open and check it. You should also try pd's [clone] object for managing polyphonic synths.;
#X obj 92 406 else/voices;
#X obj 459 220 else/bl.saw~;
#X obj 299 318 else/plate.rev~ 50 0.75 0.5 0.5 0.5, f 18;
#X obj 78 136 else/rand.i 48 72;
#X obj 459 148 else/rand.f~ 50 150;
#X obj 310 364 else/out~;
#X text 674 171 <-- gate value;
#X text 675 300 <-- cutoff;
#X text 529 174 <-- Hz;
#X obj 459 174 else/numbox~ 6 12 100 #c0c0c4 #440008 10 0 0 0;
#X obj 605 171 else/numbox~ 6 12 100 #c0c0c4 #440008 10 0 0 0;
#X obj 605 300 else/numbox~ 6 12 100 #c0c0c4 #440008 10 0 0 0;
#X obj 104 261 else/voices -retrig 1 2 1;
#X obj 104 240 pack float float;
#N canvas 179 291 434 315 voice1 0;
#X obj 73 46 inlet;
#X obj 313 163 tgl 40 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 313 215 switch~;
#X obj 163 219 *~;
#X obj 73 110 mtof;
#X obj 73 77 unpack float float;
#X obj 98 144 osc~ 0.125;
#X obj 178 131 else/adsr~ 10 40 0.5 50;
#X obj 163 251 throw~ \$0-voice;
#X obj 73 173 else/bl.vsaw~;
#X connect 0 0 5 0;
#X connect 1 0 2 0;
#X connect 3 0 8 0;
#X connect 4 0 9 0;
#X connect 5 0 4 0;
#X connect 5 1 7 0;
#X connect 6 0 9 1;
#X connect 7 0 3 1;
#X connect 7 1 1 0;
#X connect 9 0 3 0;
#X restore 104 343 pd voice1;
#N canvas 52 291 438 299 voice2 0;
#X obj 72 37 inlet;
#X obj 312 154 tgl 40 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 312 206 switch~;
#X obj 162 200 *~;
#X obj 72 101 mtof;
#X obj 72 68 unpack float float;
#X obj 97 135 osc~ 0.125;
#X obj 177 122 else/adsr~ 10 40 0.5 50;
#X obj 162 232 throw~ \$0-voice;
#X obj 72 164 else/bl.vsaw~;
#X connect 0 0 5 0;
#X connect 1 0 2 0;
#X connect 3 0 8 0;
#X connect 4 0 9 0;
#X connect 5 0 4 0;
#X connect 5 1 7 0;
#X connect 6 0 9 1;
#X connect 7 0 3 1;
#X connect 7 1 1 0;
#X connect 9 0 3 0;
#X restore 177 343 pd voice2;
#X text 52 343 open =>;
#X obj 177 309 else/display;
#X obj 104 309 else/display;
#X obj 104 282 route 0 1, f 25;
#X connect 0 0 2 0;
#X connect 2 0 1 0;
#X connect 3 0 28 0;
#X connect 4 0 21 0;
#X connect 4 0 27 0;
#X connect 5 0 0 1;
#X connect 5 0 3 0;
#X connect 7 0 20 0;
#X connect 8 0 19 0;
#X connect 11 0 13 2;
#X connect 12 0 15 0;
#X connect 13 0 30 0;
#X connect 13 1 30 1;
#X connect 15 0 13 0;
#X connect 15 1 13 1;
#X connect 18 0 0 0;
#X connect 19 0 22 0;
#X connect 19 1 22 1;
#X connect 20 0 12 0;
#X connect 21 0 26 0;
#X connect 26 0 18 0;
#X connect 27 0 5 0;
#X connect 28 0 2 1;
#X connect 29 0 36 0;
#X connect 30 0 29 0;
#X connect 34 0 32 0;
#X connect 35 0 31 0;
#X connect 36 0 35 0;
#X connect 36 1 34 0;
#X restore 484 324 pd example;
#X text 32 307 see also:;
#X obj 32 326 else/asr~;
#X obj 95 541 cnv 17 3 17 empty empty 3 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 131 542 float/signal;
#X obj 95 563 cnv 17 3 17 empty empty 4 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 131 564 float/signal;
#X text 156 165 gate;
#X obj 380 256 tgl 19 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 380 283 else/display;
#X obj 95 635 cnv 17 3 17 empty empty 1 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 173 635 float;
#N canvas 789 187 414 411 status 0;
#X obj 288 306 switch~;
#X obj 288 238 tgl 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 71 266 *~;
#X obj 49 204 osc~ 440;
#X obj 181 254 else/sig2float~;
#X obj 181 290 vsl 18 100 0 0.5 0 0 empty empty empty 0 -9 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 335 127 else/setdsp~;
#X obj 129 202 else/adsr~ 100 300 0.25 500;
#X text 19 16 [adsr~] has a right outlet that sends a status value (1 when the envelope starts and 0 when it ends). This can be useful for different things \, but particularly to turn on and off the DSP processing of a subpatch or abstraction with [switch~]., f 62;
#X text 19 67 In the case of turning [switch~] on or off \, this only works for control data input \, because if the audio engine is off you can't use it to turn it on., f 62;
#X obj 71 311 else/out~;
#X msg 143 161 0;
#X text 162 133 gate on;
#X text 171 160 gate off;
#X msg 129 134 127;
#X connect 1 0 0 0;
#X connect 2 0 10 0;
#X connect 3 0 2 0;
#X connect 4 0 5 0;
#X connect 7 0 2 1;
#X connect 7 0 4 0;
#X connect 7 1 1 0;
#X connect 11 0 7 0;
#X connect 14 0 7 0;
#X restore 446 249 pd status;
#X text 216 635 - envelope status (on: 1 / off: 0);
#X text 179 446 bang;
#N canvas 569 89 728 693 retrigger 0;
#X obj 116 323 *~;
#X obj 93 261 osc~ 440;
#X obj 234 300 else/sig2float~;
#X obj 234 333 vsl 18 100 0 0.5 0 0 empty empty empty 0 -9 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 127 179 tgl 20 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 127;
#X obj 173 198 bng 20 250 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000;
#X obj 116 373 else/out~;
#X text 25 21 You can retrigger the envelope with a bang or with a float value. With float values you don't need to turn the gate off before retriggering the envelope \, so even repeated values make the envelope restart the attack ramp. Try it below or on the right.;
#X msg 127 145 127;
#X obj 173 249 else/adsr~ 100 300 0.25 500;
#X floatatom 127 216 5 0 0 0 - - - 0;
#X text 502 453 Note: the [envgen~] object has a retrigger mode which allows you to set a retrigger time in ms. Hence \, if you want to have a more versatile ADSR object with this functionality \, please use this more general and all purpose envelope generator. Check its help file for more details on how its retrigger mode works., f 24;
#X obj 541 630 else/envgen~;
#X text 66 471 At a signal rate \, you can retrigger the envelope with impulses or gates via the second inlet., f 27;
#X obj 554 210 tgl 20 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 452 193 else/suspedal -retrig 1, f 13;
#X obj 512 337 *~;
#X obj 452 299 osc~ 440;
#X obj 512 365 else/out~;
#X obj 452 272 mtof;
#X obj 527 294 else/adsr~ 100 300 0.5 500;
#X obj 554 185 loadbang;
#X obj 452 95 else/keyboard 17 80 1 4 0 0 empty empty;
#X obj 527 239 else/display;
#X obj 452 239 else/display;
#X obj 297 469 bng 21 250 50 0 empty empty empty 0 -8 0 10 #dfdfdf #000000 #000000;
#X obj 297 499 else/float2imp~;
#X obj 246 576 *~;
#X obj 246 604 else/out~;
#X obj 261 533 else/adsr~ 100 300 0.5 500, f 31;
#X obj 188 528 noise~;
#X obj 261 469 tgl 20 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 261 499 sig~;
#X text 429 44 You can use [suspedal] with its retrigger mode to send repeated notes and retrigger the envelope., f 33;
#X text 155 143 <-- click multiple times to retrigger, f 18;
#X msg 88 146 0;
#X text 201 199 retrigger with bangs;
#X text 25 83 A bang considers the last non zero float value as the gate value \, and the default value is "127"! A bang only retriggers if the gate is on., f 60;
#X connect 0 0 6 0;
#X connect 1 0 0 0;
#X connect 2 0 3 0;
#X connect 4 0 10 0;
#X connect 5 0 9 0;
#X connect 8 0 4 0;
#X connect 9 0 0 1;
#X connect 9 0 2 0;
#X connect 10 0 9 0;
#X connect 14 0 15 2;
#X connect 15 0 24 0;
#X connect 15 1 23 0;
#X connect 16 0 18 0;
#X connect 17 0 16 0;
#X connect 19 0 17 0;
#X connect 20 0 16 1;
#X connect 21 0 14 0;
#X connect 22 0 15 0;
#X connect 23 0 20 0;
#X connect 24 0 19 0;
#X connect 25 0 26 0;
#X connect 26 0 29 1;
#X connect 27 0 28 0;
#X connect 29 0 27 1;
#X connect 30 0 27 0;
#X connect 31 0 32 0;
#X connect 32 0 29 0;
#X connect 35 0 4 0;
#X restore 472 269 pd retrigger;
#X obj 161 208 sig~;
#X obj 5 661 cnv 3 550 3 empty empty flags 8 12 0 13 #dcdcdc #000000 0;
#X obj 380 317 sel 0;
#X obj 380 345 bng 19 250 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000;
#X text 347 348 done;
#N canvas 696 182 494 456 lin 0;
#X obj 409 181 else/setdsp~;
#X text 349 106 see also:;
#X obj 49 287 cnv 15 398 138 empty empty empty 20 12 0 14 #e0e0e0 #404040 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X array \$0-log 441 float 0;
#X coords 0 1 440 0 400 140 1 0 0;
#X restore 48 286 graph;
#X obj 120 115 bng 20 250 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000;
#X obj 56 126 tgl 25 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 133 152 else/timed.gate~ 6;
#X obj 349 127 else/lag~;
#X obj 121 244 tabwrite~ \$0-log;
#X text 143 116 <= click;
#X text 341 194 turn on =>;
#X obj 133 201 else/adsr~ -lin 1.5 2 0.5 4;
#X msg 56 161 lin \$1;
#X text 41 19 The [adsr~] object can operate in "lin" (linear) mode \, set with the -lin flag or "lin" message. By defqult \, [adsr~] is logarithmic \, which implements a one pole filter \, much like the [lag~] object. This non-liner mode simulates how analog gear work in general. The attack or release time represent how long it takes for the signal to converge to within 0.01% of the target value., f 68;
#X connect 4 0 6 0;
#X connect 4 0 8 0;
#X connect 5 0 12 0;
#X connect 6 0 11 0;
#X connect 11 0 8 0;
#X connect 12 0 11 0;
#X restore 508 249 pd lin;
#X text 137 461 lin <float>;
#X text 217 461 - non zero sets to "lin" mode \, "log" otherwise;
#X text 111 711 1) float - attack time in ms (default 10), f 61;
#X text 111 726 2) float - decay time in ms (default 10), f 61;
#X text 111 742 3) float - sustain amplitude ratio to gate value (default 1), f 61;
#X text 111 758 4) float - release time in ms (default 10), f 61;
#X text 173 430 float;
#X text 217 430 - gate values in MIDI velocity range (0-127 is 0-1);
#X obj 32 348 else/envgen~;
#X text 163 670 -lin: sets to lin mode (default 'log');
#X text 131 415 gate <float>;
#X text 217 414 - control gate values, f 43;
#N canvas 566 86 498 588 control 0;
#X obj 83 453 *~;
#X obj 193 456 vsl 18 100 0 0.5 0 0 empty empty empty 0 -9 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 83 498 else/out~;
#X obj 83 203 else/keyboard 17 80 3 4 0 0 empty empty;
#X obj 83 292 unpack;
#X floatatom 141 329 5 0 0 0 - - - 16;
#X obj 83 325 mtof;
#X obj 83 351 osc~;
#X obj 193 430 else/s2f~;
#X obj 212 299 tgl 23 0 empty empty empty 0 -8 0 10 #dfdfdf #000000 #000000 0 1;
#X floatatom 212 332 5 0 0 0 - - - 0;
#X msg 212 355 gate \$1;
#X obj 141 395 else/adsr~ 100 300 0.25 500;
#X text 54 113 Control gate is possible in 2 ways. With a float value the MIDI velocity range is considered \, so 0-127 is the same as 0-1 in signal values (float values and values outside this range is possible). Moreover \, a 'gate' message sets the actual gate value in the normal range at control rate., f 63;
#X text 54 36 At a gate on (transition from 0 to any value) \, the attack ramp is generated \, then a decay ramp goes to the sustain point (specified as a ratio of the gate value). A gate off (transition from any value to 0) makes [adsr~] go to 0 at the specified release time in ms. A gate is possible in the leftmost inlet via dignal and control values., f 65;
#X connect 0 0 2 0;
#X connect 3 0 4 0;
#X connect 4 0 6 0;
#X connect 4 1 5 0;
#X connect 5 0 12 0;
#X connect 6 0 7 0;
#X connect 7 0 0 0;
#X connect 8 0 1 0;
#X connect 9 0 10 0;
#X connect 10 0 11 0;
#X connect 11 0 12 0;
#X connect 12 0 0 1;
#X connect 12 0 8 0;
#X restore 455 229 pd control gate;
#N canvas 664 155 462 429 multichannel 0;
#X obj 53 282 *~;
#X obj 208 213 else/adsr~ 100 300 0.7 100;
#X obj 208 264 else/meter2~;
#X obj 343 100 else/pulse~ 0.5;
#X obj 208 132 snake~ in 2, f 23;
#X obj 53 317 else/out.mc~;
#X obj 208 101 else/randpulse2~ 1.5;
#X text 26 29 If [adsr~] has a multichannel left input \, it outputs the same number of channels \, one for each gate signal. Secondary inlets must have the same number of channels if bigger than 1 \, in which case each channel gets its own parameter \, otherwise the single channel input is copied to all channels., f 68;
#X obj 52 177 else/sine~ -mc 440 550;
#X connect 0 0 5 0;
#X connect 1 0 0 1;
#X connect 1 0 2 0;
#X connect 3 0 4 1;
#X connect 4 0 1 0;
#X connect 6 0 4 0;
#X connect 8 0 0 0;
#X restore 454 345 pd multichannel;
#X text 149 399 signal(s);
#X text 149 614 signal(s);
#X obj 95 584 cnv 17 3 17 empty empty 5 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 131 585 float/signal;
#X text 243 185 attack;
#X text 377 185 release;
#X text 290 185 decay;
#X text 327 185 sustain;
#X text 216 585 - release time in ms, f 43;
#X text 216 564 - sustain amplitude (ratio to gate value), f 43;
#X text 216 541 - decay time in ms, f 43;
#X text 216 519 - attack time in ms, f 43;
#X text 216 498 - signal retrigger via impulses and gates, f 43;
#N canvas 538 119 681 643 immediate 0;
#X obj 296 535 else/out~;
#X obj 387 365 tgl 20 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 296 493 *~;
#X obj 295 463 else/brown~;
#X obj 387 495 else/adsr~ 50 100 0.5 500;
#X obj 387 394 else/tempo~ 60;
#X obj 387 431 else/timed.gate~ 500;
#X text 325 412 impulse =>;
#X text 426 460 <-- gate value;
#X obj 387 460 else/numbox~ 2 12 100 #c0c0c4 #440008 10 0 0 0;
#X obj 124 257 else/out~;
#X obj 139 107 tgl 20 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 124 215 *~;
#X obj 57 155 else/brown~;
#X obj 139 136 else/tempo~ 60;
#X obj 139 187 else/adsr~ 50 100 0.5 500;
#X text 153 161 <-- impulses;
#X text 56 23 With the default mode \, you can trigger the object with an impulse \, since it's the same as gate on followed by a gate off. It then makes a one shot envelope without stopping at the sustain point., f 38;
#X obj 405 265 else/out~;
#X obj 420 115 tgl 20 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 405 233 *~;
#X obj 338 163 else/brown~;
#X obj 420 144 sig~;
#X obj 420 195 else/adsr~ -rel 1500 500 0.5 500;
#X obj 528 266 vsl 18 80 0 1 0 0 ewtwet wefwert empty 0 -9 0 10 #dcdcdc #000000 #000000 0 1;
#X text 551 339 0;
#X text 551 262 1;
#X obj 528 239 else/s2f~;
#X msg 470 165 rel \$1;
#X obj 470 141 tgl 16 0 empty empty empty 0 -8 0 10 #dfdfdf #000000 #000000 0 1;
#X text 350 26 the '-rel' flag or 'flag' message sets to immediate release mode after the gate off \, wherever you're at. So it goes into the release even if the attack+decay stages haven't finished yet., f 43;
#X text 139 425 One way or another \, not you can use the [timed.gate~] object to create a timed gate so you can trigger the envelope with an impulse \, and thus control the time of the sustain point., f 22;
#X connect 1 0 5 0;
#X connect 2 0 0 0;
#X connect 3 0 2 0;
#X connect 4 0 2 1;
#X connect 5 0 6 0;
#X connect 6 0 9 0;
#X connect 9 0 4 0;
#X connect 11 0 14 0;
#X connect 12 0 10 0;
#X connect 13 0 12 0;
#X connect 14 0 15 0;
#X connect 15 0 12 1;
#X connect 19 0 22 0;
#X connect 20 0 18 0;
#X connect 21 0 20 0;
#X connect 22 0 23 0;
#X connect 23 0 20 1;
#X connect 23 0 27 0;
#X connect 27 0 24 0;
#X connect 28 0 23 0;
#X connect 29 0 28 0;
#X restore 472 291 pd immediate release;
#X f 12;
#X text 30 89 [adsr~] is an attack/decay/sustain/release gated envelope. The attack/decay/release times are set in ms. A gate on sets the maximum attack peak \, the sustain point is a ratio of the gate on value. A gate off sets the release \, but note that \, by default \, if the gate off comes before the sustain point is reached \, the attack+decay stages still get completed before going into the release ramp. Another mode allows an immediate release. The object has multichannel support., f 84;
#X floatatom 248 201 5 0 1000 0 - - - 0;
#X floatatom 292 201 5 0 1000 0 - - - 0;
#X floatatom 336 201 5 0 1 0 - - - 0;
#X floatatom 380 201 5 0 1000 0 - - - 0;
#X floatatom 138 209 2 0 0 0 - - - 0;
#X obj 256 264 else/s2f~;
#X obj 161 231 else/adsr~ 50 100 0.5 500, f 37;
#X text 137 476 rel <float>;
#X text 217 476 - non zero sets to immediate release mode, f 46;
#X text 163 685 -rel: sets to immediate release mode;
#X text 217 446 - retrigger at control rate, f 46;
#X connect 11 0 10 0;
#X connect 20 0 48 0;
#X connect 20 0 87 0;
#X connect 30 0 11 0;
#X connect 40 0 41 0;
#X connect 41 0 50 0;
#X connect 48 0 89 0;
#X connect 50 0 51 0;
#X connect 83 0 89 2;
#X connect 84 0 89 3;
#X connect 85 0 89 4;
#X connect 86 0 89 5;
#X connect 88 0 12 0;
#X connect 89 0 11 1;
#X connect 89 0 88 0;
#X connect 89 1 40 0;
