#N canvas 434 38 560 629 10;
#X obj 226 235 hsl 128 15 1 44100 1 0 empty empty empty -2 -8 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 223 323 else/out~;
#X obj 2 3 cnv 15 301 42 empty empty lfnoise~ 20 20 2 37 #e0e0e0 #000000 0;
#X obj 306 4 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1 0 0;
#X restore 2 3 graph;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 305 3 pd;
#X obj 345 11 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc 0;
#X obj 23 40 cnv 4 4 4 empty empty Low 0 28 2 18 #e0e0e0 #000000 0;
#X obj 65 40 cnv 4 4 4 empty empty frequency 0 28 2 18 #e0e0e0 #000000 0;
#X obj 458 11 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 478 11 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 464 26 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 142 40 cnv 4 4 4 empty empty noise 0 28 2 18 #e0e0e0 #000000 0;
#X obj 2 600 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020 0;
#X obj 3 485 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 3 552 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000 0;
#X obj 94 495 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 162 496 signal;
#X text 151 561 1) float;
#X obj 223 264 nbx 8 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X text 239 234 frequency in Hz;
#X obj 223 290 else/lfnoise~ 400;
#X text 213 561 - frequency in hertz (default 0);
#X text 219 497 - bandlimited noise;
#X obj 95 398 cnv 17 3 55 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 114 418 interp <float>;
#X text 212 417 - interpolation 0 (off \, default) or 1 (on);
#X obj 3 388 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X text 213 579 - interpolation 0 (off \, default) or 1 (on);
#X text 151 579 2) float;
#X msg 138 260 interp \$1;
#X obj 138 233 tgl 16 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X text 126 437 seed <float>;
#X text 83 163 The [lfnoise~] object produces frequencies limited to a band from 0 up to the frequency it is running. It can go up to the sample rate \, and when that happens \, it's basically a white noise generator., f 62;
#N canvas 357 55 923 480 interpolation 0;
#X obj 685 178 noise~;
#X obj 685 210 else/sh~;
#X obj 730 177 else/imp~ 300;
#X obj 648 117 sig~ 300;
#X obj 648 97 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X obj 554 179 else/lfnoise~ 300;
#X obj 554 245 else/out~;
#X obj 685 244 else/out~;
#X obj 764 91 bng 15 250 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000;
#X text 521 29 [lfnoise~] without interpolation is also similar to [noise~] going thgouh [sh~] and being controlled with [imp~].;
#X obj 54 101 noise~;
#X obj 72 194 else/out~;
#X msg 142 107 interp \$1;
#X obj 142 80 tgl 16 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 271 155 else/lfnoise~ 300;
#X obj 271 113 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X obj 54 155 else/downsample~ 300;
#X obj 292 199 else/out~;
#X text 79 26 [lfnoise~] is similar/related to [noise~] going thgouh [downsample~] \, which also has linear interpolation.;
#X text 534 336 See also two simplified versions of [lfnoise~] \, which are: [stepnoise~] (without interpolation) and [rampnoise~] (with interpolation.;
#X obj 696 412 else/rampnoise~;
#X obj 696 388 else/stepnoise~;
#X obj 272 292 else/graph~ 1500 10;
#X obj 55 290 else/graph~ 1500 10;
#X obj 764 116 else/float2imp~;
#X connect 0 0 1 0;
#X connect 1 0 7 0;
#X connect 2 0 1 1;
#X connect 3 0 2 0;
#X connect 3 0 5 0;
#X connect 4 0 3 0;
#X connect 5 0 6 0;
#X connect 8 0 24 0;
#X connect 10 0 16 0;
#X connect 12 0 14 0;
#X connect 12 0 16 0;
#X connect 13 0 12 0;
#X connect 14 0 17 0;
#X connect 14 0 22 0;
#X connect 15 0 14 0;
#X connect 15 0 16 1;
#X connect 16 0 11 0;
#X connect 16 0 23 0;
#X connect 24 0 2 2;
#X connect 24 0 5 1;
#X restore 439 309 pd interpolation;
#X obj 94 461 cnv 17 3 17 empty empty 1 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 162 462 signal;
#X text 213 463 - impulse forces a new random value;
#N canvas 801 184 416 409 sync 0;
#X obj 143 180 else/sig2float~;
#X obj 143 145 else/lfnoise~ 0.5;
#X obj 143 212 nbx 8 15 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X obj 143 250 vsl 18 128 -1 1 0 0 empty empty empty 0 -9 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 242 67 bng 21 250 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000;
#X text 39 18 An impulse into its right inlet forces [lfnoise~] to generate a new random value.;
#X obj 242 100 else/float2imp~;
#X connect 0 0 2 0;
#X connect 1 0 0 0;
#X connect 2 0 3 0;
#X connect 4 0 6 0;
#X connect 6 0 1 1;
#X restore 492 356 pd sync;
#X text 126 398 float/signal;
#X text 212 397 - frequency input in hertz;
#X text 44 281 see also:;
#X obj 45 332 else/rampnoise~;
#X obj 45 308 else/stepnoise~;
#N canvas 806 202 450 300 control 0;
#X obj 267 157 osc~;
#X obj 267 194 else/out~;
#X obj 69 163 osc~;
#X obj 69 200 else/out~;
#X obj 69 133 else/rescale~ 200 800;
#X text 50 33 [lfnoise~] can be used to control parameters of other objects. Here we control the frequency of an oscillator.;
#X obj 267 96 else/lfnoise~ 10 1;
#X obj 267 127 else/rescale~ 200 800;
#X obj 69 103 else/lfnoise~ 10;
#X connect 0 0 1 0;
#X connect 2 0 3 0;
#X connect 4 0 2 0;
#X connect 6 0 7 0;
#X connect 7 0 0 0;
#X connect 8 0 4 0;
#X restore 475 285 pd control;
#X text 82 88 [lfnoise~] is a low frequency (band limited) noise with or without interpolation. It generates random values (between -1 and 1) at a rate in hertz (negative frequencies accepted). It also has a 'sync' inlet that forces the object to generate a new random value when receiving an impulse. Use the seed message if you want a reproducible output., f 62;
#X obj 7 521 cnv 3 550 3 empty empty flags 8 12 0 13 #dcdcdc #000000 0;
#X text 128 530 -seed <float>: sets seed (default: unique internal);
#X text 212 436 - a float sets seed \, no float sets a unique internal;
#N canvas 386 133 857 293 seed 0;
#X text 30 41 Pseudo random number generators aren't true random number generators. Instead \, an algorithm is used to provide a sequence of numbers that seems random. The same sequence can be reproduced if you set a "seed" value \, which can be any integer number., f 52;
#X text 613 22 Sync objects with a seed value;
#X text 30 197 You can set a seed with the '-seed' flag. If you don't supply it \, each object gets its own seed internal seed. If you send a 'seed' message without float \, the object also gets a unique seed value., f 52;
#X obj 600 134 else/graph~ 441 0 -1.05 1.05 200 140;
#X obj 383 134 else/graph~ 441 0 -1.05 1.05 200 140;
#X msg 539 21 seed 319;
#X msg 496 22 seed;
#X text 30 120 Seeds are kept locally \, which means that if two [lfnoise~] objects are seeded the same they will have the same output. Conversely \, you can seed the same [lfnoise~] object twice with the same seed to repeat the output., f 52;
#X obj 383 72 else/lfnoise~ -seed 319 1;
#X obj 600 71 else/lfnoise~ -seed 319 1;
#X obj 383 98 else/numbox~ 6 14 100 #c0c0c4 #440008 10 0 0 0;
#X obj 600 98 else/numbox~ 6 14 100 #c0c0c4 #440008 10 0 0 0;
#X connect 5 0 8 0;
#X connect 5 0 9 0;
#X connect 6 0 8 0;
#X connect 6 0 9 0;
#X connect 8 0 10 0;
#X connect 9 0 11 0;
#X connect 10 0 4 0;
#X connect 11 0 3 0;
#X restore 492 333 pd seed;
#X obj 45 356 else/lfnoise;
#X connect 0 0 19 0;
#X connect 19 0 21 0;
#X connect 21 0 1 0;
#X connect 30 0 21 0;
#X connect 31 0 30 0;
