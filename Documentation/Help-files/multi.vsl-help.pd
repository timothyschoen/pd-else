#N canvas 477 38 561 664 10;
#X obj 2 2 cnv 15 301 42 empty empty multi.vsl 20 20 2 37 #e0e0e0 #000000 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1;
#X restore 2 2 graph;
#X obj 23 39 cnv 4 4 4 empty empty Multi 0 28 2 18 #e0e0e0 #000000 0;
#X obj 305 3 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc 0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 304 2 pd;
#X obj 344 10 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc 0;
#X obj 457 10 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 477 10 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 514 10 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 463 25 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 501 25 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 6 233 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 6 550 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 6 605 cnv 3 550 3 empty empty flags 8 12 0 13 #dcdcdc #000000 0;
#X obj 6 638 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020 0;
#X obj 76 241 cnv 17 3 303 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 76 558 cnv 17 3 42 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 177 556 list;
#X text 178 279 list;
#X text 82 377 range <float \, float>;
#X text 178 237 bang;
#X text 211 349 - sets x (horizontal) size, f 52;
#X text 211 363 - sets y (vertical) size, f 52;
#X text 100 503 bgcolor <f \, f \, f>;
#X text 211 503 - sets background color in RGB, f 52;
#X text 100 517 fgcolor <f \, f \, f>;
#X text 211 517 - sets frontground color in RGB, f 52;
#N canvas 850 96 434 450 range 0;
#X obj 106 287 else/display;
#X msg 118 112 range 0 127;
#X msg 106 89 range -1 1;
#X obj 106 147 else/multi.vsl 200 127 -1 1 8 empty empty empty 255 255 255 220 220 220 0 0 0 0 0 holder holder holder 0 0 0.338583 0 0 0 0 0;
#X text 44 22 By default \, the sliders' output range is from 0 to 127 \, but you can change it with the -range flag or the range message \, which sets the range for all sliders., f 56;
#X text 64 353 Note that when you change the range \, all values are updated internally to the new range before you ever change them by clicking and dragging or the set message or whatever., f 48;
#X connect 1 0 3 0;
#X connect 2 0 3 0;
#X connect 3 0 0 0;
#X restore 61 145 pd range;
#N canvas 674 188 847 400 resize 0;
#X obj 60 348 else/display;
#X obj 284 328 else/display;
#X obj 287 91 hsl 100 15 40 127 0 0 empty empty empty -2 -8 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 284 121 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X obj 513 328 else/display;
#X obj 516 91 hsl 100 15 100 300 0 0 empty empty empty -2 -8 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 513 121 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X obj 284 58 else/initmess 127;
#X msg 284 150 height \$1;
#X msg 513 150 width \$1;
#X obj 60 183 else/multi.vsl 200 127 0 127 8 empty empty empty 255 255 255 220 220 220 0 0 0 0 0 holder holder holder 0 0 0 0 0 35 0 0;
#X msg 40 106 dim 200 127;
#X msg 60 132 dim 150 150;
#X obj 513 58 else/initmess 200;
#X text 33 51 You can set the x/y dimensions with the -dim flag or message., f 30;
#X text 117 100 width 200 height 127, f 10;
#X text 137 126 width 150 height 150, f 10;
#X text 284 26 set height only;
#X text 516 31 set width only;
#X obj 284 182 else/multi.vsl 200 127 0 127 8 empty empty empty 255 255 255 220 220 220 0 0 0 0 0 holder holder holder 0 47.625 0 38 0 0 0 0;
#X obj 513 182 else/multi.vsl 200 127 0 127 8 empty empty empty 255 255 255 220 220 220 0 0 0 0 0 holder holder holder 0 0 0 49 0 12 1 37;
#X connect 2 0 3 0;
#X connect 3 0 8 0;
#X connect 5 0 6 0;
#X connect 6 0 9 0;
#X connect 7 0 2 0;
#X connect 8 0 19 0;
#X connect 9 0 20 0;
#X connect 10 0 0 0;
#X connect 11 0 10 0;
#X connect 12 0 10 0;
#X connect 13 0 5 0;
#X connect 19 0 1 0;
#X connect 20 0 4 0;
#X restore 118 145 pd resize;
#N canvas 621 93 579 617 colors 0;
#X obj 190 444 else/multi.vsl 200 127 0 127 8 empty empty empty 255 255 255 220 220 220 0 0 0 0 0 0 holder holder 64 64 64 64 64 64 64 64;
#X obj 314 394 else/initmess setall 64;
#X text 92 35 You can set background \, foreground ad line colors with the 'bgcolor' \, 'fgcolor' and 'linecolor' messages or '-bgcolor' \, '-fgcolor' and '-linecolor' flags., f 62;
#X text 93 76 These takes 3 floats \, which are colors in RGB.;
#X obj 200 175 vsl 15 128 0 255 0 0 nope nada empty 0 -9 0 10 #fc0000 #fcfcfc #000000 0 0;
#X obj 221 175 vsl 15 128 0 255 0 0 nope nada empty 0 -9 0 10 #00fc00 #fcfcfc #000000 0 0;
#X obj 242 175 vsl 15 128 0 255 0 0 nope nada empty 0 -9 0 10 #0400fc #fcfcfc #000000 0 0;
#X obj 100 175 vsl 15 128 0 255 0 0 nope nada empty 0 -9 0 10 #fc0000 #fcfcfc #000000 0 0;
#X obj 121 175 vsl 15 128 0 255 0 0 nope nada empty 0 -9 0 10 #00fc00 #fcfcfc #000000 0 0;
#X obj 142 175 vsl 15 128 0 255 0 0 nope nada empty 0 -9 0 10 #0400fc #fcfcfc #000000 0 0;
#X obj 298 170 vsl 15 128 0 255 0 0 nope nada empty 0 -9 0 10 #fc0000 #fcfcfc #000000 0 0;
#X obj 319 170 vsl 15 128 0 255 0 0 nope nada empty 0 -9 0 10 #00fc00 #fcfcfc #000000 0 0;
#X obj 340 170 vsl 15 128 0 255 0 0 nope nada empty 0 -9 0 10 #0400fc #fcfcfc #000000 0 0;
#X obj 220 123 else/initmess 255;
#X obj 90 351 else/insert fgcolor, f 11;
#X obj 190 318 else/pack2 255 255 255, f 11;
#X obj 190 351 else/insert bgcolor, f 11;
#X obj 288 351 else/insert linecolor, f 11;
#X obj 90 318 else/pack2 220 220 220, f 11;
#X obj 288 318 else/pack2 0 0 0, f 11;
#X obj 100 123 else/initmess 220;
#X obj 340 123 else/initmess 0;
#X connect 1 0 0 0;
#X connect 4 0 15 0;
#X connect 5 0 15 1;
#X connect 6 0 15 2;
#X connect 7 0 18 0;
#X connect 8 0 18 1;
#X connect 9 0 18 2;
#X connect 10 0 19 0;
#X connect 11 0 19 1;
#X connect 12 0 19 2;
#X connect 13 0 4 0;
#X connect 13 0 6 0;
#X connect 13 0 5 0;
#X connect 14 0 0 0;
#X connect 15 0 16 0;
#X connect 16 0 0 0;
#X connect 17 0 0 0;
#X connect 18 0 14 0;
#X connect 19 0 17 0;
#X connect 20 0 7 0;
#X connect 20 0 9 0;
#X connect 20 0 8 0;
#X connect 21 0 10 0;
#X connect 21 0 11 0;
#X connect 21 0 12 0;
#X restore 55 165 pd colors;
#N canvas 846 280 490 428 jump 0;
#X obj 120 376 else/display;
#X msg 120 206 jump \$1;
#X obj 120 182 tgl 18 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 120 233 else/multi.vsl 200 127 0 127 8 empty empty empty 255 255 255 220 220 220 0 0 0 1 0 0 holder holder 0 0 0 0 0 0 0 0;
#X text 65 28 You can set to "jump on click" mode with the '-jump' flag or 'jump' message. Non zero sets to jump on click mode and zero (default) is "steady on click" mode. These are the same as in Vanilla's sliders.;
#X text 65 80 In jump on click mode \, it behaves kinda like arrays in Pd when you clicck and drag around \, but it'll clip according to the rang. Note that prssing shift for fine tuning doesn't work for "jump on click" \, but you can press "alt"/"option" to lock on a slider.;
#X obj 120 156 loadbang;
#X connect 1 0 3 0;
#X connect 2 0 1 0;
#X connect 3 0 0 0;
#X connect 6 0 2 0;
#X restore 119 166 pd jump;
#N canvas 779 354 587 237 flags 0;
#X obj 16 14 cnv 3 550 3 empty empty flags 8 12 0 13 #dcdcdc #000000 0;
#X obj 16 215 cnv 3 550 3 empty empty empty 8 12 0 13 #dcdcdc #000000 0;
#X text 93 37 -n <float>: sets number of sliders size (default: 8), f 72;
#X text 93 51 -range <float \, float>: sets slidrs' range (default: 0 \, 127), f 72;
#X text 93 65 -name <symbol>: sets arrays name (default: internal), f 72;
#X text 93 79 -jump <float>: non zero sets jump on click mode (default: 0), f 72;
#X text 93 23 -dim <float \, float>: sets x/y dimensions (default: 200 127), f 72;
#X text 93 107 -send <symbol>: sets send symbol (default: empty), f 72;
#X text 93 121 -receive <symbol>: sets receive symbol (default: empty), f 72;
#X text 93 135 -bgcolor <f \, f \, f>: sets background color in RGB (default: 255 255 255), f 72;
#X text 93 149 -fgcolor <f \, f \, f>: sets frontground color in RGB (default: 220 220 220), f 72;
#X text 93 163 -linecolor <f \, f \, f>: sets line color in RGB (default: 0 0 0), f 72;
#X text 93 191 -set <list>: sets slider's values (default: 0 0 0 0 0 0 0 0), f 72;
#X text 93 177 -mode <float>: non zro sets to 'list mode' (default 0), f 72;
#X text 93 93 -savestate: sets to savestate mode, f 72;
#X restore 200 615 pd flags;
#X text 259 615 <= click to open;
#N canvas 671 108 799 465 example 0;
#X obj 60 225 route 0 1 2 3, f 47;
#X floatatom 60 253 5 0 0 0 - - - 0;
#X floatatom 129 253 5 0 0 0 - - - 0;
#X floatatom 199 253 5 0 0 0 - - - 0;
#X floatatom 269 253 5 0 0 0 - - - 0;
#X obj 170 338 rev3~ 100 90 3000 20;
#X obj 147 372 else/out~;
#X obj 269 279 else/sine~;
#X obj 199 279 else/sine~;
#X obj 129 279 else/sine~;
#X obj 60 279 else/sine~;
#X obj 604 346 rev3~ 100 90 3000 20;
#X obj 604 378 else/out~;
#X obj 604 302 clone else/multi.vsl.clone.ex 4;
#X obj 438 97 else/multi.vsl 120 150 200 2000 4 empty empty empty 63 51 84 111 64 97 217 217 192 1 1 0 holder holder 1256 1028 1124 608;
#X obj 60 52 else/multi.vsl 120 150 200 2000 4 empty empty empty 63 51 84 111 64 97 217 217 192 1 1 0 holder holder 968 1340 776 584;
#X text 237 78 In the default mode \, you can use [route] to route values from the multi slider. You can also use [clone] and feed the output directly to it., f 30;
#X obj 604 75 else/multi.vsl 120 150 200 2000 4 empty empty empty 63 51 84 111 64 97 217 217 192 1 1 1 holder holder 776 1028 680 872;
#X obj 604 266 else/order;
#X obj 604 233 else/display;
#X obj 418 302 else/sine~;
#X obj 418 323 else/sum~;
#X obj 418 350 rev3~ 100 90 3000 20;
#X obj 418 382 else/out~;
#X text 513 10 In the list output mode you can use [order] to connect to [clone] \, but in this case we also send it to [sine~] as it generates MC signals with it., f 35;
#X connect 0 0 1 0;
#X connect 0 1 2 0;
#X connect 0 2 3 0;
#X connect 0 3 4 0;
#X connect 1 0 10 0;
#X connect 2 0 9 0;
#X connect 3 0 8 0;
#X connect 4 0 7 0;
#X connect 5 0 6 0;
#X connect 5 1 6 1;
#X connect 7 0 5 0;
#X connect 8 0 5 0;
#X connect 9 0 5 0;
#X connect 10 0 5 0;
#X connect 11 0 12 0;
#X connect 11 1 12 1;
#X connect 13 0 11 0;
#X connect 14 0 13 0;
#X connect 15 0 0 0;
#X connect 17 0 19 0;
#X connect 18 0 13 0;
#X connect 19 0 18 0;
#X connect 19 0 20 0;
#X connect 20 0 21 0;
#X connect 21 0 22 0;
#X connect 22 0 23 0;
#X connect 22 1 23 1;
#X restore 119 206 pd example;
#N canvas 841 146 629 407 send/receive 0;
#X msg 360 64 receive \\\$0-slider3d-rcv \, send \\\$0-slider3d-snd, f 25;
#X text 80 43 You can also set send/receive names with the 'send'/'receive' messages or '-send'/'-receive' flags., f 31;
#X msg 378 113 receive \\\$0-rcv \, send \\\$0-snd, f 16;
#X obj 175 233 send \$0-slider3d-rcv;
#X obj 175 259 receive \$0-slider3d-snd;
#X obj 71 240 send \$0-rcv;
#X obj 71 266 receive \$0-snd;
#X msg 392 171 receive empty \, send empty, f 16;
#X text 82 144 Setting these to 'empty' removes the send/receive symbols., f 32;
#X text 81 102 Make sure to escape "\$0" properly with backslashes (as in: "\\\$0")., f 24;
#X obj 175 292 else/display;
#X obj 71 299 else/display;
#X obj 360 224 else/multi.vsl;
#X msg 175 205 set 7 127;
#X msg 71 212 0 64 127;
#X connect 0 0 12 0;
#X connect 2 0 12 0;
#X connect 4 0 10 0;
#X connect 6 0 11 0;
#X connect 7 0 12 0;
#X connect 13 0 3 0;
#X connect 14 0 5 0;
#X restore 20 206 pd send/receive;
#X text 245 114 press shift for fine tuning and alt/option for locking on a slider, f 11;
#X obj 320 201 else/display 7;
#X text 378 205 <= slider number / value;
#X text 211 279 - sets and dumps sliders values from the first (0), f 56;
#X text 94 335 dim <float \, float>;
#X text 211 335 - sets dimensions (horizontal \, vertical), f 52;
#X text 124 349 width <float>;
#X text 118 363 height <float>;
#X text 211 377 - sets sliders output range, f 52;
#X text 88 531 linecolor <f \, f \, f>;
#X text 211 531 - sets value line color in RGB, f 52;
#X text 211 321 - gets sliders values from the first float, f 52;
#X text 142 293 set <list>;
#X text 142 321 get <list>;
#X text 118 307 setall <float>;
#X text 148 391 n <float>;
#X text 211 391 - sets number of sliders, f 52;
#X text 112 405 rename <symbol>;
#X text 211 405 - sets internal array name, f 52;
#X text 130 419 jump <float>;
#X text 211 419 - non zerto sets to jump on click mode, f 52;
#X text 124 433 import <list>;
#X text 166 447 export;
#X text 211 447 - exports sliders values as a list, f 52;
#X text 123 582 export <list>;
#X text 212 582 - list of values when receiving export message, f 53;
#X text 124 475 send <symbol>;
#X text 106 489 receive <symbol>;
#X text 211 475 - sets send name, f 52;
#X text 211 489 - sets receive name, f 52;
#N canvas 892 64 670 661 basic 0;
#X obj 225 328 else/multi.vsl 200 127 0 127 9 empty empty empty 255 255 255 220 220 220 0 0 0 0 0 0 holder holder 0 0 0 0 0 0 0 0;
#X msg 210 90 n 5;
#X msg 181 90 n 9;
#X text 238 89 set number of sliders;
#X obj 225 120 bng 17 250 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000;
#X msg 249 149 dump;
#X obj 225 547 route export;
#X obj 225 616 else/display;
#X msg 138 62 export;
#X msg 74 29 import 10 20 30 40 50 60 70;
#X msg 257 178 get 1;
#X msg 268 202 get 4 0 2;
#X text 299 178 get value of slider 1;
#X text 334 197 get sliders 4 \, 0 and 2, f 11;
#X text 67 329 Press shift for fine tuning just like in vanilla's sliders., f 21;
#X text 67 373 If you press "alt" or "option" (for mac) \, it locks on a given slider \, so if you scroll to a different slider \, it keeps affecting the locked one, f 21;
#X obj 241 517 print multi.vsl;
#X obj 282 239 tgl 15 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X text 339 262 output as a whole list;
#X text 307 239 <= list output mode;
#X obj 225 475 else/display;
#X obj 294 574 else/display;
#X msg 282 262 mode \$1;
#X text 286 287 The default mode is slider number / value;
#X text 183 62 exports sliders' values as a list preceded by 'export';
#X text 284 149 dump all values sequentially as slider number / value;
#X text 252 18 The import message sets the number of sliders according to the number of numbers. It sets and outputs the sliders' values., f 44;
#X text 286 302 this affects bang and import messages;
#X text 248 119 output all values (depends on 'mode');
#X connect 0 0 20 0;
#X connect 1 0 0 0;
#X connect 2 0 0 0;
#X connect 4 0 0 0;
#X connect 5 0 0 0;
#X connect 6 0 7 0;
#X connect 6 1 21 0;
#X connect 8 0 0 0;
#X connect 9 0 0 0;
#X connect 10 0 0 0;
#X connect 11 0 0 0;
#X connect 17 0 22 0;
#X connect 20 0 6 0;
#X connect 20 0 16 0;
#X connect 22 0 0 0;
#X restore 61 125 pd basic;
#X obj 132 39 cnv 4 4 4 empty empty slider 0 28 2 18 #e0e0e0 #000000 0;
#X obj 71 39 cnv 4 4 4 empty empty vertical 0 28 2 18 #e0e0e0 #000000 0;
#X text 211 433 - sets number of sliders and values (and dumps them);
#N canvas 875 108 475 561 name 0;
#X obj 123 185 else/multi.vsl;
#X obj 74 345 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X obj 74 404 else/display;
#X msg 123 147 rename array_\\\$0;
#X obj 74 374 array get array_\$0;
#X obj 299 391 tabread array_\$0;
#X floatatom 299 367 5 0 7 0 - - - 0;
#X floatatom 299 417 5 0 0 0 - - - 0;
#X floatatom 299 453 5 0 7 0 - - - 0;
#X floatatom 299 503 5 0 0 0 - - - 0;
#X obj 299 477 expr array_\$0[$f1];
#X obj 74 450 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X obj 74 509 else/display;
#X obj 74 479 else/buffer array_\$0;
#X text 43 18 The multi slider object has an internal array that stores the data so you can access it. You can set its internal array name at initialization with the '-name' flag and name it or rename it with the 'rename' message.;
#X text 43 74 You can then use other objects in Pd to access its values as below. Just be sure to escape the \$0 with a bacslash if you're using it., f 59;
#X connect 1 0 4 0;
#X connect 3 0 0 0;
#X connect 4 0 2 0;
#X connect 5 0 7 0;
#X connect 6 0 5 0;
#X connect 8 0 10 0;
#X connect 10 0 9 0;
#X connect 11 0 13 0;
#X connect 13 0 12 0;
#X restore 119 186 pd name;
#X text 211 307 - sets all sliders' values, f 52;
#X text 211 293 - sets values from the index deefined in the first float;
#X text 47 84 [multi.vsler] is a multi slider GUI abstraction., f 24;
#X text 212 555 -;
#X text 224 555 slider number / slider value in the default mode or all values as a list in the "list mode", f 51;
#X text 178 265 dump;
#X text 130 251 mode <float>;
#X text 211 237 - outputs all slider's values (depends on mode), f 56;
#X text 211 251 - non zero sets to "list mode" - see [pd basic], f 56;
#X text 211 265 - outputs values sequentially as slider number / value, f 56;
#X text 240 82 click and drag ======>, f 12;
#N canvas 999 93 471 632 set-get-values 0;
#X obj 100 553 else/display;
#X obj 100 413 else/multi.vsl 200 127 0 127 8 empty empty empty 255 255 255 220 220 220 0 0 0 0 0 1 holder holder 0 50 46 0 0 0 0 0;
#X msg 131 239 set 3 10 20 30 40;
#X msg 110 194 setall 90;
#X msg 84 146 50 120 50;
#X msg 122 216 set 0 10;
#X msg 100 171 120 110 100 90 60 50 40 30;
#X text 179 216 set slider 0 to "10";
#X text 244 233 set slider 3 \, 4 \, 5 \, 6 to "10" \, "20" \, "30" and "40", f 25;
#X text 34 69 The "setall" message sets a float to all the sliders. The "set" message will set one or more sliders counting from the slider number defined in the first float., f 67;
#X floatatom 184 292 5 0 0 0 - - - 0;
#X msg 184 315 set 1 \$1 \, get 1;
#X text 223 291 set and output slider;
#X msg 189 372 mode \$1;
#X obj 189 349 tgl 17 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X text 35 19 If you send it a list of values \, it updates and outputs the sliders counting from the first one. If the list is shorter than the number of sliders \, just the first sliders are updated. If it is longer \, the extra ones are ignored., f 67;
#X msg 183 264 get 3 5;
#X obj 100 587 print set-get-multi.vsl;
#X msg 141 264 get 1;
#X text 239 265 get one or more slider values;
#X text 212 350 <= sets to list mode;
#X text 244 372 affects output of list input \, but not "get", f 22;
#X text 34 109 The "get" gets the value of one or more sliders., f 67;
#X connect 0 0 17 0;
#X connect 1 0 0 0;
#X connect 2 0 1 0;
#X connect 3 0 1 0;
#X connect 4 0 1 0;
#X connect 5 0 1 0;
#X connect 6 0 1 0;
#X connect 10 0 11 0;
#X connect 11 0 1 0;
#X connect 13 0 1 0;
#X connect 14 0 13 0;
#X connect 16 0 1 0;
#X connect 18 0 1 0;
#X restore 117 125 pd set-get-values;
#X text 100 461 savestate <float>;
#N canvas 399 159 605 370 savestate 0;
#X obj 108 159 else/multi.vsl 200 127 0 127 8 empty empty empty 255 255 255 220 220 220 0 0 0 0 1 0 holder holder 117 93 56 35 42 75 97 123;
#X obj 108 107 tgl 15 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000 0 1;
#X text 411 163 see also;
#X obj 408 191 savestate;
#X obj 408 223 else/presets;
#A saved -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \;;
#X text 188 42 With the 'savestate' message or '-savestate' flag \, the GUI operates in 'save state mode' \, where it saves the state from the last time the patch was saved. Note that this is only useful for patches and not abstractions. For abstractions oyou should use [savestate] instead \, and also have a look at [presets]. Unlike iemguis \, the value is not output when loading the patch \, use [loadbang] for that.;
#X msg 108 129 savestate \$1;
#X obj 108 304 else/display;
#X connect 0 0 7 0;
#X connect 1 0 6 0;
#X connect 6 0 0 0;
#X restore 37 186 pd savestate;
#X text 211 461 - non zero sets to savestate mode, f 52;
#X obj 320 64 else/multi.vsl 200 127 0 127 8 empty empty empty 255 255 255 220 220 220 0 0 0 0 0 0 holder holder 16 32 6 2 22 28 38 54;
#X connect 85 0 36 0;
