#N canvas 507 58 564 456 10;
#X obj 2 3 cnv 15 301 42 empty empty function~ 20 20 2 37 #e0e0e0 #000000 0;
#X obj 305 4 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1 0 0;
#X restore 2 3 graph;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 304 3 pd;
#X obj 344 11 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc 0;
#X obj 22 40 cnv 4 4 4 empty empty Function 0 28 2 18 #e0e0e0 #000000 0;
#X obj 93 40 cnv 4 4 4 empty empty Generator 0 28 2 18 #e0e0e0 #000000 0;
#X obj 457 11 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 477 11 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 514 11 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 463 26 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 501 26 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 2 426 cnv 15 552 21 empty \$0-pddp.cnv.footer empty 20 12 0 14 #dcdcdc #404040 0;
#X obj 1 270 cnv 3 550 3 empty \$0-pddp.cnv.inlets inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 1 328 cnv 3 550 3 empty \$0-pddp.cnv.outlets outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 1 392 cnv 3 550 3 empty \$0-pddp.cnv.argument arguments 8 12 0 13 #dcdcdc #000000 0;
#X obj 100 277 cnv 17 3 45 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 178 290 list;
#X obj 100 337 cnv 17 3 17 empty \$0-pddp.cnv.let.0 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 216 338 - function output, f 35;
#X text 218 275 - values from 0 to 1 reads function, f 49;
#X text 106 400 1) list;
#X text 218 290 - 3 or more floats set function, f 49;
#X obj 210 210 else/function~ 1 1 -1;
#X obj 210 187 nbx 5 14 0 1 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X obj 213 163 hsl 128 15 0 1 0 0 empty empty empty -2 -8 0 10 #dcdcdc #000000 #000000 0 1;
#N canvas 695 38 544 587 example 0;
#X obj 172 357 else/out~;
#X obj 59 246 phasor~ 200;
#X obj 59 224 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X text 201 113 inverted sawtooth;
#X text 271 137 triangular wave;
#X text 326 166 trapezoid;
#X text 59 15 The [function~] object allows line segments and in any range. Here we use it in the -1 to 1 range to generate waveforms and use them as oscillators with a [phasor~] input., f 73;
#X text 368 223 <== the [function] object is quite convenient for use with [function~]. Check its help file for more info, f 18;
#X obj 156 201 else/function 200 100 empty empty -1 1 220 220 220 50 50 50 1 0 0 0 -1 1 1;
#X obj 156 420 else/graph~ 441 8 -1.05 1.05 200 140;
#X msg 169 138 -1 0.5 1 0.5 -1;
#X msg 142 92 -1 1 1;
#X msg 156 114 1 1 -1;
#X msg 176 166 -1 0.25 1 0.5 1 0.25 -1;
#X text 187 91 sawtooth;
#X obj 142 68 loadbang;
#X obj 156 327 else/function~ 1 100 -1;
#X connect 1 0 16 0;
#X connect 2 0 1 0;
#X connect 8 0 16 0;
#X connect 10 0 8 0;
#X connect 11 0 8 0;
#X connect 12 0 8 0;
#X connect 13 0 8 0;
#X connect 15 0 11 0;
#X connect 16 0 0 0;
#X connect 16 0 9 0;
#X restore 464 186 pd example;
#X text 158 400 - 3 or more floats to set the function (default no function);
#X obj 6 364 cnv 3 550 3 empty empty flags 8 12 0 13 #dcdcdc #000000 0;
#X text 218 305 - sets exponential values for each line segment, f 49;
#X obj 480 69 else/setdsp~;
#X text 31 200 see also:;
#X obj 31 226 else/envgen~;
#X obj 210 235 else/numbox~ 6 12 100 #c0c0c4 #440008 10 0 0 0;
#X text 130 305 curve <list>;
#X text 141 372 -curve <float> sets curve type for all segments, f 49;
#N canvas 791 172 367 473 multichannel 0;
#X obj 236 273 setdsp~ 1;
#X obj 82 253 vsl 19 162 0 1 0 0 empty empty empty 0 -9 0 12 #dfdfdf #000000 #000000 0 1;
#X obj 82 96 else/pimp~ -mc 0.5 1;
#X obj 82 131 else/function~ 0 1 1 1 0;
#X obj 82 209 else/s2f~;
#X obj 151 209 else/s2f~;
#X obj 151 253 vsl 19 162 0 1 0 0 empty empty empty 0 -9 0 12 #dfdfdf #000000 #000000 0 1;
#X text 53 37 Giving [function~[ a multichannel input outputs the same number of channels., f 39;
#X obj 82 165 snake~ out 2;
#X connect 2 0 3 0;
#X connect 3 0 8 0;
#X connect 4 0 1 0;
#X connect 5 0 6 0;
#X connect 8 0 4 0;
#X connect 8 1 5 0;
#X restore 435 229 pd multichannel;
#X text 148 275 signal(s);
#X text 42 86 [function~] generates functions from arguments/list input. Input values from 0 to 1 (hence \, a phase input) reads the function. It needs an odd number of elements in a list (at least 3 ) \, the syntax is (point1 \, period \, point2 \, period \, point3 \, etc...). The overall sum of periods is normalized to 1! It has support for multichannels., f 68;
#N canvas 411 180 870 624 curves 0;
#X obj 145 387 else/out~;
#X obj 35 173 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X obj 126 450 else/graph~ 441 8 -1.05 1.05 200 140;
#X obj 35 195 phasor~ 200;
#X obj 509 315 else/out~;
#X obj 491 186 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X obj 491 385 else/graph~ 441 8 -1.05 1.05 200 140;
#X obj 598 105 hsl 128 15 2 25 1 0 empty empty empty -2 -8 0 10 #dcdcdc #000000 #000000 0 1;
#X floatatom 595 129 6 0 0 0 - - - 0;
#X obj 491 208 phasor~ 100;
#X obj 355 186 else/rescale~;
#X text 595 61 Here's how to create parabolic waveforms:, f 20;
#X obj 127 356 else/function~ -1 0.5 1 0.5 -1;
#X obj 583 239 else/insert curve;
#X obj 491 267 else/function~ 0 0.5 1 0.5 0 0.5 -1 0.5 0;
#X obj 595 153 expr strcat("^" \, sym(-$f1)) \; strcat("^" \, sym(-$f1)) \; strcat("^" \, sym($f1)) \; strcat("^" \, sym($f1));
#X obj 583 212 pack symbol symbol symbol symbol;
#X text 46 21 The 'curve' message sets an exponential factor for each segment \, just one value sets for all segments. It can be a float - which sets a curve parameter like in the [smooth~] object - or a symbol. The 'lin' symbol sets to linear and is the default. A 'lag' symbol sets to 1-pole filtering like with the [lag~] object. Other symbols that are floats preceded by '^' set to a power factor like in [rescale~] or [glide~]. A power factor of -1 \, 1 and 0 also set to linear (as well as 'curve' 0). Lastly \, you can also set to 'sin' (half a sine) and 'hann'., f 79;
#X text 188 145 linear;
#X msg 204 290 curve ^4 ^-4;
#X msg 125 145 curve lin;
#X msg 200 246 curve ^4;
#X msg 147 165 curve lag;
#X text 210 165 1-pole;
#X msg 190 225 curve 1;
#X msg 164 185 curve sin;
#X msg 176 205 curve hann;
#X text 257 246 power;
#X msg 210 314 curve sin -0.5;
#X obj 355 207 else/glide~;
#X obj 357 236 else/smooth~;
#X text 350 160 see also:;
#X obj 358 263 else/lag~;
#X text 262 107 You can also use the '-curve' flag \, which takes a float or a symbol that sets the curvature for all segments (default 'lin')., f 43;
#X obj 356 391 else/envelope~;
#X text 348 340 'sin' and 'hann' are also options in [envelope~], f 16;
#X text 306 300 for each segment;
#X connect 1 0 3 0;
#X connect 3 0 12 0;
#X connect 5 0 9 0;
#X connect 7 0 8 0;
#X connect 8 0 15 0;
#X connect 9 0 14 0;
#X connect 12 0 0 0;
#X connect 12 0 2 0;
#X connect 13 0 14 0;
#X connect 14 0 4 0;
#X connect 14 0 6 0;
#X connect 15 0 16 0;
#X connect 15 1 16 1;
#X connect 15 2 16 2;
#X connect 15 3 16 3;
#X connect 16 0 13 0;
#X connect 19 0 12 0;
#X connect 20 0 12 0;
#X connect 21 0 12 0;
#X connect 22 0 12 0;
#X connect 24 0 12 0;
#X connect 25 0 12 0;
#X connect 26 0 12 0;
#X connect 28 0 12 0;
#X restore 470 208 pd curves;
#X text 148 338 signal(s);
#X connect 23 0 33 0;
#X connect 24 0 23 0;
#X connect 25 0 24 0;
